anonymousReplication: allow
comment: Fullsync connector that holds all responses
databaseName: c8oforms_response_fs
↓GetDocument [transactions.couchdb.GetDocumentTransaction]: 
  ↓Test_Case [core.TestCase]: 
    ↓_use_docid [variables.TestCaseVariable-1570090884447]: 
      description: Document ID
      value: grimont.c@gmail.com_1567067321897_1570024341583
  ↓_use_docid [variables.RequestableVariable-1570090818803]: 
    description: Document ID
    value: 
↓GetDocumentAttachment [transactions.couchdb.GetDocumentAttachmentTransaction]: 
  ↓_use_attname [variables.RequestableVariable-1599747026228]: 
    description: Attachment name
  ↓_use_docid [variables.RequestableVariable-1599747026230]: 
    description: Document ID
  ↓_use_attpath [variables.RequestableVariable-1599747026232]: 
    description: Attachment path  This path is either absolute or relative to Convertigo environment. Relative paths starting with:<br/><br/>• <span class="computer">./</span> are relative to Convertigo workspace,<br/>• <span class="computer">.//</span> are relative to current project folder. <br/><br/>
↓GetDocumentRev [transactions.couchdb.GetDocumentTransaction]: 
  ↓_use_docid [variables.RequestableVariable-1615466265899]: 
    description: Document ID
  ↓_use_rev [variables.RequestableVariable-1615466265902]: 
    description: (string) – Retrieves document of specified revision. Optional
↓GetResponseByFormId [transactions.couchdb.GetViewTransaction]: 
  viewname: Design_document/responsesByFormId
  ↓Test_Case [core.TestCase]: 
    ↓_use_key [variables.TestCaseVariable-1570111333161]: 
      description: (string) – Return only documents that match the specified key. Optional
      value: '"1567067321897"'
  ↓_use_key [variables.RequestableVariable-1570111315311]: 
    description: (string) – Return only documents that match the specified key. Optional
↓GetServerInfo [transactions.couchdb.GetServerInfoTransaction]: 
  ↑default: true
↓GetView [transactions.couchdb.GetViewTransaction]: 
  viewname: Design_document/view
  ↓_use_key [variables.RequestableVariable-1572470474538]: 
    description: (string) – Return only documents that match the specified key. Optional
↓GetView1 [transactions.couchdb.GetViewTransaction]: 
  viewname: Design_document/view1
  ↓_use_key [variables.RequestableVariable-1591964805053]: 
    description: (string) – Return only documents that match the specified key. Optional
↓GetView1_multiple [transactions.couchdb.GetViewTransaction]: 
  viewname: Design_document/view1_multiple
  ↓_use_key [variables.RequestableVariable-1602495933412]: 
    description: (string) – Return only documents that match the specified key. Optional
↓GetView1Pretty [transactions.couchdb.GetViewTransaction]: 
  viewname: Design_document/view1_Pretty
  ↓_use_key [variables.RequestableVariable-1602494507172]: 
    description: (string) – Return only documents that match the specified key. Optional
↓PostBulkDocuments [transactions.couchdb.PostBulkDocumentsTransaction]: 
  fullSyncAclPolicy: fromKeyC8oAcl
  policy: override
  ↓_use_json_base [variables.RequestableVariable-1594382753145]: 
    description: (string) – JSON use as a base for the array of documents (js array), or for individual documents (js object). Optional
↓PostDocument [transactions.couchdb.PostDocumentTransaction]: 
  fullSyncAclPolicy: fromKeyC8oAcl
  policy: merge
  ↓_c8oAcl [variables.RequestableVariable-1593705650341]: 
    description: Set the owner of the document if the "Acl Policy"="From _c8oACL variable"
  ↓_id [variables.RequestableVariable-1593705650343]: 
    description: Document id
  ↓c8oGrp [variables.RequestableVariable-1593705650345]: 
    description: Set the group of the document (see lib_FullSyncGrp)
  ↓_use_json_base [variables.RequestableVariable-1593706108749]: 
    description: (string) – JSON use as a base for the document (js object). Optional
    value: 
  ↓resp [variables.RequestableVariable-1593709452846]: 
↓PostDocumentJBASE [transactions.couchdb.PostDocumentTransaction]: 
  fullSyncAclPolicy: noOp
  policy: merge
  ↓_use_json_base [variables.RequestableVariable-1615460801760]: 
    description: (string) – JSON use as a base for the document (js object). Optional
  ↓_id [variables.RequestableVariable-1615460801762]: 
    description: Document id
↓PurgeDatabase [transactions.couchdb.PurgeDatabaseTransaction]: 
  purgeAll: true
↓PutDocumentAttachment [transactions.couchdb.PutDocumentAttachmentTransaction]: 
  ↓_use_attname [variables.RequestableVariable-1593717335092]: 
    description: Attachment name
  ↓_use_attpath [variables.RequestableVariable-1593717335094]: 
    description: Attachment path  This path is either absolute or relative to Convertigo environment. Relative paths starting with:<br/><br/>• <span class="computer">./</span> are relative to Convertigo workspace,<br/>• <span class="computer">.//</span> are relative to current project folder. <br/><br/>
  ↓_use_docid [variables.RequestableVariable-1593717335096]: 
    description: Document ID
↓PutDocumentAttachmentFromFile [transactions.couchdb.PutDocumentAttachmentTransaction]: 
  ↓_use_attname [variables.RequestableVariable-1615460071150]: 
    description: Attachment name
  ↓_use_attpath [variables.RequestableVariable-1615460071153]: 
    description: Attachment path  This path is either absolute or relative to Convertigo environment. Relative paths starting with:<br/><br/>• <span class="computer">./</span> are relative to Convertigo workspace,<br/>• <span class="computer">.//</span> are relative to current project folder. <br/><br/>
  ↓_use_docid [variables.RequestableVariable-1615460071156]: 
    description: Document ID
  ↓_use_attcontent_type [variables.RequestableVariable-1615460071159]: 
    description: Attachment ContentType  Define the ContentType of the attachment. This is the ContentType returned when the attachment is requested.
↓Design_document [couchdb.DesignDocument]: 
  docdata: 
    →: |
      '{
        "_id": "_design\/Design_document",
        "filters": {},
        "updates": {},
        "views": {
          "getResponses": {
            "map": "function (doc) {\r\n
          try {\r\n
              if(doc.timestamp != null){\r\n
                  emit(doc.formId, doc);\r\n
              }    \r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }",
            "reduce": "function (keys, values, rereduce) {\r\n
          try {\r\n
               return values;\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          },
          "responsesById": {
            "map": "function (doc) {\r\n
          try {\r\n
              if(doc.timestamp != null){\r\n
                  emit(doc._id);\r\n
              }    \r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }",
            "reduce": "function (keys, values, rereduce) {\r\n
          try {\r\n
               return values;\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          },
          "responsesByFormId": {
            "map": "function (doc) {\r\n
          try {\r\n
              emit(doc.formId, {doc: doc});\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          },
          "view": {
            "map": "function (doc) {\r\n
          try {\r\n
              \/\/function flatenize\r\n
              var flatenize = function (doc, prefix, resp, myid){\r\n
                    for (var property in doc) {\r\n
                      if(doc[property].type != undefined){\r\n
                        if(doc[property].type == \"ion-card\"){\r\n
                          flatenize(doc[property][\"children\"], doc[property][\"name\"]+\"_\", resp, myid);\r\n
                        }\r\n
                        else if(doc[property].type == \"radio_group\"){\r\n
                            for(var ninos in doc[property].children){\r\n
                              resp.push({\"key\":property+\"_\" + ninos, \"value\": doc[property].children[ninos]})\r\n
                            }\r\n
                        }\r\n
                        else{\r\n
                          if(doc[property].type == \"checkbox\"){\r\n
                              var val =\"\";                        \r\n
                              for (var child in doc[property].children) {\r\n
                                  if(doc[property].children[child].selected){\r\n
                                      if(val == \"\"){\r\n
                                          val = doc[property].children[child].value + \"\";\r\n
                                      }\r\n
                                      else{\r\n
                                          val = val + \",\" + doc[property].children[child].value;\r\n
                                      }\r\n
                                    \r\n
                                }\r\n
                            }\r\n
                            resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": val});\r\n
                          }\r\n
                          else if(doc[property].type == \"checkbox_group\"){\r\n
                            \/\/ foreach Line\r\n
                            for(var ninos in doc[property].children){\r\n
                              var val = \"\";\r\n
                              \/\/ foreach Column\r\n
                              for (var child in doc[property].children[ninos]) {\r\n
                                  if(doc[property].children[ninos][child].selected === true){\r\n
                                    if(val === \"\"){\r\n
                                      val = doc[property].children[ninos][child].value;\r\n
                                    }\r\n
                                    else{\r\n
                                      val = val + \",\" + doc[property].children[ninos][child].value;\r\n
                                    } \r\n
                                  }\r\n
                              }\r\n
                              resp.push({\"key\":prefix + property+\"_\" + ninos, \"value\": val});\r\n
                            }\r\n
                          }\r\n
                          else if(doc[property].type == \"img\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                  resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__IMG,\"+myid})  \r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"signature\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__SIGNATURE,\"+myid})\r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"file\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                var str = \"\";\r\n
                                for(var elem in doc[property][\"value\"]){\r\n
                                  str += \",\" + doc[property][\"value\"][elem];\r\n
                                }\r\n
                                resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__FILE,\"+myid+str})\r\n
                              } \r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                          else{\r\n
                           resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]}) \r\n
                          }\r\n
                        }\r\n
                      }\r\n
                    }\r\n
              };\r\n
              \/\/function getDate\r\n
              var getDate = function (timeStamp) {\r\n
                  var date = new Date(+timeStamp),\r\n
                  year = date.getFullYear(),\r\n
                  month = (date.getMonth() + 1).toString(),\r\n
                  formatedMonth = (month.length === 1) ? (\"0\" + month) : month,\r\n
                  day = date.getDate().toString(),\r\n
                  formatedDay = (day.length === 1) ? (\"0\" + day) : day,\r\n
                  hour = date.getHours().toString(),\r\n
                  formatedHour = (hour.length === 1) ? (\"0\" + hour) : hour,\r\n
                  minute = date.getMinutes().toString(),\r\n
                  formatedMinute = (minute.length === 1) ? (\"0\" + minute) : minute,\r\n
                  second = date.getSeconds().toString(),\r\n
                  formatedSecond = (second.length === 1) ? (\"0\" + second) : second;\r\n
                  return formatedDay + \"-\" + formatedMonth + \"-\" + year + \" \" + formatedHour + '':'' + formatedMinute + '':'' + formatedSecond;\r\n
              };\r\n
              var date = getDate(doc.timestamp);\r\n
                var resp = [{\"key\":\"horodateur\", \"value\":date}];\r\n
                flatenize(doc.resp, \"\", resp, doc._id);\r\n
                  emit(doc.formId, {doc: resp});\r\n
              } catch (err) {\r\n
                  log(err.message);\r\n
              }\r\n
      }"
          },
          "getResponseByVersion": {
            "map": "function (doc) {\r\n
              try {\r\n
                  if(doc.version != null){\r\n
                      emit(doc.formId + \"__\" + doc.version, doc);\r\n
                  }    \r\n
              } catch (err) {\r\n
                  log(err.message);\r\n
              }\r\n
          \r\n
      }",
            "reduce": "function (keys, values, rereduce) {\r\n
          try {\r\n
               return values;\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          },
          "view1": {
            "map": "function (doc) {\r\n
          try {\r\n
              \/\/function flatenize\r\n
              var flatenize = function (doc, prefix, resp, myid){\r\n
                    for (var property in doc) {\r\n
                      if(doc[property].type != undefined){\r\n
                        if(doc[property].type == \"ion-card\"){\r\n
                          flatenize(doc[property][\"children\"], doc[property][\"name\"]+\"_\", resp, myid);\r\n
                        }\r\n
                        else if(doc[property].type == \"radio_group\"){\r\n
                            for(var ninos in doc[property].children){\r\n
                              resp.push({\"key\":property+\"_\" + ninos, \"value\": doc[property].children[ninos]})\r\n
                            }\r\n
                        }\r\n
                        else{\r\n
                          if(doc[property].type == \"checkbox\"){\r\n
                              var val =\"\";                        \r\n
                              for (var child in doc[property].children) {\r\n
                                  if(doc[property].children[child].selected){\r\n
                                      if(val == \"\"){\r\n
                                          val = doc[property].children[child].value + \"\";\r\n
                                      }\r\n
                                      else{\r\n
                                          val = val + \",\" + doc[property].children[child].value;\r\n
                                      }\r\n
                                    \r\n
                                }\r\n
                            }\r\n
                            resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": val});\r\n
                          }\r\n
                          else if(doc[property].type == \"checkbox_group\"){\r\n
                            \/\/ foreach Line\r\n
                            for(var ninos in doc[property].children){\r\n
                              var val = \"\";\r\n
                              \/\/ foreach Column\r\n
                              for (var child in doc[property].children[ninos]) {\r\n
                                  if(doc[property].children[ninos][child].selected === true){\r\n
                                    if(val === \"\"){\r\n
                                      val = doc[property].children[ninos][child].value;\r\n
                                    }\r\n
                                    else{\r\n
                                      val = val + \",\" + doc[property].children[ninos][child].value;\r\n
                                    } \r\n
                                  }\r\n
                              }\r\n
                              resp.push({\"key\":prefix + property+\"_\" + ninos, \"value\": val});\r\n
                            }\r\n
                          }\r\n
                          else if(doc[property].type == \"img\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                  resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__IMG,\"+myid})  \r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"signature\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__SIGNATURE,\"+myid})\r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"file\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                var str = \"\";\r\n
                                for(var elem in doc[property][\"value\"]){\r\n
                                  str += \",\" + doc[property][\"value\"][elem];\r\n
                                }\r\n
                                resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__FILE,\"+myid+str})\r\n
                              } \r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                          else{\r\n
                           resp.push({\"key\":prefix + doc[property][\"name\"], \"value\": doc[property][\"value\"]}) \r\n
                          }\r\n
                        }\r\n
                      }\r\n
                    }\r\n
              };\r\n
              \r\n
              var date = doc.timestamp;\r\n
                var resp = [{\"key\":\"horodateur\", \"value\":date}];\r\n
                flatenize(doc.resp, \"\", resp, doc._id);\r\n
                  emit(doc.formId, {doc: resp});\r\n
              } catch (err) {\r\n
                  log(err.message);\r\n
              }\r\n
      }"
          },
          "view1_Pretty": {
            "map": "function (doc) {\r\n
          try {\r\n
              \/\/function flatenize\r\n
              var flatenize = function (doc, prefix, resp, myid){\r\n
                    for (var property in doc) {\r\n
                      if(doc[property].type != undefined){\r\n
                        if(doc[property].type == \"ion-card\"){\r\n
                          flatenize(doc[property][\"children\"], doc[property][\"labelHtml\"] != undefined ? \"[\" + doc[property][\"labelHtml\"] + \"] \" : doc[property][\"label\"] != undefined ? \"[\" + doc[property][\"label\"] + \"] \" : \"[\" + doc[property][\"name\"] + \"] \", resp, myid);\r\n
                        }\r\n
                        else if(doc[property].type == \"radio_group\"){\r\n
                            for(var ninos in doc[property].children){\r\n
                              resp.push({\"key\":property+\" [\" + ninos + \"]\", \"name\":doc[property][\"name\"], \"value\": doc[property].children[ninos]})\r\n
                            }\r\n
                        }\r\n
                        else{\r\n
                          if(doc[property].type == \"checkbox\"){\r\n
                              var val =\"\";                        \r\n
                              for (var child in doc[property].children) {\r\n
                                  if(doc[property].children[child].selected){\r\n
                                      if(val == \"\"){\r\n
                                          val = doc[property].children[child].value + \"\";\r\n
                                      }\r\n
                                      else{\r\n
                                          val = val + \",\" + doc[property].children[child].value;\r\n
                                      }\r\n
                                    \r\n
                                }\r\n
                            }\r\n
                            resp.push({\"key\":prefix + doc[property][\"labelHtml\"], \"name\":doc[property][\"name\"], \"value\": val});\r\n
                          }\r\n
                          else if(doc[property].type == \"checkbox_group\"){\r\n
                            \/\/ foreach Line\r\n
                            for(var ninos in doc[property].children){\r\n
                              var val = \"\";\r\n
                              \/\/ foreach Column\r\n
                              for (var child in doc[property].children[ninos]) {\r\n
                                  if(doc[property].children[ninos][child].selected === true){\r\n
                                    if(val === \"\"){\r\n
                                      val = doc[property].children[ninos][child].value;\r\n
                                    }\r\n
                                    else{\r\n
                                      val = val + \",\" + doc[property].children[ninos][child].value;\r\n
                                    } \r\n
                                  }\r\n
                              }\r\n
                              resp.push({\"key\":prefix + property+\" [\" + ninos + \"]\", \"name\":doc[property][\"name\"], \"value\": val});\r\n
                            }\r\n
                          }\r\n
                          else if(doc[property].type == \"img\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                  resp.push({\"key\":prefix + doc[property][\"labelHtml\"], \"name\":doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__IMG,\"+myid})  \r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"labelHtml\"],\"name\":doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"signature\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                resp.push({\"key\":prefix + doc[property][\"labelHtml\"],\"name\":doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__SIGNATURE,\"+myid})\r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"labelHtml\"],\"name\":doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"file\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                var str = \"\";\r\n
                                for(var elem in doc[property][\"value\"]){\r\n
                                  str += \",\" + doc[property][\"value\"][elem];\r\n
                                }\r\n
                                resp.push({\"key\":prefix + doc[property][\"labelHtml\"], \"name\":doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__FILE,\"+myid+str})\r\n
                              } \r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"labelHtml\"], \"name\":doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                          else{\r\n
                           resp.push({\"key\":prefix + doc[property][\"labelHtml\"], \"name\":doc[property][\"name\"], \"value\": doc[property][\"value\"]}) \r\n
                          }\r\n
                        }\r\n
                      }\r\n
                    }\r\n
              };\r\n
              \r\n
                  var date = doc.timestamp;\r\n
                  var anonymous = false;\r\n
                  var author = \"anonymous\";\r\n
                  if(doc._id.indexOf(\"anonymous-\") == 0){\r\n
                        anonymous = true;\r\n
                  }\r\n
                  else{\r\n
                    author = doc[\"~c8oAcl\"];\r\n
                  }\r\n
                  var resp = [{\"key\":\"horodateur\", \"value\":date}, {\"key\":\"author\", \"value\":author}, {\"key\":\"anonymous\", \"value\":anonymous}];\r\n
                  flatenize(doc.resp, \"\", resp, doc._id);\r\n
                  emit([doc.formId,doc.version], {doc: resp});\r\n
              } catch (err) {\r\n
                  log(err.message);\r\n
              }\r\n
      }"
          },
          "view1_multiple": {
            "map": "function (doc) {\r\n
          try {\r\n
              \/\/function flatenize\r\n
              var flatenize = function (doc, prefix, resp, myid){\r\n
                    for (var property in doc) {\r\n
                      if(doc[property].type != undefined){\r\n
                        if(doc[property].type == \"ion-card\"){\r\n
                          flatenize(doc[property][\"children\"], doc[property][\"name\"]+\"_\", resp, myid);\r\n
                        }\r\n
                        else if(doc[property].type == \"radio_group\"){\r\n
                            for(var ninos in doc[property].children){\r\n
                              resp.push({\"key\":property+\"_\" + ninos, \"name\":doc[property][\"name\"], \"value\": doc[property].children[ninos]})\r\n
                            }\r\n
                        }\r\n
                        else{\r\n
                          if(doc[property].type == \"checkbox\"){\r\n
                              var val =\"\";                        \r\n
                              for (var child in doc[property].children) {\r\n
                                  if(doc[property].children[child].selected){\r\n
                                      if(val == \"\"){\r\n
                                          val = doc[property].children[child].value + \"\";\r\n
                                      }\r\n
                                      else{\r\n
                                          val = val + \",\" + doc[property].children[child].value;\r\n
                                      }\r\n
                                    \r\n
                                }\r\n
                            }\r\n
                            resp.push({\"key\":prefix + doc[property][\"name\"],  \"name\":doc[property][\"name\"], \"value\": val});\r\n
                          }\r\n
                          else if(doc[property].type == \"checkbox_group\"){\r\n
                            \/\/ foreach Line\r\n
                            for(var ninos in doc[property].children){\r\n
                              var val = \"\";\r\n
                              \/\/ foreach Column\r\n
                              for (var child in doc[property].children[ninos]) {\r\n
                                  if(doc[property].children[ninos][child].selected === true){\r\n
                                    if(val === \"\"){\r\n
                                      val = doc[property].children[ninos][child].value;\r\n
                                    }\r\n
                                    else{\r\n
                                      val = val + \",\" + doc[property].children[ninos][child].value;\r\n
                                    } \r\n
                                  }\r\n
                              }\r\n
                              resp.push({\"key\":prefix + property+\"_\" + ninos, \"name\":doc[property][\"name\"], \"value\": val});\r\n
                            }\r\n
                          }\r\n
                          else if(doc[property].type == \"img\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                  resp.push({\"key\":prefix + doc[property][\"name\"],\"name\":doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__IMG,\"+myid})  \r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"],\"name\":doc[property][\"name\"], \"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"signature\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                resp.push({\"key\":prefix + doc[property][\"name\"], \"name\":doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__SIGNATURE,\"+myid})\r\n
                              }\r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"name\":doc[property][\"name\"],\"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                            else if(doc[property].type == \"file\"){\r\n
                              if(doc[property].value != \"\"){\r\n
                                var str = \"\";\r\n
                                for(var elem in doc[property][\"value\"]){\r\n
                                  str += \",\" + doc[property][\"value\"][elem];\r\n
                                }\r\n
                                resp.push({\"key\":prefix + doc[property][\"name\"], \"name\":doc[property][\"name\"], \"value\": \"__C8O__UNIQUE__FILE,\"+myid+str})\r\n
                              } \r\n
                              else{\r\n
                                 resp.push({\"key\":prefix + doc[property][\"name\"], \"name\":doc[property][\"name\"],\"value\": doc[property][\"value\"]})\r\n
                              }\r\n
                            }\r\n
                          else{\r\n
                           resp.push({\"key\":prefix + doc[property][\"name\"], \"name\":doc[property][\"name\"], \"value\": doc[property][\"value\"]}) \r\n
                          }\r\n
                        }\r\n
                      }\r\n
                    }\r\n
              };\r\n
              \r\n
              var date = doc.timestamp;\r\n
                  var anonymous = false;\r\n
                  var author = \"anonymous\";\r\n
                  if(doc._id.indexOf(\"anonymous-\") == 0){\r\n
                        anonymous = true;\r\n
                  }\r\n
                  else{\r\n
                    author = doc[\"~c8oAcl\"];\r\n
                  }\r\n
                  var resp = [{\"key\":\"horodateur\", \"value\":date}, {\"key\":\"author\", \"value\":author}, {\"key\":\"anonymous\", \"value\":anonymous}];\r\n
                  flatenize(doc.resp, \"\", resp, doc._id);\r\n
                  emit([doc.formId,doc.version], {doc: resp});\r\n
              } catch (err) {\r\n
                  log(err.message);\r\n
              }\r\n
      }"
          },
          "responsesByIdForListener": {
            "map": "function (doc) {\r\n
          try {\r\n
              if(doc.timestamp != null && doc.finished){\r\n
                  emit(doc._id);\r\n
              }    \r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }",
            "reduce": "function (keys, values, rereduce) {\r\n
          try {\r\n
               return values;\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          },
          "responseByFormDate": {
            "map": "function (doc) {\r\n
          var format = function (d) {\r\n
              var month = String(d.getMonth() + 1);\r\n
              var day = String(d.getDate());\r\n
              var year = String(d.getFullYear());\r\n
              if (month.length < 2)\r\n
                  month = ''0'' + month;\r\n
              if (day.length < 2)\r\n
                  day = ''0'' + day;\r\n
              return day + \"\/\" + month + \"\/\" + year;\r\n
          };\r\n
          try {\r\n
              emit([doc.formId, format(new Date(+doc.timestamp))], {doc: doc});\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }",
            "reduce": "function (keys, values, rereduce) {\r\n
          try {\r\n
              return values.length;\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          }
        }
      }'
↓FullSync_Update_Listener_Filter [couchdb.FullSyncFilterListener]: 
  isEnabled: false
  targetSequence: C8Oforms.NotifyResponseByMail
↓FullSync_Update_Listener_View [couchdb.FullSyncListener]: 
  comment: triggered when a new response is submitted
  targetSequence: C8Oforms.Execute_Sequences
  targetView: C8Oforms.c8oforms_response_fs.Design_document.responsesByIdForListener