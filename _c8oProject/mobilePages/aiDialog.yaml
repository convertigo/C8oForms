scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		this.local.purchase = false;
        		const Speech = window["SpeechRecognition"] || window["webkitSpeechRecognition"];
        		this.local.speechReco = new Speech();
        		this.local.speechReco.continuous = true;
        		this.local.speechReco.interimResults = true;
        		this.local.speechReco.onresult = (evt) => {
        			console.log(''result'', evt.results);
        			console.log(''lang'', this.local.speechReco.lang);
        			
        			this.local.inputModel = [...evt.results].map((r) => r[0]?.transcript.trim()).join('' '');
        			this.ref.detectChanges();
        		};
        		this.c8o.callJson("C8Oforms.HasProject", "projectName", "lib_C8Oforms_AI")
        		.then((res: any, parameters: any)=>{
        			if(res.has !== "true"){
        				this.local.purchase = true;
        				let toastController = this.getInstance(ToastController);
        				toastController.create({
        			      message: this.translate.instant("purchase_ai"),
        			      position: "middle",
        			      cssClass: "toastWarn",
        			      buttons: [{text: "Ok"}]
        			    }).then((r)=>{
        					r.present();
        				})
        			
        			}
        			return null;
        		})
        		/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	/*End_c8o_PageFunction*/
        '
segment: path-to-aidialog
title: Title for aiDialog
↓Header [ngx.components.UIDynamicElement-1686573955691]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓ToolBar [ngx.components.UIDynamicElement-1686573955694]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓ButtonSet1 [ngx.components.UIDynamicElement-1686573955697]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
      tagName: ion-buttons
      ↓Button [ngx.components.UIDynamicElement-1686573955700]: 
        beanData: '{"ionBean":"Button"}'
        tagName: ion-button
        ↓Icon [ngx.components.UIDynamicElement-1686573955703]: 
          beanData: '{"ionBean":"Icon","IconName":"plain:close"}'
          tagName: ion-icon
        ↓Event [ngx.components.UIControlEvent-1686573955706]: 
          ↓CloseModal [ngx.components.UIDynamicAction-1686573955709]: 
            beanData: '{"ionBean":"CloseModalAction"}'
    ↓BarTitle [ngx.components.UIDynamicElement-1686573955712]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓ImageConvertigo2 [ngx.components.UIDynamicElement-1686574042001]: 
        beanData: '{"ionBean":"Image","url":"source:{\"filter\":\"Asset\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"asset\":\"''assets\\\/images\\\/svg\\\/icon\\\/ChatGPT_logo.svg''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}"}'
        isEnabled: false
        selfClose: true
        tagName: img
        ↓Style [ngx.components.UIStyle-1686574042004]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '	/*margin-left:0.5em;
                  	margin-right:0.5em;*/
                  	max-height: 36px;
                  	margin-right: 5px;
                  '
      ↓Style [ngx.components.UIStyle-1686934474546]: 
        isEnabled: false
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--color	//Text color of the title
                
                
                	display: flex;
                align-items: center;
                
                '
      ↓Div [ngx.components.UIDynamicElement-1687266601574]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Style [ngx.components.UIStyle-1687266656400]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--color	//Text color of the title
                  
                  
                  	display: flex;
                  align-items: center;
                  
                  '
        ↓ImageConvertigo3 [ngx.components.UIDynamicElement-1686931352541]: 
          beanData: '{"ionBean":"Image","url":"script:''assets\/images\/svg\/logo\/logo_no_code_studio.svg''"}'
          selfClose: true
          tagName: img
          ↓Style [ngx.components.UIStyle-1686931352544]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	/*margin-left:0.5em;
                    	margin-right:0.5em;*/
                    	max-height: 36px;
                    	margin-right:0.5em;
                    '
        ↓Text [ngx.components.UIText-1686573955715]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Convertigo_X_ChatGPT
↓Content [ngx.components.UIDynamicElement-1686573961103]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓Div [ngx.components.UIDynamicElement-1686574562557]: 
    beanData: '{"ionBean":"DivTag"}'
    isEnabled: false
    tagName: div
    ↓Style [ngx.components.UIStyle-1686574568048]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '	display:flex;
              	max-width:800px;
              	flex: 1 1 0;
              	& * { flex: 1 1 0; }
              	
              '
    ↓DivExemples [ngx.components.UIDynamicElement-1686574579000]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓DivHeader [ngx.components.UIDynamicElement-1686574591816]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Div [ngx.components.UIDynamicElement-1686575905356]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1686575763873]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:sunny-outline"}'
            tagName: ion-icon
        ↓Paragraph [ngx.components.UIDynamicElement-1686574608499]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓some_text [ngx.components.UIText-1686574608498]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Examples
        ↓Style [ngx.components.UIStyle-1686575828673]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'display: flex;
                  flex-direction: column;
                  justify-content: center;
                  align-items: center;
                  '
      ↓DivBody [ngx.components.UIDynamicElement-1686574595863]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓CardContainer [ngx.components.UIDynamicElement-1686576072242]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686576072237]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686576072239]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686576072241]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:"génère moi un formulaire de recensement de la population"
        ↓CardContainer1 [ngx.components.UIDynamicElement-1686576212494]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686576212497]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686576212500]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686576212503]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:"Génère moi un formulaire de demande de congé qui permets aux employés de soumettre une demande de congé, en spécifiant la période et la raison de leur absence."
    ↓DivCapabilities [ngx.components.UIDynamicElement-1686584716879]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓DivHeader [ngx.components.UIDynamicElement-1686584716882]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Div [ngx.components.UIDynamicElement-1686584716885]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1686584716888]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:flash-outline"}'
            tagName: ion-icon
        ↓Paragraph [ngx.components.UIDynamicElement-1686584716891]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓some_text [ngx.components.UIText-1686584716894]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Capabilities
        ↓Style [ngx.components.UIStyle-1686584716897]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'display: flex;
                  flex-direction: column;
                  justify-content: center;
                  align-items: center;
                  '
      ↓DivBody [ngx.components.UIDynamicElement-1686584716900]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓CardContainer2 [ngx.components.UIDynamicElement-1686584947231]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686584947234]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686584947237]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686584947240]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:chatgpt_cap_3
        ↓CardContainer [ngx.components.UIDynamicElement-1686584716903]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686584716906]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686584716909]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686584716912]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:chatgpt_cap_1
        ↓CardContainer1 [ngx.components.UIDynamicElement-1686584716915]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686584716918]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686584716921]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686584716924]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:chatgpt_cap_2
    ↓DivLimitations [ngx.components.UIDynamicElement-1686584718839]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓DivHeader [ngx.components.UIDynamicElement-1686584718842]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Div [ngx.components.UIDynamicElement-1686584718845]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1686584718848]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:warning-outline"}'
            tagName: ion-icon
        ↓Paragraph [ngx.components.UIDynamicElement-1686584718851]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓some_text [ngx.components.UIText-1686584718854]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Limitations
        ↓Style [ngx.components.UIStyle-1686584718857]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'display: flex;
                  flex-direction: column;
                  justify-content: center;
                  align-items: center;
                  '
      ↓DivBody [ngx.components.UIDynamicElement-1686584718860]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓CardContainer [ngx.components.UIDynamicElement-1686584718863]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686584718866]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686584718869]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686584718872]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:chatgpt_lim_1
        ↓CardContainer1 [ngx.components.UIDynamicElement-1686584718875]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686584718878]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686584718881]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686584718884]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:chatgpt_lim_2
        ↓CardContainer2 [ngx.components.UIDynamicElement-1686584977328]: 
          beanData: '{"ionBean":"Card"}'
          tagName: ion-card
          ↓CardContent [ngx.components.UIDynamicElement-1686584977331]: 
            beanData: '{"ionBean":"CardContent"}'
            tagName: ion-card-content
            ↓TextItem [ngx.components.UIDynamicElement-1686584977334]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓some_text [ngx.components.UIText-1686584977337]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:chatgpt_lim_3
  ↓DivContainer [ngx.components.UIDynamicElement-1686649828024]: 
    beanData: '{"ionBean":"DivTag"}'
    tagName: div
    ↓DivContent [ngx.components.UIDynamicElement-1686647774602]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓Style [ngx.components.UIStyle-1686647774605]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '	display: flex;
                  	flex-wrap: wrap;
                	max-width:964px;
                '
      ↓DivHeaderExamples [ngx.components.UIDynamicElement-1686648010326]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Div [ngx.components.UIDynamicElement-1686648010329]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1686648010332]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:sunny-outline"}'
            tagName: ion-icon
        ↓Paragraph [ngx.components.UIDynamicElement-1686648010335]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓some_text [ngx.components.UIText-1686648010338]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Examples
        ↓Style [ngx.components.UIStyle-1686648010341]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '	display: flex;
                  	flex-direction: column;
                  	justify-content: center;
                  	align-items: center;
                  '
        ↓attr [ngx.components.UIAttribute-1686648766123]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓DivHeaderCapabilities [ngx.components.UIDynamicElement-1686648032585]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Div [ngx.components.UIDynamicElement-1686648032588]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1686648032591]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:flash-outline"}'
            tagName: ion-icon
        ↓Paragraph [ngx.components.UIDynamicElement-1686648032594]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓some_text [ngx.components.UIText-1686648032597]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Capabilities
        ↓Style [ngx.components.UIStyle-1686648032600]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '	display: flex;
                  	flex-direction: column;
                  	justify-content: center;
                  	align-items: center;
                  '
        ↓attr [ngx.components.UIAttribute-1686648797847]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓DivHeaderLimitations [ngx.components.UIDynamicElement-1686648056727]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Div [ngx.components.UIDynamicElement-1686648056730]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1686648056733]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:warning-outline"}'
            tagName: ion-icon
        ↓Paragraph [ngx.components.UIDynamicElement-1686648056736]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓some_text [ngx.components.UIText-1686648056739]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Limitations
        ↓Style [ngx.components.UIStyle-1686648056742]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '	display: flex;
                  	flex-direction: column;
                  	justify-content: center;
                  	align-items: center;
                  '
        ↓attr [ngx.components.UIAttribute-1686648809398]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓CardContainerExample1 [ngx.components.UIDynamicElement-1686648353853]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686648353856]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686648353859]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686648353862]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:prompt_example_1
        ↓attr [ngx.components.UIAttribute-1686648818027]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
        ↓Style [ngx.components.UIStyle-1686661765057]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the card
                  //--color	//Color of the card
                  	cursor: pointer;
                  '
        ↓attr1 [ngx.components.UIControlEvent-1686662327717]: 
          ↓affectVal [ngx.components.UICustomAsyncAction-1686662341317]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		try {
                    			let tr = page.translate.instant(vars.text);
                    			tr = tr.substring(1, tr.length -1);
                    			page.local.inputModel = tr;
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    
            ↓text [ngx.components.UIControlVariable-1686662402105]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:prompt_example_1
      ↓CardContainerCapabilities1 [ngx.components.UIDynamicElement-1686648872663]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686648872666]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686648872669]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686648872672]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:chatgpt_cap_3
        ↓attr [ngx.components.UIAttribute-1686649005221]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓CardContainerLimitations1 [ngx.components.UIDynamicElement-1686648888506]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686648888509]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686648888512]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686648888515]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:chatgpt_lim_1
        ↓attr [ngx.components.UIAttribute-1686649007539]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓CardContainerExample2 [ngx.components.UIDynamicElement-1686648964457]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686648964460]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686648964463]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686648964466]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:prompt_example_2
        ↓attr [ngx.components.UIAttribute-1686649009461]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
        ↓Style [ngx.components.UIStyle-1686662313226]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the card
                  //--color	//Color of the card
                  	cursor: pointer;
                  '
        ↓attr1 [ngx.components.UIControlEvent-1686662448849]: 
          ↓affectVal [ngx.components.UICustomAsyncAction-1686662448852]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		try {
                    			let tr = page.translate.instant(vars.text);
                    			tr = tr.substring(1, tr.length -1);
                    			page.local.inputModel = tr;
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    
            ↓text [ngx.components.UIControlVariable-1686662448855]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:prompt_example_2
      ↓CardContainerCapabilities2 [ngx.components.UIDynamicElement-1686648979093]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686648979096]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686648979099]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686648979102]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:chatgpt_cap_1
        ↓attr [ngx.components.UIAttribute-1686649011853]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓CardContainerLimitations2 [ngx.components.UIDynamicElement-1686648991890]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686648991893]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686648991896]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686648991899]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:chatgpt_lim_2
        ↓attr [ngx.components.UIAttribute-1686649014027]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓CardContainerExample3 [ngx.components.UIDynamicElement-1686649326993]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686649326996]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686649326999]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686649327002]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:prompt_example_3
        ↓attr [ngx.components.UIAttribute-1686649327005]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
        ↓Style [ngx.components.UIStyle-1686662315614]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the card
                  //--color	//Color of the card
                  	cursor: pointer;
                  '
        ↓attr1 [ngx.components.UIControlEvent-1686662455508]: 
          ↓affectVal [ngx.components.UICustomAsyncAction-1686662455511]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		try {
                    			let tr = page.translate.instant(vars.text);
                    			tr = tr.substring(1, tr.length -1);
                    			page.local.inputModel = tr;
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    
            ↓text [ngx.components.UIControlVariable-1686662455514]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:prompt_example_3
      ↓CardContainerCapabilities3 [ngx.components.UIDynamicElement-1686649341198]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686649341201]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686649341204]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686649341207]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:chatgpt_cap_2
        ↓attr [ngx.components.UIAttribute-1686649361445]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
      ↓CardContainerLimitations3 [ngx.components.UIDynamicElement-1686649351835]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardContent [ngx.components.UIDynamicElement-1686649351838]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓TextItem [ngx.components.UIDynamicElement-1686649351841]: 
            beanData: '{"ionBean":"TextItem"}'
            tagName: ion-text
            ↓some_text [ngx.components.UIText-1686649351844]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:chatgpt_lim_3
        ↓attr [ngx.components.UIAttribute-1686649363377]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:child-flex-ai
    ↓Style [ngx.components.UIStyle-1686649911859]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '	display: flex;
              	align-items: center;
              	justify-content: space-between;
              	flex-direction: column;
              	height: 100%;
              '
    ↓Div [ngx.components.UIDynamicElement-1686661570620]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓DivPrompt [ngx.components.UIDynamicElement-1686651876535]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓TextArea [ngx.components.UIDynamicElement-1686651891535]: 
          beanData: |
            '{
             "ionBean": "TextArea",
             "ControlName": "plain:name1686651891535",
             "Debounce": "plain:0",
             "Placeholder": "script:translate.instant(''send_a_msg'')"
            }'
          tagName: ion-textarea
          ↓Style [ngx.components.UIStyle-1686652082387]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the textarea
                    //--border-radius	//Border radius of the textarea
                    //--color	//Color of the text
                    //--padding-bottom	//Bottom padding of the textarea
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea
                    //--padding-top	//Top padding of the textarea
                    //--placeholder-color	//Color of the placeholder text
                    //--placeholder-font-style	//Style of the placeholder text
                    //--placeholder-font-weight	//Weight of the placeholder text
                    //--placeholder-opacity	//Opacity of the placeholder text
                    
                    	
                    '
          ↓attr [ngx.components.UIAttribute-1686662515700]: 
            attrName: '[(ngModel)]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.inputModel
        ↓Style [ngx.components.UIStyle-1686652160468]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '	flex: 1 0 95%; /* explanation below */
                  	margin: 5px;
                  	border: 1px solid #737373;
                      border-radius: 4px;
                      display: flex;
                  '
        ↓Button1 [ngx.components.UIDynamicElement-1686838721453]: 
          beanData: |
            '{
             "ionBean": "Button",
             "IonColor": "script:!this.local.isRecording ? ''primary'': ''danger''",
             "IconSlot": "plain:icon-only"
            }'
          tagName: ion-button
          ↓attr [ngx.components.UIControlEvent-1686838721456]: 
            ↓activateSpeech [ngx.components.UICustomAsyncAction-1686838721459]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		try {
                      			if (!this.local.isRecording) {
                      			this.local.speechReco.start();
                      		} else {
                      			this.local.speechReco.stop();
                      		}
                      		this.local.isRecording = !this.local.isRecording;
                      		    
                      		} catch (e) {
                      		
                      		} finally {
                      			return;
                      		}
                      
              page_ts_imports: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                      - com.twinsoft.convertigo.beans.common.XMLVector: 
                        - java.lang.String: 
                          - ↑value: LoadingController
                        - java.lang.String: 
                          - ↑value: '@ionic/angular'
          ↓Style [ngx.components.UIStyle-1686838721468]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the button
                    //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the button when pressed
                    //--background-focused	//Background of the button when focused with the tab key
                    //--background-focused-opacity	//Opacity of the button when focused with the tab key
                    //--background-hover	//Background of the button on hover
                    //--background-hover-opacity	//Opacity of the background on hover
                    //--border-color	//Border color of the button
                    //--border-radius	//Border radius of the button
                    //--border-style	//Border style of the button
                    //--border-width	//Border width of the button
                    //--box-shadow	//Box shadow of the button
                    //--color	//Text color of the button
                    //--color-activated	//Text color of the button when pressed
                    //--color-focused	//Text color of the button when focused with the tab key
                    //--color-hover	//Text color of the button when hover
                    //--opacity	//Opacity of the button
                    //--padding-bottom	//Bottom padding of the button
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                    //--padding-top	//Top padding of the button
                    //--ripple-color	//Color of the button ripple effect
                    //--transition	//Transition of the button
                    align-self: end;
                    '
          ↓Icon [ngx.components.UIDynamicElement-1686838721471]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IconName": "plain:mic-outline",
               "IconIosName": "plain",
               "IconSlot": "plain:icon-only"
              }'
            tagName: ion-icon
          ↓attr1 [ngx.components.UIAttribute-1686839045314]: 
            attrName: '*ngIf'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:this.local.speechReco != undefined
        ↓Button [ngx.components.UIDynamicElement-1686652461200]: 
          beanData: '{"ionBean":"Button","IconSlot":"plain:icon-only"}'
          tagName: ion-button
          ↓attr [ngx.components.UIControlEvent-1686652461199]: 
            ↓showLoading [ngx.components.UICustomAsyncAction-1686662802094]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '		try {
                      			if (this.local.isRecording) {
                      				this.local.speechReco.stop();
                      				this.local.isRecording = false;
                      			}
                      			let timeout = (ms)=> {
                      			    return new Promise(resolve => setTimeout(resolve, ms));
                      			}
                      			let arrayTranslate = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(value => ({ value, sort: Math.random() }))
                      															    .sort((a, b) => a.sort - b.sort)
                      															    .map(({ value }) => value);
                      			this.global.generating = true;
                      			let loadingCtrl = page.getInstance(LoadingController);
                      			this.local.loading = await this.loadingCtrl.create({
                      		      message: page.translate.instant("chatgpt_loading_ai" + (arrayTranslate.shift() ?? 2)),
                      		      spinner: ''bubbles''
                      		    });
                      		    this.local.loading.present();
                      		    let loadingF = async ()=>{
                      				while(this.global.generating){
                      					await timeout(9000);
                      					this.local.loading.message = page.translate.instant("chatgpt_loading_ai" + (arrayTranslate.shift() ?? 2));
                      					this.local.loading.spinner = "bubbles";
                      				}
                      			}
                      			loadingF();
                      		    
                      		} catch (e) {
                      		
                      		} finally {
                      			return;
                      		}
                      '
              page_ts_imports: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                      - com.twinsoft.convertigo.beans.common.XMLVector: 
                        - java.lang.String: 
                          - ↑value: LoadingController
                        - java.lang.String: 
                          - ↑value: '@ionic/angular'
              ↓callSequence [ngx.components.UICustomAsyncAction-1686671476838]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		try {
                        			let res = await page.c8o.callJsonObject("lib_C8Oforms_AI.GenerateJsonForm",{
                        				prompt:this.local.inputModel,
                        				mode: "chat"
                        			}).async();
                        			if(res.response?.error){
                        				throw res.response?.error;
                        			}
                        			else{
                        				this.global.generating = false;
                        				this.local.loading.dismiss();
                        				return res.response;
                        			}
                        		} catch (e) {
                        			console.error("lib_C8Oforms_AI.GenerateJsonForm error", e);
                        			console.warn("lib_C8Oforms_AI.GenerateJsonForm an error occured on first attempt. We will retry.")
                        			try {
                        				let res = await page.c8o.callJsonObject("lib_C8Oforms_AI.GenerateJsonForm",{
                        					prompt:this.local.inputModel,
                        					mode: "chat"
                        				}).async();
                        				if(res.response?.error){
                        					throw res.response?.error;
                        				}
                        				else{
                        					this.global.generating = false;
                        					this.local.loading.dismiss();
                        					return res.response;
                        				}
                        			} catch (e) {
                        				this.global.generating = false;
                        				this.local.loading.dismiss();
                        				console.error("lib_C8Oforms_AI.GenerateJsonForm error", e);
                        				console.warn("lib_C8Oforms_AI.GenerateJsonForm an error occured on second attempt. we wont retry");
                        				return e;
                        			}
                        		}
                        '
                ↓If [ngx.components.UIDynamicAction-1686841765346]: 
                  beanData: '{"ionBean":"IfAction","condition":"script:parent.out.error"}'
                  tagName: If
                  ↓Toast [ngx.components.UIDynamicAction-1686841678720]: 
                    beanData: |
                      '{
                       "ionBean": "ToastAction",
                       "message": "plain:An error occured, retry later",
                       "position": "plain:middle",
                       "cssClass": "plain:toastError"
                      }'
                    tagName: Toast
                ↓CloseModal [ngx.components.UIDynamicAction-1686665176617]: 
                  beanData: '{"ionBean":"CloseModalAction","data":"script:parent.out"}'
                  tagName: CloseModal
          ↓Style [ngx.components.UIStyle-1686652761734]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the button
                    //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the button when pressed
                    //--background-focused	//Background of the button when focused with the tab key
                    //--background-focused-opacity	//Opacity of the button when focused with the tab key
                    //--background-hover	//Background of the button on hover
                    //--background-hover-opacity	//Opacity of the background on hover
                    //--border-color	//Border color of the button
                    //--border-radius	//Border radius of the button
                    //--border-style	//Border style of the button
                    //--border-width	//Border width of the button
                    //--box-shadow	//Box shadow of the button
                    //--color	//Text color of the button
                    //--color-activated	//Text color of the button when pressed
                    //--color-focused	//Text color of the button when focused with the tab key
                    //--color-hover	//Text color of the button when hover
                    //--opacity	//Opacity of the button
                    //--padding-bottom	//Bottom padding of the button
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                    //--padding-top	//Top padding of the button
                    //--ripple-color	//Color of the button ripple effect
                    //--transition	//Transition of the button
                    align-self: end;
                    '
          ↓Icon [ngx.components.UIDynamicElement-1686652778697]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IconName": "plain:send-outline",
               "IconIosName": "plain",
               "IconSlot": "plain:icon-only"
              }'
            tagName: ion-icon
          ↓attr1 [ngx.components.UIAttribute-1686844024474]: 
            attrName: '[attr.disabled]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.purchase
      ↓Style [ngx.components.UIStyle-1686661589826]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                'display: flex;
                  	flex-wrap: wrap;
                	max-width:964px;
                	width:100%;
                '
↓PageEvent [ngx.components.UIPageEvent-1686840972550]: 
  viewEvent: onWillLeave
  ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1686840987830]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		try {
            			if (this.local.isRecording) {
            				this.local.speechReco.stop();
            				this.local.isRecording = false;
            			}
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            