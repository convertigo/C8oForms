scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		this.local.gridAndCheckboxStyleOnScroll =[];
        		this.local.value = {};
        		let item = this.navParams.data.item;
        		if(item["type"] == "checkbox_group"){
        		    this.local.value[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                    
                    for(let line of item.lines){
                        this.local.value[item["name"]].children[line.title] = [];
                        for(let child in item["children"]){
                            let selected;
                            try {
                                selected =  item["children"][child].selected;
                            }
                            catch(e){   
                            }   
                            this.local.value[item["name"]].children[line.title].push({"value": item["children"][child].value, "selected": selected});
                        }
                    }
                }
        		/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	/**
        	 * returns type of field (simple, multiple, file, or camSign)
        	 * @param type
        	 */
        	public getType(type: string): string{
        	    if(this.local.multipleField[type] == true){
        	        return "multiple";
        	    }
        	    else if(this.local.simpleField[type] == true){
        	        return "simple";
        	    }
        	    else if(this.local.fileField[type] == true){
        	        return "file";
        	    }
                else if(this.local.camSignField[type] == true){
                    return "camSign"; 
                }
                else{
                    return "";
                }
        	    
        	}
        	public getGoToPageType(type: string): string{
                if(this.local.multipleFieldGoToPage[type] == true){
                    return "multiple";
                }
                else if(this.local.simpleFieldGoToPage[type] == true){
                    return "simple";
                }
                else if(this.local.fileFieldGoToPage[type] == true){
                    return "file";
                }
                else if(this.local.camSignFieldGoToPage[type] == true){
                    return "camSign"; 
                }
                else{
                    return "";
                }
                
            }
        	/**
        	 * convert a string to an array
        	 * @param e
        	 */
        	public strToArr(e){
        	    if(typeof(e)== "string"){
        	        return [e];
        	    }
        	    else{
        	       return e; 
        	    }
        	}
        	
        	/**
        	 * 
        	 * @param name
        	 */
        	public getItemNameById(field: any){
        	    if(field.source == true){
        	        for(let key of Object.keys(this.navParams.data.form.formulaire)){
        	            if(this.navParams.data.form.formulaire[key].id == field.str){
        	                //console.log(this.navParams.data.form.formulaire[key]);
        	                return this.navParams.data.form.formulaire[key].name;
        	            }
        	            else if(this.navParams.data.form.formulaire[key].type == "ion-card"){
        	                for(let keyChild of Object.keys(this.navParams.data.form.formulaire[key]["children"])){
        	                    if(this.navParams.data.form.formulaire[key]["children"][keyChild].id == field.str){
        	                        return this.navParams.data.form.formulaire[key]["children"][keyChild].name;
        	                    }
        	                }
        	            }
        	        }
        	    }
        	    else{
        	        return field.str;
        	    }
        	    
                return "";
        	}
        	
        	public getItemNameByIdStr(str: any){
        	    for(let key of Object.keys(this.navParams.data.form.formulaire)){
                        if(this.navParams.data.form.formulaire[key].id == str){
                            return this.navParams.data.form.formulaire[key].name;
                        }
                        else if(this.navParams.data.form.formulaire[key].type == "ion-card"){
                            for(let keyChild of Object.keys(this.navParams.data.form.formulaire[key]["children"])){
                                if(this.navParams.data.form.formulaire[key]["children"][keyChild].id == str){
                                    return this.navParams.data.form.formulaire[key]["children"][keyChild].name;
                                }
                            }
                        }
                    }
                
                
                return "";
            }
        	
        	public getPageNameByTech(str){
        	    for(let page of this.navParams.data.form.pages){
        	        if(page.pageTechName == str){
        	            return page.name;
        	        }
        	    }
        	}
        	/*End_c8o_PageFunction*/
        '
segment: path-to-previewmultiple
title: Title for ConditionalPage1
↓Content [ngx.components.UIDynamicElement-1596119915543]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓Grid [ngx.components.UIDynamicElement-1596119915546]: 
    beanData: '{"ionBean":"Grid","Height":"plain:100%"}'
    tagName: ion-grid
    ↓GridRowVisible [ngx.components.UIDynamicElement-1596119915549]: 
      beanData: '{"ionBean":"GridRow"}'
      tagName: ion-row
      ↓GridColVisible [ngx.components.UIDynamicElement-1596119915552]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Directive [ngx.components.UIControlDirective-1596119961091]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.navParams.data?.current?.val1?.type == 'checkbox_group'
          ↓UseSharedComponent [ngx.components.UIUseShared-1596120034025]: 
            sharedcomponent: C8Oforms.MobileApplication.Application.itemCheckboxGroupViewer
            ↓item [ngx.components.UIUseVariable-1596120052864]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.navParams.data.item
            ↓model [ngx.components.UIUseVariable-1596120052866]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.value[this.navParams.data.item.name]
            ↓redList [ngx.components.UIUseVariable-1596120052868]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:null
            ↓disabled [ngx.components.UIUseVariable-1596120052870]: 
              comment: this.formsSubmit[item['name']]
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:false
↓Footer [ngx.components.UIDynamicElement-1596119915924]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓ButtonSet [ngx.components.UIDynamicElement-1596119915927]: 
    beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
    tagName: ion-buttons
    ↓Button1 [ngx.components.UIDynamicElement-1596119915930]: 
      beanData: '{"ionBean":"Button"}'
      tagName: ion-button
      ↓Text [ngx.components.UIText-1596119915933]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'Cancel' | translate
      ↓Attr [ngx.components.UIAttribute-1596119915936]: 
        attrName: 
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:item-left
      ↓Event [ngx.components.UIControlEvent-1596119915939]: 
        ↓CloseModal [ngx.components.UIDynamicAction-1596119915942]: 
          beanData: '{"ionBean":"CloseModalAction"}'
    ↓Button [ngx.components.UIDynamicElement-1596119915945]: 
      beanData: '{"ionBean":"Button"}'
      tagName: ion-button
      ↓Text [ngx.components.UIText-1596119915948]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'Save' | translate
      ↓Attr [ngx.components.UIAttribute-1596119915951]: 
        attrName: 
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:item-right
      ↓Event [ngx.components.UIControlEvent-1596119915954]: 
        ↓PublishEvent [ngx.components.UIDynamicAction-1596119915957]: 
          beanData: |
            '{
             "ionBean": "PublishEventAction",
             "topic": "plain:saveFormForce",
             "data": "plain"
            }'
          isEnabled: false
        ↓CustomAction [ngx.components.UICustomAction-1596119915960]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  		console.log(page);
                  
          ↓ClosePopover [ngx.components.UIDynamicAction-1596119915963]: 
            beanData: '{"ionBean":"ClosePopoverAction"}'
          ↓values [ngx.components.UIControlVariable-1596119915966]: 
    ↓Style [ngx.components.UIStyle-1596119915969]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'padding-bottom: 1vh;
              padding-right: 1vh;
              '
↓PageEvent [ngx.components.UIPageEvent-1596119915972]: 
  ↓CustomAction [ngx.components.UICustomAction-1596119915975]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		    this.local.gridAndCheckboxStyleOnScroll =[];
            		console.log(page);
            		console.log(props);
            		 resolve();
            		    
            