inAutoMenu: false
isEnabled: false
segment: s/:u
title: share
↓PageEvent1 [ngx.components.UIEventSubscriber-1645090139927]: 
  comment: Old implementation of onCanEnter. Prefer using AppGuard now.
  topic: CanEnter
  ↓CheckUser [ngx.components.UICustomAction-1576167355909]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		   
            			var ua = window.navigator.userAgent;
            			var isIE = /MSIE|Trident/.test(ua);
            			if(isIE){
            				resolve(false);
                            setTimeout(()=>{
                                page.routerProvider.setRoot("loginPage", {page:''editorPage'', formId:page.local.formId}, null); 
                            }, 200);
                            return;
            			}
            		    const request = window["indexedDB"]["open"]("MyTestDatabase", 3);
                        request.onerror = (event)=> {
                            resolve(false);
                            setTimeout(()=>{
                                page.routerProvider.setRoot("loginPage", {page:''editorPage'', formId:page.local.formId}, null); 
                            }, 200);
                            return;
                          };
                          request.onsuccess = (event)=> {
                              page.local.userId= this.navParams.get(''u'');
                             /* let prefix: string = window.location.href.substring(0, window.location.href.indexOf("#/"));
                              window.location.href = prefix+ "#/viewer/:formId/:edit/"+page.local.userId;*/
                              
                              resolve(true);
                          };
            		    // Getting user status (whenever he is logged or not)
            		   /* page.c8o.httpInterface.getUserServiceStatus()
            		    .then((res)=>{
            		        if(res.authenticated){
            		            page.local.user = res.user;
            		            resolve(true);
            		        }
            		        else{
            		            setTimeout(()=>{
            		                page.routerProvider.setRoot("loginPage", {page:''editorPage'', formId:page.local.formId}, null); 
            		            }, 200);
            		            resolve(false);
            		        }
            		    })
            		    .catch((err)=>{
            		        setTimeout(()=>{
            		            page.routerProvider.setRoot("loginPage", {page:''editorPage'', formId:page.local.formId}, null); 
            		        }, 200);
            		        resolve(false);
            		    })
            		   /* this.local.debug = {};
                        let formId = this.navParams.get(''formId'');
                        if(formId != undefined){
                            this.local.formId = formId;
                            resolve(true);
                        }
                        else{
                            resolve(true);
                        }*/
                       
                        
            		/*
            		if(this.global.user == '''' || this.global.user == undefined){
            		    window.location.href = ''./'';
            		    resolve(false);
            		}
            		else{
            		    resolve(true);
            		}*/
            '
    page_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: C8oSessionStatus
              - java.lang.String: 
                - ↑value: c8osdkangular
↓Grid1Spinner [ngx.components.UIDynamicElement-1576241903861]: 
  beanData: '{"ionBean":"Grid"}'
  tagName: ion-grid
  ↓GridRow [ngx.components.UIDynamicElement-1576241903864]: 
    beanData: |
      '{
       "ionBean": "GridRow",
       "FlexJustifyContent": "plain:ion-justify-content-center",
       "FlexAlignement": "plain:ion-align-items-center"
      }'
    tagName: ion-row
    ↓GridCol [ngx.components.UIDynamicElement-1576241903867]: 
      beanData: |
        '{
         "ionBean": "GridCol",
         "FlexAlignement": "plain:ion-align-self-center",
         "Size": "plain:12"
        }'
      tagName: ion-col
      ↓Div [ngx.components.UIDynamicElement-1576241903870]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓FragmentSpinner [ngx.components.UICustom-1576241903873]: 
          htmlTemplate: <div  class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
        ↓Style [ngx.components.UIStyle-1576241903876]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  text-align:center;
                  
  ↓Attr [ngx.components.UIAttribute-1576241903879]: 
    attrName: '*ngIf'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:this.local.spinner == true
    isEnabled: false
  ↓Style [ngx.components.UIStyle-1576241903882]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            height:100%;
            
↓PageEvent [ngx.components.UIPageEvent-1576512966157]: 
  viewEvent: onWillEnter
  ↓CustomAction [ngx.components.UICustomAction-1576512980443]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		    page.routerProvider.setRoot("viewerPage", {i:page.local.userId}, null); 
            		    /*let prefix: string = window.location.href.substring(0, window.location.href.indexOf("#/"));
            		    window.location.href = prefix+ "#/viewer/" + ":id/:edit/"+page.local.userId;
            		    /*page.c8o.callJson(".Logout", "__disableAutologin", true)
                        .then((res)=>{
                            console.log("logout ok", res);
                            return page.c8o.callJson(".Login", "email", page.local.userId, "password", page.local.userId)
                        })
                        .then((res)=>{
                          return page.c8o.callJson("fs://c8oforms_fs.sync"
                              );
                        })
                        .then((res)=>{
                          return page.c8o.callJson("fs://c8oforms_fs.view",
                                  "ddoc", "published_forms_anonymous",
                                  "view", "all"
                              );
                        })
                        .then((res)=>{
                            if(res.rows[0] != undefined){
                                let prefix: string = window.location.href.substring(0, window.location.href.indexOf("#/"));
                                window.location.href = prefix+ "#/viewer/" + res.rows[0].id+"/:edit/"+page.local.userId;
                                resolve(true);
                            }
                            else{
                                window.location.href = ''./'';
                                resolve(false);
                            }
                            return null;
                        })
                        .fail((e)=>{
                            console.log(e);
                            window.location.href = ''./'';
                            resolve(false);
                        });*/
            		resolve();
            '