segment: l/:d/:e
title: Title for linkPage
↓Grid1Spinner [ngx.components.UIDynamicElement-1581417389419]: 
  beanData: '{"ionBean":"Grid","Height":"plain:100%"}'
  tagName: ion-grid
  ↓GridRow [ngx.components.UIDynamicElement-1581417389422]: 
    beanData: |
      '{
       "ionBean": "GridRow",
       "FlexJustifyContent": "plain:ion-justify-content-center",
       "FlexAlignement": "plain:ion-align-items-center"
      }'
    tagName: ion-row
    ↓GridCol [ngx.components.UIDynamicElement-1581417389425]: 
      beanData: |
        '{
         "ionBean": "GridCol",
         "FlexAlignement": "plain:ion-align-self-center",
         "Size": "plain:12"
        }'
      tagName: ion-col
      ↓Div [ngx.components.UIDynamicElement-1581417389428]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓FragmentSpinner [ngx.components.UICustom-1581417389431]: 
          htmlTemplate: <div  class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
        ↓Style [ngx.components.UIStyle-1581417389434]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  text-align:center;
                  
  ↓Attr [ngx.components.UIAttribute-1581417389437]: 
    attrName: '*ngIf'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:this.local.spinner == true
  ↓Style [ngx.components.UIStyle-1581417389440]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            height:100%;
            
↓PageEvent1 [ngx.components.UIEventSubscriber-1645090139953]: 
  comment: Old implementation of onCanEnter. Prefer using AppGuard now.
  topic: CanEnter
  ↓CheckUser [ngx.components.UICustomAction-1581417402947]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		this.local.spinner = true;
            			var ua = window.navigator.userAgent;
            			var isIE = /MSIE|Trident/.test(ua);
            			if(isIE){
            				resolve(false);
                            setTimeout(()=>{
                                page.routerProvider.setRoot("loginPage", {page:'editorPage', formId:page.local.formId}, null); 
                            }, 200);
                            return;
            			}
            		    const request = window["indexedDB"]["open"]("MyTestDatabase", 3);
                        request.onerror = (event)=> {
                            resolve(false);
                            setTimeout(()=>{
                                page.routerProvider.setRoot("loginPage", {page:'editorPage', formId:page.local.formId}, null); 
                            }, 200);
                            return;
                          };
                          request.onsuccess = (event)=> {
                              page.c8o.httpInterface.getUserServiceStatus()
                              .then((res)=>{
                                  if(res.authenticated){
                                      page.local.user = res.user;
                                      page.local.data = page.navParams.get("d");
                                      page.local.data2 = page.navParams.get("e");
                                      
                                      window.location.href = page.c8o.endpoint + "/.bin?__sequence=downloadFile&filename=" + encodeURIComponent(page.navParams.get("e")) + "&documentName=" + encodeURIComponent(page.navParams.get("d"));
            	                      setTimeout(()=>{
            							this.local.spinner = false; 
            						  })
            						   
            						  resolve(true);
                                  }
                                  else{
                                      setTimeout(()=>{
                                          page.routerProvider.setRoot("loginPage", {page:'linkPage', d:page.navParams.get("d"), e:page.navParams.get("e")}, null); 
                                      }, 200);
                                      resolve(false);
                                  }
                              })
                              .catch((err)=>{
                                  setTimeout(()=>{
                                      page.routerProvider.setRoot("loginPage", {page:'linkPage', d:page.navParams.get("d"), e:page.navParams.get("e")}, null); 
                                   }, 200);
                                  resolve(false);
                              })
                              
                              resolve(true);
                          };
            		    // Getting user status (whenever he is logged or not)
            		   
            		   /* this.local.debug = {};
                        let formId = this.navParams.get('formId');
                        if(formId != undefined){
                            this.local.formId = formId;
                            resolve(true);
                        }
                        else{
                            resolve(true);
                        }*/
                       
                        
            		/*
            		if(this.global.user == '' || this.global.user == undefined){
            		    window.location.href = './';
            		    resolve(false);
            		}
            		else{
            		    resolve(true);
            		}*/
            