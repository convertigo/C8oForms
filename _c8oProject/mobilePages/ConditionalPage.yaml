scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		this.local.visible = [];
        		this.local.multipleField = {radio_group: true, checkbox_group: true, checkbox: true, location: true};
                this.local.simpleField = {date: true, select: true, datetime: true, time: true, radio: true, text: true, barcode: true, slider: true, business_logic: true, grid: true};
                this.local.fileField = {file: true};
                this.local.camSignField = {img: true, signature:true};
        
        
                this.local.multipleFieldGoToPage = {radio_group: true, checkbox_group: true, checkbox: true, select: true, radio: true, };
                this.local.simpleFieldGoToPage = {date: true, datetime: true, time: true, text: true, barcode: true, slider: true, grid: true, business_logic: true};
                this.local.fileFieldGoToPage = {file: true};
                this.local.camSignFieldGoToPage = {img: true, signature:true};
                
                this.local.showVisible = false;
        		this.local.condVisible = "and";
        		this.local.showGoToPage = false;
        		/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	public countFilled(){
        		let cpt = 0;
        		this.local.visible.forEach((x)=>{
        			this.isTotalyFilled(x) == true ? cpt ++ : null;
        		})
        		this.local.cptTotalyFilled = cpt;
        	}
        	
        	
        	/**
        	 * returns type of field (simple, multiple, file, or camSign)
        	 * @param type
        	 */
        	public getType(type: string): string{
        	    if(this.local.multipleField[type] == true){
        	        return "multiple";
        	    }
        	    else if(this.local.simpleField[type] == true){
        	        return "simple";
        	    }
        	    else if(this.local.fileField[type] == true){
        	        return "file";
        	    }
                else if(this.local.camSignField[type] == true){
                    return "camSign"; 
                }
                else{
                    return "";
                }
        	    
        	}
        	public getGoToPageType(type: string): string{
                if(this.local.multipleFieldGoToPage[type] == true){
                    return "multiple";
                }
                else if(this.local.simpleFieldGoToPage[type] == true){
                    return "simple";
                }
                else if(this.local.fileFieldGoToPage[type] == true){
                    return "file";
                }
                else if(this.local.camSignFieldGoToPage[type] == true){
                    return "camSign"; 
                }
                else{
                    return "";
                }
                
            }
        	/**
        	 * convert a string to an array
        	 * @param e
        	 */
        	public strToArr(e){
        	    if(typeof(e)== "string"){
        	        return [e];
        	    }
        	    else{
        	       return e; 
        	    }
        	}
        	
        	public getItemNameById(val: any | number): string{
        		var searchArray = this.navParams.data.form.formulaire.concat(this.navParams.data.form.actions);
        		if(typeof val == "string"){
        			val = +val;
        		}
        		// case arg is an id
                if(typeof(val) == ''number''){
                    for(let elem of searchArray){
                        if(elem.id == val){
                            return elem.name;
                        }
                        else if(elem.type == "ion-card"){
                            for(let child of elem["children"]){
                                if(child.id == val){
                                    return child.name;
                                }
                            }
                        }
                    }
                }
        		//case arg is an valFIeldObject 
                else{
        			// from source
        			if(val.source == true){
        				for(let elem of searchArray){
        	                if(elem.id == val.str){
        	                    return elem.name;
        	                }
        	                else if(elem.type == "ion-card"){
        	                    for(let child of elem["children"]){
        	                        if(child.id == val.str){
        	                            return child.name;
        	                        }
        	                    }
        	                }
        	            }
        			}
        			// from string
        			else{
        	       		return val.str;
        	    	}
                }
        		return "";
            }
        	
        	/**
        	 * 
        	 * @param name
        	 */
        	public getItemNameByIdOriginal(field: any){
        	    if(field.source == true){
        	        for(let key of Object.keys(this.navParams.data.form.formulaire)){
        	            if(this.navParams.data.form.formulaire[key].id == field.str){
        	                //console.log(this.navParams.data.form.formulaire[key]);
        	                return this.navParams.data.form.formulaire[key].name;
        	            }
        	            else if(this.navParams.data.form.formulaire[key].type == "ion-card"){
        	                for(let keyChild of Object.keys(this.navParams.data.form.formulaire[key]["children"])){
        	                    if(this.navParams.data.form.formulaire[key]["children"][keyChild].id == field.str){
        	                        return this.navParams.data.form.formulaire[key]["children"][keyChild].name;
        	                    }
        	                }
        	            }
        	        }
        	    }
        	    else{
        	        return field.str;
        	    }
        	    
                return "";
        	}
        	
        	
        	
        	public getItemNameByIdStr(str: any){
        	    for(let key of Object.keys(this.navParams.data.form.formulaire)){
                        if(this.navParams.data.form.formulaire[key].id == str){
                            return this.navParams.data.form.formulaire[key].name;
                        }
                        else if(this.navParams.data.form.formulaire[key].type == "ion-card"){
                            for(let keyChild of Object.keys(this.navParams.data.form.formulaire[key]["children"])){
                                if(this.navParams.data.form.formulaire[key]["children"][keyChild].id == str){
                                    return this.navParams.data.form.formulaire[key]["children"][keyChild].name;
                                }
                            }
                        }
                    }
                
                
                return "";
            }
        	
        	public getPageNameByTech(str){
        	    for(let page of this.navParams.data.form.pages){
        	        if(page.pageTechName == str){
        	            return page.name;
        	        }
        	    }
        	}
        	
        	isTotalyFilled(cond){
        	    try{
        	        if(cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && (cond.val1.str != "" || (cond.val1.arr != undefined && cond.val1.arr.length > 0)) && cond.val2 != undefined && (cond.val2.str != "" || (cond.val2.arr != undefined && cond.val2.arr.length > 0)) && cond.operator != undefined && cond.operator != ""){
        			    return true;  
        			  } 
        			  else if(cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && (cond.val1.str != "" || (cond.val1.arr != undefined && cond.val1.arr.length > 0)) && cond.operator != undefined && cond.operator != "" && (cond.operator == "is_filled" || cond.operator == "is_empty")){
        			     return true; 
        			  }
        			  else if(cond.val1 != undefined && (cond.val1.str != "" || (cond.val1.arr != undefined && cond.val1.arr.length > 0)) && cond.val2 != undefined && (cond.val2.str != "" || (cond.val2.arr != undefined && cond.val2.arr.length > 0)) && cond.operator != undefined && cond.operator != "" && cond.type == "goToPageIf"){
        			      return true;
        			  }
        			  else if((cond.val1 != undefined && (cond.val1.str != "" || (cond.val1.arr != undefined && cond.val1.arr.length > 0)) && cond.operator != undefined && cond.operator != "" && (cond.operator == "is_filled" || cond.operator == "is_empty"))){
        			      return true;
        			  }
        			  else if(cond.subject != undefined && cond.subject == "form" && cond.attribute != undefined && cond.attribute != "" && cond.operator != undefined && cond.operator != ""){
        			      return true;
        			  }
        			  else if(cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && cond.val1.str != undefined && cond.operator != "" && cond.val1.type == "file"){
        			      return true;
        			  }
        			  else if(cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && cond.val1.str != undefined && cond.operator != "" && (cond.val1.type == "signature" || cond.val1.type == "img")){
        			      return true;
        			  }
        			  else if(cond.subject == "never_visible"){
        				return true;
        			}
                      else{
                          return false;
                      }
        	    }
        	    catch(e){
        	        return false;
        	    }
        	}
        	
        	public lengthOk(obj: any){
                try{
                    return Object.keys(obj).length > 0;
                }
                catch(e){
                    return false;
                }
               
            }
        	/*End_c8o_PageFunction*/
        '
segment: path-to-conditionalpage
title: Title for ConditionalPage
↓Content [ngx.components.UIDynamicElement-1594972595129]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓Grid [ngx.components.UIDynamicElement-1594972846813]: 
    beanData: '{"ionBean":"Grid","Height":"plain:unset"}'
    tagName: ion-grid
    ↓GridRowTitle [ngx.components.UIDynamicElement-1611155525786]: 
      beanData: '{"ionBean":"GridRow","Height":"plain:unset"}'
      tagName: ion-row
      ↓GridCol [ngx.components.UIDynamicElement-1611155525789]: 
        beanData: |
          '{
           "ionBean": "GridCol",
           "SizeLg": "plain:12",
           "SizeMd": "plain:12",
           "SizeSm": "plain:12",
           "SizeXl": "plain:12",
           "SizeXs": "plain:12"
          }'
        tagName: ion-col
        ↓ToolBar [ngx.components.UIDynamicElement-1611155525792]: 
          beanData: '{"ionBean":"ToolBar","IonColor":"plain:white"}'
          tagName: ion-toolbar
          ↓Style [ngx.components.UIStyle-1611155525795]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    padding:0px;
                    
          ↓ButtonSetItemType1 [ngx.components.UIDynamicElement-1611155525798]: 
            beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:start"}'
            tagName: ion-buttons
            ↓Style [ngx.components.UIStyle-1611155525801]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      margin-left:0px;
                      
            ↓Div [ngx.components.UIDynamicElement-1611155525804]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓Button [ngx.components.UIDynamicElement-1611155525807]: 
                beanData: '{"ionBean":"Button"}'
                tagName: ion-button
                ↓Image [ngx.components.UIDynamicElement-1611155525810]: 
                  beanData: '{"ionBean":"Image","url":"script:''assets\/images\/svg\/component\/icn_condition_white.svg''"}'
                  selfClose: true
                  tagName: img
                  ↓Style [ngx.components.UIStyle-1611155525813]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '	display: block;
                              	margin-left: auto;
                              	margin-right: auto;
                              	max-height:24px;
                            	max-width:24px;
                            '
                ↓Style [ngx.components.UIStyle-1611155525816]: 
              ↓Style [ngx.components.UIStyle-1611155525819]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'display: table-cell; vertical-align: middle;
                        
                        	background-color: var(--ion-color-btLight);
                        '
          ↓GenericItem1 [ngx.components.UIDynamicElement-1611155525822]: 
            beanData: '{"ionBean":"GenericItem"}'
            tagName: ion-item
            ↓Attr2 [ngx.components.UIAttribute-1611155525825]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'stylegenerictextnormalWithoutBorderBottom'
            ↓Attr21 [ngx.components.UIAttribute-1611155525828]: 
              attrName: draggable
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:false
            ↓Style [ngx.components.UIStyle-1611155525831]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'border-bottom-color: #ffffff !important;
                      box-shadow: unset !important;
                      margin:0;
                      '
            ↓FormatLayout [ngx.components.UIDynamicAttr-1645090140056]: 
              beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-uppercase"}'
              comment: FormatLayout
              tagName: div
            ↓Text [ngx.components.UIText-1611155525837]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'conditional' | translate
            ↓Style1 [ngx.components.UIStyle-1611155525840]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '  font-size: 14px;
                        font-weight: 600;
                        font-style: normal;
                        font-stretch: normal;
                        line-height: normal;
                        letter-spacing: normal;
                      '
            ↓Span1 [ngx.components.UIDynamicElement-1611155525843]: 
              beanData: '{"ionBean":"SpanTag"}'
              tagName: span
              ↓Text [ngx.components.UIText-1611155525846]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'desc_conditional' | translate
              ↓Style [ngx.components.UIStyle-1611155525849]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'font-style: italic;
                        '
            ↓Attr [ngx.components.UIAttribute-1611155525852]: 
              attrName: 
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:text-wrap
      ↓Style [ngx.components.UIStyle-1611155525855]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                'padding:0px;
                border-bottom: 1px solid var(--ion-color-light);
                '
      ↓GridColVisible [ngx.components.UIDynamicElement-1594972854431]: 
        beanData: '{"ionBean":"GridCol","Size":"plain:12"}'
        tagName: ion-col
        ↓DivVisibleIf [ngx.components.UIDynamicElement-1594985778179]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓FormatLayout [ngx.components.UIDynamicAttr-1645090140058]: 
            beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-uppercase"}'
            comment: FormatLayout
            tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1595238656491]: 
            beanData: '{"ionBean":"Icon","IconName":"script:this.local.showVisible ? ''arrow-dropdown'' : ''arrow-dropright''"}'
            comment: arrow-dropright
            tagName: ion-icon
          ↓Text [ngx.components.UIText-1594985778185]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'visible_if' | translate
          ↓Style [ngx.components.UIStyle-1594985778188]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'color: #ff8206;
                      font-size: 14px;
                      font-weight: 600;
                      font-style: normal;
                      font-stretch: normal;
                      line-height: normal;
                      letter-spacing: normal;
                    '
        ↓Attr [ngx.components.UIAttribute-1594987567266]: 
          attrName: '*ngIf'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:this.local.visible != undefined
        ↓DivDesc [ngx.components.UIDynamicElement-1611158290816]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Style [ngx.components.UIStyle-1611158310548]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'margin-right:20px;
                    margin-left:15px;
                    margin-bottom:15px;
                    margin-top:15px;
                    background-color: #f8fafb;
                    '
          ↓Paragraph [ngx.components.UIDynamicElement-1611158315684]: 
            beanData: '{"ionBean":"Paragraph"}'
            tagName: p
            ↓Icon [ngx.components.UIDynamicElement-1611158315687]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:ios-information-circle-outline"}'
              tagName: ion-icon
            ↓Text [ngx.components.UIText-1611158315690]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'desc_conditional_visibility' | translate
            ↓Style [ngx.components.UIStyle-1611158315693]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '  text-align: justify;
                        text-justify: inter-word;
                        color: #95a5a6;
                      '
        ↓Div [ngx.components.UIDynamicElement-1646764341273]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Directive2 [ngx.components.UIControlDirective-1595238961426]: 
            comment: edition mode for visible
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.showVisible == true else ElseBlock_1595246658893
            ↓Directive [ngx.components.UIControlDirective-1595232225766]: 
              directiveIndexName: l
              directiveItemName: item
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.visible
              ↓Div [ngx.components.UIDynamicElement-1595492824098]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Style [ngx.components.UIStyle-1595492831938]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	margin-top:10px;
                          	margin-bottom:10px;
                          
                ↓UseSharedComponent [ngx.components.UIUseShared-1595493378459]: 
                  sharedcomponent: C8Oforms_NGX.MobileApplication.Application.conditionVisibleIf
                  ↓current [ngx.components.UIUseVariable-1595493378462]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item
                  ↓i [ngx.components.UIUseVariable-1595493378465]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:l
            ↓DivButtonAdd [ngx.components.UIDynamicElement-1595233525635]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓Button [ngx.components.UIDynamicElement-1595233552287]: 
                beanData: '{"ionBean":"Button","IonFill":"plain:clear"}'
                tagName: ion-button
                ↓Icon [ngx.components.UIDynamicElement-1595233572655]: 
                  beanData: '{"ionBean":"Icon"}'
                  tagName: ion-icon
              ↓Event [ngx.components.UIControlEvent-1595233697374]: 
                ↓CustomAction [ngx.components.UICustomAction-1595233702207]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '		//this.local.visible.push({visibleVal:{str:"", source:false}, visibleVal2: {str:"", source:false}, operator : "", visible: {element:""}});
                          		    this.local.visible.push({
                                          type:"visibleIf",
                                          subject:""
                                      });
                          		console.log(this.local.visible);
                          		resolve();
                          '
            ↓Directive1 [ngx.components.UIControlDirective-1595238172343]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.visible.length > 1
              ↓RadioList [ngx.components.UIDynamicElement-1595237939897]: 
                beanData: '{"ionBean":"RadioGroup"}'
                tagName: ion-radio-group
                ↓GenericItem [ngx.components.UIDynamicElement-1595237954657]: 
                  beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
                  tagName: ion-item
                  ↓RadioButton [ngx.components.UIDynamicElement-1595237943433]: 
                    beanData: '{"ionBean":"RadioButton","Value":"plain:and"}'
                    tagName: ion-radio
                    ↓Attr [ngx.components.UIAttribute-1595238033377]: 
                      attrName: 
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:item-left
                  ↓Label [ngx.components.UIDynamicElement-1595237969737]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Text [ngx.components.UIText-1595237976873]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:all_cond_checked
                ↓GenericItem1 [ngx.components.UIDynamicElement-1595237956633]: 
                  beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
                  tagName: ion-item
                  ↓RadioButton1 [ngx.components.UIDynamicElement-1595237944960]: 
                    beanData: '{"ionBean":"RadioButton","Value":"plain:or"}'
                    tagName: ion-radio
                    ↓Attr [ngx.components.UIAttribute-1595238034848]: 
                      attrName: 
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:item-left
                  ↓Label [ngx.components.UIDynamicElement-1595237972985]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Text [ngx.components.UIText-1595237978825]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:at_least_one_checked
                ↓Style [ngx.components.UIStyle-1595238072449]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          margin-left:80px;
                          
                ↓Attr [ngx.components.UIAttribute-1595238137192]: 
                  attrName: 
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:no-lines
                ↓Attr1 [ngx.components.UIAttribute-1595246274200]: 
                  attrName: '[(ngModel)]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.local.condVisible
            ↓DivSave [ngx.components.UIDynamicElement-1595249578291]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓FabContainer [ngx.components.UIDynamicElement-1595249578294]: 
                beanData: |
                  '{
                   "ionBean": "FabContainer",
                   "Horizontal": "plain:end",
                   "Vertical": "plain:bottom"
                  }'
                tagName: ion-fab
                ↓FabButton [ngx.components.UIDynamicElement-1595249578297]: 
                  beanData: |
                    '{
                     "ionBean": "FabButton",
                     "IonColor": "plain:btLight",
                     "Size": "plain:small"
                    }'
                  tagName: ion-fab-button
                  ↓Icon [ngx.components.UIDynamicElement-1595249578300]: 
                    beanData: '{"ionBean":"Icon","IconName":"plain:checkmark"}'
                    tagName: ion-icon
                ↓Event [ngx.components.UIControlEvent-1595249578303]: 
                  ↓CustomAction [ngx.components.UICustomAction-1595249678327]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            		this.local.showVisible = !this.local.showVisible;
                            		this.countFilled();
                            		resolve();
                            
              ↓Style [ngx.components.UIStyle-1595249619013]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        margin-top:10px;
                        
          ↓Tag [ngx.components.UIElement-1595246684140]: 
            comment: preview mode for visible
            identifier: ElseBlock_1595246658893
            tagName: ng-template
            ↓Grid [ngx.components.UIDynamicElement-1595491329056]: 
              beanData: '{"ionBean":"Grid"}'
              tagName: ion-grid
              ↓GridRow [ngx.components.UIDynamicElement-1595491333839]: 
                beanData: '{"ionBean":"GridRow"}'
                tagName: ion-row
                ↓GridColShowConditions [ngx.components.UIDynamicElement-1595491338008]: 
                  beanData: '{"ionBean":"GridCol","Size":"plain:12"}'
                  tagName: ion-col
                  ↓Div [ngx.components.UIDynamicElement-1595491368420]: 
                    beanData: '{"ionBean":"DivTag"}'
                    tagName: div
                    ↓Directive [ngx.components.UIControlDirective-1595491368423]: 
                      directiveIndexName: m
                      directiveItemName: item
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.visible
                      ↓Directive [ngx.components.UIControlDirective-1596802815286]: 
                        directiveName: If
                        directiveSource: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:this.isTotalyFilled(item)
                        ↓UseSharedComponent [ngx.components.UIUseShared-1595491368426]: 
                          sharedcomponent: C8Oforms_NGX.MobileApplication.Application.conditionVisibleIfPrev
                          ↓current [ngx.components.UIUseVariable-1595491368429]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓i [ngx.components.UIUseVariable-1595491368432]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:m
                    ↓Directive1 [ngx.components.UIControlDirective-1611149331858]: 
                      directiveName: If
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.cptTotalyFilled == 0
                      ↓UseSharedComponent [ngx.components.UIUseShared-1611150437103]: 
                        sharedcomponent: C8Oforms_NGX.MobileApplication.Application.conditionVisibleIfPrev
                        ↓always [ngx.components.UIUseVariable-1611150448727]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:true
                    ↓Style [ngx.components.UIStyle-1611153007361]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              	padding-top:10px;
                              	padding-bottom:10px;
                              
                  ↓DivShowEdit [ngx.components.UIDynamicElement-1611151144219]: 
                    beanData: '{"ionBean":"DivTag"}'
                    tagName: div
                    ↓Button [ngx.components.UIDynamicElement-1611151144222]: 
                      beanData: '{"ionBean":"Button","IonFill":"plain:clear"}'
                      tagName: ion-button
                      ↓Icon [ngx.components.UIDynamicElement-1611151144225]: 
                        beanData: '{"ionBean":"Icon","IconName":"plain:create-outline"}'
                        tagName: ion-icon
                      ↓Event [ngx.components.UIControlEvent-1611151144228]: 
                        ↓CustomAction [ngx.components.UICustomAction-1611151144231]: 
                          actionValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                →: |
                                  		this.local.showVisible = true;
                                  		this.local.showGoToPage = false;
                                  		this.tick();
                                  		resolve();
                                  
                    ↓Style [ngx.components.UIStyle-1611151144240]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '	position: absolute; /* postulat de départ */
                              	left: 50%; /* à 50%/50% du parent référent */
                              	top: 50%;
                                	transform: translate(-50%, -50%); /* décalage de 50% de sa propre taille */
                              '
                    ↓Attr [ngx.components.UIAttribute-1611152836878]: 
                      attrName: '*ngIf'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:this.local.showEdit
              ↓Style [ngx.components.UIStyle-1611148865042]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'min-height:50px;
                        position:relative;
                        }
                        
                        .class1595491329056:hover {
                        	cursor:pointer;
                        	background-color: var(--ion-color-light);
                        '
              ↓Event [ngx.components.UIControlEvent-1611151035587]: 
                attrName: (mouseenter)
                eventName: (mouseenter)
                ↓CustomAction [ngx.components.UICustomAction-1611151077940]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		this.local.showEdit = true;
                          		this.tick();
                          		resolve();
                          
              ↓Event1 [ngx.components.UIControlEvent-1611151063560]: 
                attrName: (mouseleave)
                eventName: (mouseleave)
                ↓CustomAction [ngx.components.UICustomAction-1611151080497]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		this.local.showEdit = false;
                          		this.tick();
                          		resolve();
                          
              ↓Attr [ngx.components.UIAttribute-1611151789436]: 
                attrName: tooltip
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'edit_condition_visibility' | translate
              ↓Attr2 [ngx.components.UIAttribute-1611151789442]: 
                attrName: positionV
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:bottom
              ↓Event2 [ngx.components.UIControlEvent-1611152859352]: 
                ↓CustomAction [ngx.components.UICustomAction-1611152859355]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		this.local.showVisible = true;
                          		this.local.showGoToPage = false;
                          		this.local.showEdit = false;
                          		this.tick();
                          		resolve();
                          
        ↓DividerItem [ngx.components.UIDynamicElement-1595238574597]: 
          beanData: '{"ionBean":"Listdivider"}'
          tagName: ion-item-divider
      ↓GridColGoto [ngx.components.UIDynamicElement-1595862191123]: 
        beanData: '{"ionBean":"GridCol","Size":"plain:12"}'
        tagName: ion-col
        ↓DivGotoIf [ngx.components.UIDynamicElement-1595862191126]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓FormatLayout [ngx.components.UIDynamicAttr-1645090140067]: 
            beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-uppercase"}'
            comment: FormatLayout
            tagName: div
          ↓Icon [ngx.components.UIDynamicElement-1595862191132]: 
            beanData: '{"ionBean":"Icon","IconName":"script:this.local.showGoToPage ? ''arrow-dropdown'' : ''arrow-dropright''"}'
            comment: arrow-dropright
            tagName: ion-icon
          ↓Text [ngx.components.UIText-1595862191135]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'navigate_or_authorize' | translate
          ↓Style [ngx.components.UIStyle-1595862191138]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'color: #ff8206;
                      font-size: 14px;
                      font-weight: 600;
                      font-style: normal;
                      font-stretch: normal;
                      line-height: normal;
                      letter-spacing: normal;
                    '
        ↓DivDesc [ngx.components.UIDynamicElement-1611158690158]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Style [ngx.components.UIStyle-1611158690161]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'margin-right:20px;
                    margin-left:15px;
                    margin-bottom:15px;
                    margin-top:15px;
                    background-color: #f8fafb;
                      text-align: justify;
                      text-justify: inter-word;
                      color: #95a5a6;
                    '
          ↓Paragraph [ngx.components.UIDynamicElement-1611158690164]: 
            beanData: '{"ionBean":"Paragraph"}'
            isEnabled: false
            tagName: p
            ↓Text [ngx.components.UIText-1611158690170]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'desc_conditional_allow' | translate
            ↓Style [ngx.components.UIStyle-1611158690173]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '  text-align: justify;
                        text-justify: inter-word;
                        color: #95a5a6;
                      '
          ↓Icon [ngx.components.UIDynamicElement-1611158690167]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:ios-information-circle-outline"}'
            isEnabled: false
            tagName: ion-icon
            ↓Style [ngx.components.UIStyle-1623923897087]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      	display:inline-block;
                      
          ↓Div [ngx.components.UIDynamicElement-1623923818681]: 
            beanData: '{"ionBean":"DivTag"}'
            isEnabled: false
            tagName: div
            ↓Attr [ngx.components.UIAttribute-1623923824656]: 
              attrName: '[innerHtml]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.translate.instant('desc_conditional_allow')
            ↓Style [ngx.components.UIStyle-1623923857157]: 
          ↓Span [ngx.components.UIDynamicElement-1623923862287]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1623923868205]: 
              attrName: '[innerHtml]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.translate.instant('desc_conditional_allow')
            ↓Style [ngx.components.UIStyle-1623923914170]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      	display:inline-block;
                      
        ↓Attr [ngx.components.UIAttribute-1595862191141]: 
          attrName: '*ngIf'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:this.local.goToPage != undefined && this.getGoToPageType(this.local.goToPageSelf.type) != '' && this.getGoToPageType(this.local.goToPageSelf.type) != 'file'
        ↓Directive2 [ngx.components.UIControlDirective-1595862191144]: 
          comment: edition mode for goto
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:(this.local.showGoToPage || this.getGoToPageType(this.local.goToPageSelf.type) == 'multiple') else ElseBlock_1595862191603
          ↓Directive [ngx.components.UIControlDirective-1595862191480]: 
            directiveIndexName: k
            directiveItemName: item
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.goToPage
            ↓Div [ngx.components.UIDynamicElement-1595862191483]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓Style [ngx.components.UIStyle-1595862191510]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        	margin-top:10px;
                        	margin-bottom:10px;
                        
              ↓UseSharedComponent [ngx.components.UIUseShared-1595862191513]: 
                sharedcomponent: C8Oforms_NGX.MobileApplication.Application.conditiongoToPageIf
                ↓current [ngx.components.UIUseVariable-1595862191516]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:item
                ↓i [ngx.components.UIUseVariable-1595862191519]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:k
                ↓length [ngx.components.UIUseVariable-1598621186109]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.local.goToPage.length
          ↓DivButtonAdd [ngx.components.UIDynamicElement-1595862191522]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Button [ngx.components.UIDynamicElement-1595862191525]: 
              beanData: '{"ionBean":"Button","IonFill":"plain:clear"}'
              tagName: ion-button
              ↓Icon [ngx.components.UIDynamicElement-1595862191528]: 
                beanData: '{"ionBean":"Icon"}'
                tagName: ion-icon
            ↓Event [ngx.components.UIControlEvent-1595862191531]: 
              ↓CustomAction [ngx.components.UICustomAction-1595862191534]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		//this.local.visible.push({visibleVal:{str:"", source:false}, visibleVal2: {str:"", source:false}, operator : "", visible: {element:""}});
                        		    let val1 = {
                                        str: this.local.item.id,
                                        source: true,
                                        type: this.local.item.type
                                    };
                        		
                            		this.local.goToPage.push({
                                            type:"goToPageIf",
                                            val1:val1,
                                            val2:{
                                                str: "",
                                                source: false,
                                                type: "",
                                                vals: this.local.template
                                                //arr:
                                            }
                                        });
                            		console.log(this.local.visible);
                            		resolve();
                        '
            ↓Attr [ngx.components.UIAttribute-1596532643644]: 
              attrName: '*ngIf'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:this.getGoToPageType(this.local.goToPageSelf.type) != 'multiple'
          ↓DivSave [ngx.components.UIDynamicElement-1595862191582]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓FabContainer [ngx.components.UIDynamicElement-1595862191585]: 
              beanData: |
                '{
                 "ionBean": "FabContainer",
                 "Horizontal": "plain:end",
                 "Vertical": "plain:bottom"
                }'
              tagName: ion-fab
              ↓FabButton [ngx.components.UIDynamicElement-1595862191588]: 
                beanData: |
                  '{
                   "ionBean": "FabButton",
                   "IonColor": "plain:btLight",
                   "Size": "plain:small"
                  }'
                tagName: ion-fab-button
                ↓Icon [ngx.components.UIDynamicElement-1595862191591]: 
                  beanData: '{"ionBean":"Icon","IconName":"plain:checkmark"}'
                  tagName: ion-icon
              ↓Event [ngx.components.UIControlEvent-1595862191594]: 
                ↓CustomAction [ngx.components.UICustomAction-1595862191597]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		this.local.showGoToPage = !this.local.showGoToPage;
                          		resolve();
                          
            ↓Style [ngx.components.UIStyle-1595862191600]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      margin-top:10px;
                      
            ↓Attr [ngx.components.UIAttribute-1596534061765]: 
              attrName: '*ngIf'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:this.getGoToPageType(this.local.goToPageSelf.type) != 'multiple'
        ↓Tag [ngx.components.UIElement-1595862191603]: 
          comment: preview mode for goto
          identifier: ElseBlock_1595862191603
          tagName: ng-template
          ↓Grid [ngx.components.UIDynamicElement-1595862191606]: 
            beanData: '{"ionBean":"Grid","Height":"plain:unset"}'
            tagName: ion-grid
            ↓GridRow [ngx.components.UIDynamicElement-1595862191609]: 
              beanData: '{"ionBean":"GridRow","Height":"plain:unset"}'
              tagName: ion-row
              ↓GridColShowConditions [ngx.components.UIDynamicElement-1595862191612]: 
                beanData: '{"ionBean":"GridCol","Size":"plain:12"}'
                tagName: ion-col
                ↓Div [ngx.components.UIDynamicElement-1595862191615]: 
                  beanData: '{"ionBean":"DivTag"}'
                  tagName: div
                  ↓Directive [ngx.components.UIControlDirective-1595862191618]: 
                    directiveIndexName: n
                    directiveItemName: item
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.local.goToPage
                    ↓Div [ngx.components.UIDynamicElement-1596115647820]: 
                      beanData: '{"ionBean":"DivTag"}'
                      tagName: div
                      ↓Style [ngx.components.UIStyle-1596115656972]: 
                        styleContent: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                'margin-top: 5px;
                                '
                    ↓UseSharedComponent [ngx.components.UIUseShared-1595862191621]: 
                      sharedcomponent: C8Oforms_NGX.MobileApplication.Application.conditiongoToPageIfPrev
                      ↓current [ngx.components.UIUseVariable-1595862191624]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:item
                      ↓i [ngx.components.UIUseVariable-1595862191627]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:n
                  ↓Style [ngx.components.UIStyle-1611154949869]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            	padding-top:10px;
                            	padding-bottom:10px;
                            
                ↓DivShowEditAllow [ngx.components.UIDynamicElement-1611154117561]: 
                  beanData: '{"ionBean":"DivTag"}'
                  tagName: div
                  ↓Button [ngx.components.UIDynamicElement-1611154117564]: 
                    beanData: '{"ionBean":"Button","IonFill":"plain:clear"}'
                    tagName: ion-button
                    ↓Icon [ngx.components.UIDynamicElement-1611154117567]: 
                      beanData: '{"ionBean":"Icon","IconName":"plain:create-outline"}'
                      tagName: ion-icon
                    ↓Event [ngx.components.UIControlEvent-1611154117570]: 
                      ↓CustomAction [ngx.components.UICustomAction-1611154117573]: 
                        actionValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                		    this.local.showVisible = false;
                                		if(this.local.showGoToPage == false){
                                		    this.local.showGoToPage = true;
                                		}
                                		if(this.local.goToPage.length == 0){
                                		    this.local.goToPage.push({subject:this.local.goToPageSubject})
                                		}
                                		this.local.showEditAllow = false;
                                		resolve();
                                
                    ↓Attr [ngx.components.UIAttribute-1611154117576]: 
                      attrName: 
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:item-right
                    ↓Attr1 [ngx.components.UIAttribute-1611154117579]: 
                      attrName: '[title]'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.translate.instant('edit')
                  ↓Style [ngx.components.UIStyle-1611154117582]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		position: absolute; /* postulat de départ */
                            	left: 50%; /* à 50%/50% du parent référent */
                            	top: 50%;
                              	transform: translate(-50%, -50%); /* décalage de 50% de sa propre taille */
                            '
                  ↓Attr [ngx.components.UIAttribute-1611154143402]: 
                    attrName: '*ngIf'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:this.local.showEditAllow
                ↓Style [ngx.components.UIStyle-1611153705760]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	padding-top:10px;
                          	padding-bottom:10px;
                          
              ↓Attr [ngx.components.UIAttribute-1596533573751]: 
                attrName: '*ngIf'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:this.getGoToPageType(this.local.goToPageSelf.type) != 'multiple'
            ↓Attr [ngx.components.UIAttribute-1611153497889]: 
              attrName: tooltip
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'edit_condition_allow' | translate
            ↓Attr1 [ngx.components.UIAttribute-1611153497892]: 
              attrName: 
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:arrow
              isEnabled: false
            ↓Attr2 [ngx.components.UIAttribute-1611153497895]: 
              attrName: positionV
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:bottom
            ↓Event [ngx.components.UIControlEvent-1611154177537]: 
              attrName: (mouseenter)
              eventName: (mouseenter)
              ↓CustomAction [ngx.components.UICustomAction-1611154177540]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		this.local.showEditAllow = true;
                        		this.tick();
                        		resolve();
                        
            ↓Event1 [ngx.components.UIControlEvent-1611154177543]: 
              attrName: (mouseleave)
              eventName: (mouseleave)
              ↓CustomAction [ngx.components.UICustomAction-1611154177546]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		this.local.showEditAllow = false;
                        		this.tick();
                        		resolve();
                        
            ↓Event2 [ngx.components.UIControlEvent-1611154177549]: 
              ↓CustomAction [ngx.components.UICustomAction-1611154177552]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		this.local.showVisible = false;
                        		if(this.local.showGoToPage == false){
                        		    this.local.showGoToPage = true;
                        		}
                        		if(this.local.goToPage.length == 0){
                        		    this.local.goToPage.push({subject:this.local.goToPageSubject})
                        		}
                        		this.local.showEditAllow = false;
                        		this.tick();
                        		resolve();
                        
            ↓Style [ngx.components.UIStyle-1611154999047]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'min-height:50px;
                      position:relative;
                      }
                      
                      .class1595862191606:hover {
                      	cursor:pointer;
                      	background-color: var(--ion-color-light);
                      '
        ↓DividerItem [ngx.components.UIDynamicElement-1595862191657]: 
          beanData: '{"ionBean":"Listdivider"}'
          tagName: ion-item-divider
↓Footer [ngx.components.UIDynamicElement-1594972577194]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓ToolBar [ngx.components.UIDynamicElement-1646763772796]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓ButtonSet [ngx.components.UIDynamicElement-1594972577200]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
      tagName: ion-buttons
      ↓Button1 [ngx.components.UIDynamicElement-1594972577203]: 
        beanData: '{"ionBean":"Button"}'
        tagName: ion-button
        ↓Text [ngx.components.UIText-1594972577206]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'Cancel' | translate
        ↓Attr [ngx.components.UIAttribute-1594972577209]: 
          attrName: 
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:item-left
        ↓Event [ngx.components.UIControlEvent-1594972577212]: 
          ↓CloseModal [ngx.components.UIDynamicAction-1594972577215]: 
            beanData: '{"ionBean":"CloseModalAction"}'
      ↓Button [ngx.components.UIDynamicElement-1594972577218]: 
        beanData: '{"ionBean":"Button"}'
        tagName: ion-button
        ↓Text [ngx.components.UIText-1594972577221]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'Save' | translate
        ↓Attr [ngx.components.UIAttribute-1594972577224]: 
          attrName: 
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:item-right
        ↓Event [ngx.components.UIControlEvent-1594972577227]: 
          ↓CustomAction [ngx.components.UICustomAction-1596110338327]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		let i = page.navParams.data.i;
                    		let j = page.navParams.data.j;
                    		let condVisible =  this.local.condVisible;
                    		let visible = this.local.visible;
                    		let goToPage = this.local.goToPage;
                    		
                    		// if variable i is set
                    		if(i!= undefined){
                    		    // if we are not into a card item
                    		    if(j == undefined){
                    		        //save visible conditions
                    		        page.navParams.data.form.formulaire[i].conditions.visibleIf.conds = visible;
                    		        page.navParams.data.form.formulaire[i].conditions.visibleIf.condVisible = condVisible;
                    		        //save go to page conditions
                    		        page.navParams.data.form.formulaire[i].conditions.goToPageIf.conds = goToPage;
                    		    }
                    		    // if we are into a card item
                    		    else{
                    		        //save visible conditions
                    		        page.navParams.data.form.formulaire[i].children[j].conditions.visibleIf.conds = visible;
                                    page.navParams.data.form.formulaire[i].children[j].conditions.visibleIf.condVisible = condVisible;
                                    //save go to page conditions
                                    page.navParams.data.form.formulaire[i].children[j].conditions.goToPageIf.conds = goToPage;
                    		    }
                    		    
                    		}
                    		resolve();
                    
            ↓ClosePopover [ngx.components.UIDynamicAction-1595257870431]: 
              beanData: '{"ionBean":"ClosePopoverAction"}'
              isEnabled: false
            ↓values [ngx.components.UIControlVariable-1596110350834]: 
            ↓CloseModal [ngx.components.UIDynamicAction-1646763894667]: 
              beanData: '{"ionBean":"CloseModalAction"}'
      ↓Style [ngx.components.UIStyle-1594972577236]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                'padding-bottom: 1vh;
                padding-right: 1vh;
                '
↓PageEvent [ngx.components.UIPageEvent-1594981525339]: 
  viewEvent: onWillEnter
  ↓setDefs [ngx.components.UICustomAction-1595257902664]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		
            		    const returnTemplate = (item)=>{
            		        let template = {};
            		        for(let cond of item.conditions.goToPageIf.conds){
            		            if(item.type == "checkbox_group" || item.type == "radio_group"){
            		                template = {};
            		                for(let line of item.lines){
            		                    template[line.id] = [];
            		                    for(let child in item["children"]){
            		                        let action = cond.val2.vals != undefined ? cond.val2.vals[line.id] != undefined ?  cond.val2.vals[line.id].filter(e=>{return e.value == item["children"][child].id}) : []:[];
            		                        action = action.length > 0 ? action[0].action : null;
            		                        template[line.id].push({"value": item["children"][child].id, "action":action});
            		                    }
            		                }
            		            }
            		            else if(item.type == "checkbox" || item.type == "radio" || item.type == "select"){
                                    template = {};
                                    for(let child of item.children){
                                        let action = cond.val2.vals != undefined ? cond.val2.vals[child.id] != undefined ? cond.val2.vals[child.id]  : "" :"";
                                        template[child.id] = action;
                                    }
                                }
            		        }
            		        this.local.template = template;
            		            return template;
            		    };		    
            		    
            		    // used for CheckBoxGroup
            		    this.local.gridAndCheckboxStyleOnScroll = [];
            		    let item;
                        if(page["navParams"].data.j == undefined){
                            item = page["navParams"].data.form.formulaire[page["navParams"].data.i];
                        }
                        else{
                            item = page["navParams"].data.form.formulaire[page["navParams"].data.i]["children"][page["navParams"].data.j];
                        }
                        this.local.item = item;
                        
                        // if condition object doesn''t exists we create it 
                        if(item.conditions == undefined){
                            item.conditions = {
                                    "visibleIf":{
                                        conds:[{
                                            type:"visibleIf",
                                            subject:""
                                        }],
                                        condVisible:"and"
                                      },
                                      "goToPageIf":{
                                          conds:[{
                                              type:"goToPageIf",
                                              val1:{
                                                  str: item.id,
                                                  source: true,
                                                  type: item.type
                                              },
                                              val2:{
                                                  str: "",
                                                  source: false,
                                                  type: ""
                                              }
                                          }],
                                        condVisible:"and"
                                      }
                                  }; 
                        };
                        
                        // set visisble if settings
                        this.local.condVisible = item.conditions.visibleIf.condVisible; 
                        this.local.visible = item.conditions.visibleIf.conds;
                        this.local.val2Visible = [];
                        for(let j in this.local.visible){
                            if(this.local.visible[j].val2 != undefined && this.local.visible[j].val2.source){
                                if(this.local.visible[j].val2.arr != undefined){
                                    for(let i in this.local.visible[j].val2.arr){
                                        this.local.visible[j].val2.arr[i].display = this.getItemNameById(+this.local.visible[j].val2.arr[i].value);
                                    }
                                }
                            }
                        }
                        // set go to page if settings
                        this.local.condGoToPage = item.conditions.goToPageIf.condVisible;
                        this.local.goToPageSelf = {
                                str: item.id,
                                source: true,
                                type: item.type
                        };
                        this.local.goToPage = item.conditions.goToPageIf.conds;
                        this.local.goToPage[0].val2.vals = returnTemplate(item);
                        page.countFilled();
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                    /*    
                        if(item["type"] == "checkbox_group"){
                            this.local.templateValue = {};
                            for(let line of item.lines){
                                this.local.templateValue[line.id] = [];
                                for(let child in item["children"]){
                                    this.local.templateValue[line.id].push({"value": item["children"][child].id});
                                }
                            }
                        }  
                        else if(item["type"] == "radio_group"){
                            this.local.templateValue = {};
                           
                            this.local.templateValue = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, children_label:item["children"], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                         
                            for(let line of item.lines){
                                let value = "";
                                this.local.templateValue.children[line.title]= value;
                            }
                        }
            	        
            		
            		if(this.navParams.data.j == undefined){
            		    if(this.navParams.data.form.formulaire[this.navParams.data.i].conditions == undefined ){
                            this.navParams.data.form.formulaire[this.navParams.data.i].conditions = {
                                    "visibleIf":{
                                        conds:[{
                                            type:"visibleIf",
                                            subject:""
                                        }],
                                        condVisible:"and"
                                      },
                                      "goToPageIf":{
                                          conds:[{
                                              type:"goToPageIf",
                                              val1:{
                                                  str: this.navParams.data.form.formulaire[this.navParams.data.i].name,
                                                  source: true,
                                                  type: this.navParams.data.form.formulaire[this.navParams.data.i].type
                                              },
                                              val2:{
                                                  str: "",
                                                  source: false,
                                                  type: "",
                                                  vals:this.local.templateValue != undefined ? JSON.parse(JSON.stringify(updateCondsGoto(this.navParams.data.form.formulaire[this.navParams.data.i].conditions.goToPageIf.conds, item.type, item, true))): []
                                              }
                                          }],
                                        condVisible:"and"
                                      }
                                  }; 
                        }  
            		    this.local.condVisible = this.navParams.data.form.formulaire[this.navParams.data.i].conditions.visibleIf.condVisible; 
            	        this.local.visible = this.navParams.data.form.formulaire[this.navParams.data.i].conditions.visibleIf.conds;
            	        this.local.val2Visible = []
            	        for(let j in this.local.visible){
            	            
            	            if(this.local.visible[j].val2 != undefined && this.local.visible[j].val2.source){
            	                if(this.local.visible[j].val2.arr != undefined){
            	                    for(let i in this.local.visible[j].val2.arr){
            	                        this.local.visible[j].val2.arr[i].display = this.getItemNameByIdStr(this.local.visible[j].val2.arr[i].value)
            	                    }
            	                }
            	            }
            	        }
            	        
            	        
            	        this.local.condGoToPage = this.navParams.data.form.formulaire[this.navParams.data.i].conditions.goToPageIf.condVisible;
            	        
            	        this.local.goToPageSelf = {
            	                str: this.navParams.data.form.formulaire[this.navParams.data.i].name,
            	                source: true,
            	                type: this.navParams.data.form.formulaire[this.navParams.data.i].type
            	        }
            	        updateCondsGoto(this.navParams.data.form.formulaire[this.navParams.data.i].conditions.goToPageIf.conds, item.type, item);
            	        this.local.goToPage = this.navParams.data.form.formulaire[this.navParams.data.i].conditions.goToPageIf.conds;
            		}
            		else {
            		    if(this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions == undefined){
            		    this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions = {
                                "visibleIf":{
                                    conds:[{
                                        type:"visibleIf",
                                        subject:""
                                    }],
                                    condVisible:"and"
                                  },
                                  "goToPageIf":{
                                    conds:[{
                                        type:"goToPageIf",
                                        val1:{
                                            str: this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].name,
                                            source: true,
                                            type: this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].type
                                        },
                                        val2:{
                                            str: "",
                                            source: false,
                                            type: "",
                                            vals: this.local.templateValue != undefined ? JSON.parse(JSON.stringify(updateCondsGoto(this.navParams.data.form.formulaire[this.navParams.data.i].conditions.goToPageIf.conds, item.type, item, true))): []          
                                        }
                                    }],
                                    condVisible:"and"
                                  }
                              }; 
            		    
            		    }
            		    this.local.condVisible = this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions.visibleIf.condVisible; 
                        this.local.visible =this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions.visibleIf.conds;
                        this.local.condGoToPage = this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions.goToPageIf.condVisible;
                        this.local.goToPage = this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions.goToPageIf.conds;
                        this.local.goToPageSelf = {
                                str: this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].name,
                                source: true,
                                type: this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].type
                        }
                        updateCondsGoto(this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions.goToPageIf.conds, item.type, item);
                        this.local.goToPage = this.navParams.data.form.formulaire[this.navParams.data.i].children[this.navParams.data.j].conditions.goToPageIf.conds
            		}*/
            		 resolve();
            		    
            '
  ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1624006646261]: 
    beanData: '{"ionBean":"InvokeAction"}'
    stack: C8Oforms_NGX.MobileApplication.Application.importNg2Tooltips
↓Subscribe_Handler2 [ngx.components.UIEventSubscriber-1595430806693]: 
  topic: ngxTagInputNgModelChange
  ↓setTags [ngx.components.UICustomAction-1595430806696]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		    const visible = "cond_visible_";
                        const goToPage = "cond_goToPage_";
                        if(event.ref.indexOf(visible) != -1){
                            let arrTmp = [];
                            for(let elem of event["event"]){
                                if(elem instanceof Object){
                                    arrTmp.push(elem);
                                }
                                else{
                                    arrTmp.push(elem);
                                }
                            }
                            this.local.visible[+(event.ref.substring(visible.length))].val2.arr = arrTmp;
                        }
                        else if(event.ref.indexOf(goToPage) != -1){
                            let arrTmp = [];
                            for(let elem of event["event"]){
                                if(elem instanceof Object){
                                    arrTmp.push(elem);
                                }
                                else{
                                    arrTmp.push(elem);
                                }
                            }
                            this.local.goToPage[+(event.ref.substring(goToPage.length))].val2.arr = arrTmp;
                        }
                        resolve();		    
            
↓Subscribe_Handler21 [ngx.components.UIEventSubscriber-1595431922588]: 
  topic: ngxTagInputRemoved
  ↓setTags [ngx.components.UICustomAction-1595431922591]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		    const visible = "cond_visible_";
                        const goToPage = "cond_goToPage_";
                        if(event.ref.indexOf(visible) != -1){
                            this.local.visible[+(event.ref.substring(visible.length))].val2.source = false;
                        }
                        else if(event.ref.indexOf(goToPage) != -1){
                            this.local.goToPage[+(event.ref.substring(goToPage.length))].val2.source = false;
                        }
                        resolve();		    
            
↓Subscribe_Handler211 [ngx.components.UIEventSubscriber-1595432012773]: 
  topic: ngxTagInputAdded
  ↓setTags [ngx.components.UICustomAction-1595432012790]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            	        const visible = "cond_visible_";
            	        const goToPage = "cond_goToPage_";
            	        if(event.ref.indexOf(visible) != -1){
            	            this.local.visible[+(event.ref.substring(visible.length))].val2.source = false;
            	        }
            	        else if(event.ref.indexOf(goToPage) != -1){
            	            this.local.goToPage[+(event.ref.substring(goToPage.length))].val2.source = false;
            	        }
            		    resolve();		    
            