scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        import { readability } from ''@ctrl/tinycolor'';
        import { mostReadable } from ''@ctrl/tinycolor'';
        import { TinyColor } from ''@ctrl/tinycolor'';
        import { APP_BASE_HREF } from ''@angular/common'';
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		this.defineColorsForHeader();
        		/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	public defineColorsForHeader(){
        		this.local.headerColor = "#ffffff";
        		this.local.policyColor = "black";
        		let btLightColor = "#ff8206";
        		let btLightColor2 = "#ffc906";
        		let secondaryColor = "#32db64";
        		let secondaryColor2 = "#0cbbe7";
        		let dangerColor = "#f53d3d";
        		let dangerColor2 = "#950000";
        		this.local.policyBtLightColor = "btLight";
        		this.local.policySecondaryColor = "secondary";
        		this.local.policyDangerColor = "danger";
        		
        		try {
        			
        		    let indexPWA = window.location.pathname.indexOf("pwas");
        		    let indexMobile = window.location.pathname.indexOf("mobile");
        		    // if we started in standalone pwa mode
        		    if (indexPWA != -1 && indexMobile == -1) {
        		        // get url base
        		        const baseUrl = window.location.origin + this.getInstance(APP_BASE_HREF);
        		        this.global.pwaGet = this.c8o.httpPublic.get(baseUrl + "manifest.webmanifest");
        		        this.global.pwaGet
        		            .subscribe(
        		                response => {
        		                    if (response["theme_color"] != undefined) {
        		                        this.local.headerColor = response["theme_color"];
        		                        // color asked for theme
        		                        const color1 = new TinyColor(this.local.headerColor);
        		                        // background color
        		                        const color2 = new TinyColor("#ffffff");
        		                        // get ALPHA
        		                        let amount = color1.getAlpha() * 100;
        		                        const visibleColor = color2.mix(color1, amount);
        		                        let readabilitBlack = readability(visibleColor, "black");
        		                        let readabilitWhite = readability(visibleColor, "white");
        		                        if (readabilitWhite > readabilitBlack) {
        		                            this.local.policyColor = "white";
        		                            this.local.hooverPolicyColor = new TinyColor(visibleColor).tint(50).toString();
        		                            //this.local.hooverPolicyColor2 = new TinyColor(visibleColor).tint(80).toString();
        		                        }
        		                        else{
        									this.local.hooverPolicyColor = new TinyColor(visibleColor).shade(50).toString();
        									//this.local.hooverPolicyColor2 = new TinyColor(visibleColor).shade(80).toString();
        								}
        								try{
        									var stylesheet = document.styleSheets[0]
        									stylesheet.insertRule(".tab-selected { color: "+this.local.policyColor+" !important;}")
        									//stylesheet.insertRule("ion-tab-button { a:hover{color: "+this.local.hooverPolicyColor2+" !important;}}")
        									//console.log("########2", this.local.hooverPolicyColor2);
        								}
        								catch(e){
        									
        								}
        								//console.log("########", this.local.hooverPolicyColor);
        		                        //checking for other icons
        		                        let readabilitBtLight = readability(visibleColor, btLightColor);
        		                        let readabilitBtLight2 = readability(visibleColor, btLightColor2);
        		                        if (readabilitBtLight2 > readabilitBtLight) {
        		                            this.local.policyBtLightColor = "otherBtLight";
        		                        }
        		                        let readabilitSecondary = readability(visibleColor, secondaryColor);
        		                        let readabilitSecondary2 = readability(visibleColor, secondaryColor2);
        		                        if (readabilitSecondary2 > readabilitSecondary) {
        		                            this.local.policySecondaryColor = "convertigo";
        		                        }
        		                        let readabilitDanger = readability(visibleColor, dangerColor);
        		                        let readabilitDanger2 = readability(visibleColor, dangerColor2);
        		                        if (readabilitDanger2 > readabilitDanger) {
        		                            this.local.policyDangerColor = "otherDanger";
        		                        }
        		                    }
        		                },
        		                error => {
        		                    // do nothing
        		                })
        		    }
        		}
        		catch (e) {
        		}
        	}
        	/*End_c8o_PageFunction*/
        '
segment: path-to-responsecompleted/:name
title: Title for responseCompleted
↓Header [ngx.components.UIDynamicElement-1684922008708]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓ToolBar [ngx.components.UIDynamicElement-1684922008711]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓ButtonSetLeft [ngx.components.UIDynamicElement-1684922008714]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:start"}'
      tagName: ion-buttons
      ↓MenuButton [ngx.components.UIDynamicElement-1684922008717]: 
        beanData: '{"ionBean":"MenuButton","ButtonFormType":"plain"}'
        tagName: ion-menu-button
        ↓Attr4 [ngx.components.UIAttribute-1684922008720]: 
          attrName: '[attr.aria-label]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.translate.instant('Menu')
        ↓Attr [ngx.components.UIAttribute-1684922008723]: 
          attrName: '[ngStyle]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: 'script:this.local.published == true || this.local.anonymous == true ? {''--color'' : this.local.policyColor}: {}'
        ↓Attr1 [ngx.components.UIAttribute-1684922008726]: 
          attrName: id
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:menubuttonviewer
        ↓Style [ngx.components.UIStyle-1684922008729]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the menu button
                  //--background-focused	//Background of the menu button when focused with the tab key
                  //--background-focused-opacity	//Opacity of the menu button background when focused with the tab key
                  //--background-hover	//Background of the menu button on hover
                  //--background-hover-opacity	//Opacity of the background on hover
                  //--border-radius	//Border radius of the menu button
                  //--color	//Color of the menu button
                  //--color-focused	//Color of the menu button when focused with the tab key
                  //--color-hover	//Color of the menu button on hover
                  //--padding-bottom	//Bottom padding of the button
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                  //--padding-top	//Top padding of the button
                  
                  	&:focus {
                  	  	outline:solid;
                  	}
                  '
      ↓Attr4 [ngx.components.UIAttribute-1684922008732]: 
        attrName: '[attr.aria-label]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.translate.instant('Menu')
    ↓BarTitle [ngx.components.UIDynamicElement-1684922008735]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓Directive1 [ngx.components.UIControlDirective-1684922008738]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.local.published == true || this.local.anonymous == true else ElseBlock_1648202607596
        ↓H1 [ngx.components.UIDynamicElement-1684922008741]: 
          beanData: '{"ionBean":"Heading1"}'
          tagName: h1
          ↓Text1 [ngx.components.UIText-1684922008744]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.local?.name != undefined ? this.local.name : '''''
      ↓Tag1 [ngx.components.UIElement-1684922008747]: 
        identifier: ElseBlock_1648202607596
        tagName: ng-template
        ↓ImageConvertigo2 [ngx.components.UIDynamicElement-1684922008750]: 
          beanData: |
            '{
             "ionBean": "Image",
             "url": "script:''assets\/images\/svg\/logo\/logo_no_code_studio.svg''",
             "alt": "plain:Convertigo No Code Studio"
            }'
          selfClose: true
          tagName: img
          ↓Style [ngx.components.UIStyle-1684922008753]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    	/*margin-left:0.5em;
                    	margin-right:0.5em;*/
                    
      ↓Style1 [ngx.components.UIStyle-1684922008756]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/*margin-top:0.75rem;
                margin-bottom:0.8rem;*/
                h1{
                	font-size: 14px;
                  font-weight: 600;
                  font-style: normal;
                  font-stretch: normal;
                  white-space: nowrap;
                  overflow: hidden;
                  text-overflow: ellipsis;
                  margin:auto;
                }
                
                	
                '
      ↓Attr [ngx.components.UIAttribute-1684922008759]: 
        attrName: '[ngStyle]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: 'script:this.local.published == true || this.local.anonymous == true ? {''--color'' : this.local.policyColor}: {}'
    ↓ButtonSetRight [ngx.components.UIDynamicElement-1684922008762]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
      tagName: ion-buttons
      ↓Directive [ngx.components.UIControlDirective-1684922008882]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:!this.global.pwa
        ↓ButtonHome [ngx.components.UIDynamicElement-1684922008885]: 
          beanData: |
            '{
             "ionBean": "Button",
             "ButtonFormType": "plain",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Event [ngx.components.UIControlEvent-1684922008888]: 
            ↓RootPage [ngx.components.UIDynamicAction-1684922008891]: 
              beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.selectorPage"}'
          ↓Icon [ngx.components.UIDynamicElement-1684922008894]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:home-outline"}'
            tagName: ion-icon
            ↓Attr [ngx.components.UIAttribute-1684922008897]: 
              attrName: '[color]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.global.pwa ? this.local.policyColor : ''primary'''
            ↓Attr4 [ngx.components.UIAttribute-1684922008900]: 
              attrName: '[attr.aria-label]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.translate.instant('homePage')
          ↓Attr4 [ngx.components.UIAttribute-1684922008912]: 
            attrName: '[attr.aria-label]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('homePage')
            isEnabled: false
          ↓Span [ngx.components.UIDynamicElement-1684922008915]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1684922008918]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:sr-only
            ↓Text [ngx.components.UIText-1684922008921]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:homePage
      ↓ButtonRefresh [ngx.components.UIDynamicElement-1684922008924]: 
        beanData: |
          '{
           "ionBean": "Button",
           "ButtonFormType": "plain",
           "IonFill": "plain:clear"
          }'
        tagName: ion-button
        ↓Event [ngx.components.UIControlEvent-1684922008927]: 
          ↓RootPage [ngx.components.UIDynamicAction-1684922008930]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
               "data": "script:{formId: this.navParams.get(''formId''), i: this.navParams.get(''i'')}"
              }'
            isEnabled: false
          ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1684922008933]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		try {
                    			window.location.reload();
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    
        ↓Icon [ngx.components.UIDynamicElement-1684922008936]: 
          beanData: '{"ionBean":"Icon","IconName":"plain:refresh-outline"}'
          tagName: ion-icon
          ↓Attr [ngx.components.UIAttribute-1684922008939]: 
            attrName: '[color]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.global.pwa ? this.local.policyColor : ''primary'''
          ↓Attr4 [ngx.components.UIAttribute-1684922008942]: 
            attrName: '[attr.aria-label]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('reload_the_form')
        ↓Attr4 [ngx.components.UIAttribute-1684922008954]: 
          attrName: '[attr.aria-label]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.translate.instant('reload_the_form')
          isEnabled: false
        ↓Span [ngx.components.UIDynamicElement-1684922008957]: 
          beanData: '{"ionBean":"SpanTag"}'
          tagName: span
          ↓Attr [ngx.components.UIAttribute-1684922008960]: 
            attrName: class
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:sr-only
          ↓Text [ngx.components.UIText-1684922008963]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'reload_the_form' | translate
        ↓Style [ngx.components.UIStyle-1684922008966]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the button
                  //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the button when pressed
                  //--background-focused	//Background of the button when focused with the tab key
                  //--background-focused-opacity	//Opacity of the button when focused with the tab key
                  //--background-hover	//Background of the button on hover
                  //--background-hover-opacity	//Opacity of the background on hover
                  //--border-color	//Border color of the button
                  //--border-radius	//Border radius of the button
                  //--border-style	//Border style of the button
                  //--border-width	//Border width of the button
                  //--box-shadow	//Box shadow of the button
                  //--color	//Text color of the button
                  //--color-activated	//Text color of the button when pressed
                  //--color-focused	//Text color of the button when focused with the tab key
                  //--color-hover	//Text color of the button when hover
                  //--opacity	//Opacity of the button
                  //--padding-bottom	//Bottom padding of the button
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                  //--padding-top	//Top padding of the button
                  //--ripple-color	//Color of the button ripple effect
                  //--transition	//Transition of the button
                  
                  &:focus {
                  	--border-style: solid;
                  	--border-width: 3px;
                  	--border-color: #000;
                  }
                  
                  '
      ↓Directive11 [ngx.components.UIControlDirective-1684922008969]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:!(this.local.published == true || this.local.anonymous)
        ↓ButtonEdit [ngx.components.UIDynamicElement-1684922008972]: 
          beanData: |
            '{
             "ionBean": "Button",
             "ButtonFormType": "plain",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Event [ngx.components.UIControlEvent-1684922008975]: 
            ↓RootPage [ngx.components.UIDynamicAction-1684922008978]: 
              beanData: |
                '{
                 "ionBean": "RootPageAction",
                 "page": "plain:C8Oforms.MobileApplication.Application.editorPage",
                 "data": "script:{formId :c8oPage.local.formId}"
                }'
          ↓Icon [ngx.components.UIDynamicElement-1684922008981]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:brush-outline"}'
            tagName: ion-icon
            ↓Attr4 [ngx.components.UIAttribute-1684922008984]: 
              attrName: '[attr.aria-label]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.translate.instant('editView2')
          ↓Style [ngx.components.UIStyle-1684922008987]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the button
                    //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the button when pressed
                    //--background-focused	//Background of the button when focused with the tab key
                    //--background-focused-opacity	//Opacity of the button when focused with the tab key
                    //--background-hover	//Background of the button on hover
                    //--background-hover-opacity	//Opacity of the background on hover
                    //--border-color	//Border color of the button
                    //--border-radius	//Border radius of the button
                    //--border-style	//Border style of the button
                    //--border-width	//Border width of the button
                    //--box-shadow	//Box shadow of the button
                    //--color	//Text color of the button
                    //--color-activated	//Text color of the button when pressed
                    //--color-focused	//Text color of the button when focused with the tab key
                    //--color-hover	//Text color of the button when hover
                    //--opacity	//Opacity of the button
                    //--padding-bottom	//Bottom padding of the button
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                    //--padding-top	//Top padding of the button
                    //--ripple-color	//Color of the button ripple effect
                    //--transition	//Transition of the button
                    	ion-icon{
                    		color: var(--ion-color-primary);
                    	}
                    '
          ↓Attr4 [ngx.components.UIAttribute-1684922008999]: 
            attrName: '[attr.aria-label]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('editView2')
            isEnabled: false
          ↓Span [ngx.components.UIDynamicElement-1684922009002]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1684922009005]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:sr-only
            ↓Text [ngx.components.UIText-1684922009008]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:editView2
    ↓Attr1 [ngx.components.UIAttribute-1684922009011]: 
      attrName: '[style.--background]'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.local.headerColor
  ↓ToolBar2 [ngx.components.UIDynamicElement-1684922009014]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓Attr [ngx.components.UIAttribute-1684922009017]: 
      attrName: '*ngIf'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:this.local.pages != undefined && this.local.currentIndex != undefined && this.local.pages[this.local.currentIndex].positionTab != undefined && this.local.pages[this.local.currentIndex].positionTab == 'top'
    ↓UseSharedComponent [ngx.components.UIUseShared-1684922009020]: 
      sharedcomponent: C8Oforms.MobileApplication.Application.SharedTabs
↓Content [ngx.components.UIDynamicElement-1684922019399]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓Grid [ngx.components.UIDynamicElement-1684930399593]: 
    beanData: '{"ionBean":"Grid"}'
    tagName: ion-grid
    ↓GridRow [ngx.components.UIDynamicElement-1684930399596]: 
      beanData: |
        '{
         "ionBean": "GridRow",
         "FlexJustifyContent": "plain:ion-justify-content-center",
         "FlexAlignement": "plain:ion-align-items-center"
        }'
      tagName: ion-row
      ↓GridCol [ngx.components.UIDynamicElement-1684930399599]: 
        beanData: |
          '{
           "ionBean": "GridCol",
           "SizeLg": "plain:2",
           "SizeMd": "plain:1",
           "SizeXl": "plain:4"
          }'
        tagName: ion-col
      ↓GridCol1 [ngx.components.UIDynamicElement-1684930399602]: 
        beanData: |
          '{
           "ionBean": "GridCol",
           "SizeLg": "plain:8",
           "SizeMd": "plain:10",
           "SizeSm": "plain:12",
           "SizeXl": "plain:4",
           "SizeXs": "plain:12"
          }'
        tagName: ion-col
        ↓Div [ngx.components.UIDynamicElement-1684930399611]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Attr [ngx.components.UIAttribute-1684930399614]: 
            attrName: '[ngClass]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'styledivnormal'
          ↓FormatLayout [ngx.components.UIDynamicAttr-1684930399617]: 
            beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
            comment: FormatLayout
            tagName: div
          ↓Text [ngx.components.UIText-1684930399620]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.name
          ↓Style [ngx.components.UIStyle-1684930399623]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'font-size: 34px;
                    padding-bottom: 10px;
                    '
          ↓attr [ngx.components.UIAttribute-1684930848874]: 
            attrName: '*ngIf'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:!(this.local.anonymous == true || this.local.published == true)
        ↓Div1 [ngx.components.UIDynamicElement-1684930399626]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Attr [ngx.components.UIAttribute-1684930399629]: 
            attrName: '[ngClass]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'styledivnormal'
          ↓FormatLayout [ngx.components.UIDynamicAttr-1684930399632]: 
            beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
            comment: FormatLayout
            tagName: div
          ↓H2 [ngx.components.UIDynamicElement-1684930399635]: 
            beanData: '{"ionBean":"Heading2"}'
            tagName: h2
            ↓Text [ngx.components.UIText-1684930399638]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'responseSubmited' | translate
          ↓Style [ngx.components.UIStyle-1684930399641]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'padding-bottom: 10px;
                    '
        ↓Div2 [ngx.components.UIDynamicElement-1684930399644]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Attr [ngx.components.UIAttribute-1684930399647]: 
            attrName: '[ngClass]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'styledivnormal'
          ↓Button [ngx.components.UIDynamicElement-1684930399662]: 
            beanData: '{"ionBean":"Button","ButtonFormType":"plain"}'
            tagName: ion-button
            ↓FormatLayout [ngx.components.UIDynamicAttr-1684930399665]: 
              beanData: '{"ionBean":"FormatLayout"}'
              comment: FormatLayout
              tagName: div
            ↓Style [ngx.components.UIStyle-1684930399668]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	--color:var(--ion-color-primary-contrast);
                      	&:focus {
                      		--border-style: solid;
                      		--border-width: 3px;
                      		--border-color: #000;
                      	}
                      	--background-focused-opacity:1;
                      	--background-focused: var(--ion-color-primary-shade);
                      '
            ↓Event1 [ngx.components.UIControlEvent-1684930399677]: 
              ↓RootPage [ngx.components.UIDynamicAction-1684930399680]: 
                beanData: |
                  '{
                   "ionBean": "RootPageAction",
                   "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                   "data": "script:this.navParams.data.forwardData"
                  }'
                comment: '{i: this[''navParams''][''get''](''i'') != undefined ? this[''navParams''][''get''](''i''): '':i'', formId: this[''navParams''][''get''](''formId'') != undefined ? this[''navParams''][''get''](''formId''): '':formId''}'
            ↓Attr [ngx.components.UIAttribute-1684930399683]: 
              attrName: role
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:button
            ↓Attr1 [ngx.components.UIAttribute-1684930399686]: 
              attrName: tabindex
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:0
            ↓Label [ngx.components.UIDynamicElement-1684930399689]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1684930399692]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'sendAnotherResponse' | translate
          ↓FormatLayout [ngx.components.UIDynamicAttr-1684930399695]: 
            beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
            comment: FormatLayout
            tagName: div
          ↓attr1 [ngx.components.UIAttribute-1684930936925]: 
            attrName: '*ngIf'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:this.local.anonymous == true
      ↓GridCol2 [ngx.components.UIDynamicElement-1684930399701]: 
        beanData: |
          '{
           "ionBean": "GridCol",
           "SizeLg": "plain:2",
           "SizeMd": "plain:1",
           "SizeXl": "plain:4"
          }'
        tagName: ion-col
↓Footer [ngx.components.UIDynamicElement-1684922014293]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓ToolBar [ngx.components.UIDynamicElement-1684922014296]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓Tag2 [ngx.components.UIElement-1684922014299]: 
      isEnabled: false
      tagName: ion-tabs
      ↓Tag [ngx.components.UIElement-1684922014302]: 
        tagName: ion-tab-bar
        ↓Directive2 [ngx.components.UIControlDirective-1684922014305]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages[this.local.currentIndex].enabledButtons && this.local.pages[this.local.currentIndex].positionButtons == 'tab' && this.local.currentIndex > 0
          ↓Tag [ngx.components.UIElement-1684922014308]: 
            tagName: ion-tab-button
            ↓Icon [ngx.components.UIDynamicElement-1684922014311]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:arrow-back-outline"}'
              tagName: ion-icon
            ↓Label [ngx.components.UIDynamicElement-1684922014314]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1684922014317]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:previous
              ↓Attr [ngx.components.UIAttribute-1684922014320]: 
                attrName: '*ngIf'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:this.isThereANextPage != undefined 
            ↓Event [ngx.components.UIControlEvent-1684922014323]: 
              ↓goBackward [ngx.components.UICustomAction-1684922014326]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		page["local"]["currentIndex"] = page.getPreviousPageIndex();
                        		let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                        		let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                        		let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                        		history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                        		page.setTitleRGAA();
                        		resolve();
                        '
            ↓Attr1 [ngx.components.UIAttribute-1684922014329]: 
              attrName: '[style.background]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'unset'
        ↓Style [ngx.components.UIStyle-1684922014332]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'overflow-x: scroll;
                  '
        ↓Directive3 [ngx.components.UIControlDirective-1684922014335]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages[this.local.currentIndex].enabledTab
          ↓Directive [ngx.components.UIControlDirective-1684922014338]: 
            directiveIndexName: index
            directiveItemName: item
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.pages
            ↓Tag [ngx.components.UIElement-1684922014341]: 
              tagName: ion-tab-button
              ↓Icon [ngx.components.UIDynamicElement-1684922014344]: 
                beanData: '{"ionBean":"Icon","IconName":"script:item.iconName != undefined ? item.iconName : ''book-outline''"}'
                tagName: ion-icon
              ↓Label [ngx.components.UIDynamicElement-1684922014347]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1684922014350]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:item.name
              ↓Attr [ngx.components.UIAttribute-1684922014353]: 
                attrName: '[selected]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:index == this.local.currentIndex
              ↓Event [ngx.components.UIControlEvent-1684922014356]: 
                ↓If [ngx.components.UIDynamicAction-1684922014359]: 
                  beanData: '{"ionBean":"IfAction","condition":"script:index > this.local.currentIndex"}'
                  ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1684922014362]: 
                    beanData: '{"ionBean":"InvokeAction"}'
                    stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                    ↓indexPage [ngx.components.UIControlVariable-1684922014365]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.currentIndex
                    ↓pages [ngx.components.UIControlVariable-1684922014368]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.pages
                    ↓doAll [ngx.components.UIControlVariable-1684922014371]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:false
                    ↓CustomAction [ngx.components.UICustomAction-1684922014374]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '		if(vars.next){
                              		    page["local"]["currentIndex"] = vars.nextIndex;
                              		    page["myContent1"].scrollToTop();
                              		    let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                              			let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                              			let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                              			history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                              			page.moveFocus();
                              			page.setTitleRGAA();
                              		}
                              		
                              		resolve();
                              '
                      ↓next [ngx.components.UIControlVariable-1684922014377]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:parent.out.nextPage
                      ↓nextIndex [ngx.components.UIControlVariable-1684922014380]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:index
                ↓If1 [ngx.components.UIDynamicAction-1684922014383]: 
                  beanData: '{"ionBean":"IfAction","condition":"script:index < this.local.currentIndex"}'
                  ↓CustomAction [ngx.components.UICustomAction-1684922014386]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		if(vars.next){
                            		    page["local"]["currentIndex"] = vars.nextIndex;
                            		    page["myContent1"].scrollToTop();
                            		    let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                            			let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                            			let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                            			history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                            			page.moveFocus();
                            			page.setTitleRGAA();
                            		}
                            		
                            		resolve();
                            '
                    ↓next [ngx.components.UIControlVariable-1684922014389]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:true
                    ↓nextIndex [ngx.components.UIControlVariable-1684922014392]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:index
              ↓Attr1 [ngx.components.UIAttribute-1684922014395]: 
                attrName: '*ngIf'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:this.local.pages[index].included
              ↓Attr2 [ngx.components.UIAttribute-1684922014398]: 
                attrName: '[style.background]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'unset'
        ↓Directive1 [ngx.components.UIControlDirective-1684922014401]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages[this.local.currentIndex].enabledButtons && this.local.pages[this.local.currentIndex].positionButtons == 'tab'
          ↓Tag [ngx.components.UIElement-1684922014404]: 
            tagName: ion-tab-button
            ↓Icon [ngx.components.UIDynamicElement-1684922014407]: 
              beanData: '{"ionBean":"Icon","IconName":"script:this.isThereANextPage() ? ''arrow-forward-outline'' : ''send-outline''"}'
              tagName: ion-icon
            ↓Label [ngx.components.UIDynamicElement-1684922014410]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1684922014413]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:this.isThereANextPage() == true  ? translate.instant(''next'') : translate.instant(''send'')'
              ↓Attr [ngx.components.UIAttribute-1684922014416]: 
                attrName: '*ngIf'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:this.isThereANextPage != undefined 
            ↓Event [ngx.components.UIControlEvent-1684922014419]: 
              ↓IfElse [ngx.components.UIDynamicIf-1684922014422]: 
                beanData: '{"ionBean":"IfElseAction","condition":"script:this.isThereANextPage()"}'
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1684922014425]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                  ↓indexPage [ngx.components.UIControlVariable-1684922014428]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.local.currentIndex
                  ↓pages [ngx.components.UIControlVariable-1684922014431]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.local.pages
                  ↓doAll [ngx.components.UIControlVariable-1684922014434]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:false
                  ↓CustomAction [ngx.components.UICustomAction-1684922014437]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		if(vars.next){
                            		    page["local"]["currentIndex"] = page.getNextPageIndex();
                            		    page["myContent1"].scrollToTop();
                            		    let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                            			let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                            			let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                            			history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                            			page.moveFocus();
                            			page.setTitleRGAA();
                            		}
                            		
                            		resolve();
                            '
                    ↓next [ngx.components.UIControlVariable-1684922014440]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:parent.out.nextPage
                ↓Else_Handler [ngx.components.UIActionElseEvent-1684922014443]: 
                  ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1684922014446]: 
                    beanData: '{"ionBean":"InvokeAction"}'
                    stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                    ↓CustomAction [ngx.components.UICustomAction-1684922014449]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '		let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i"; 
                              		let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                              		let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                              		history.pushState({page: 0, formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                              		resolve();
                              '
            ↓Attr1 [ngx.components.UIAttribute-1684922014452]: 
              attrName: '[style.background]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'unset'
        ↓Attr1 [ngx.components.UIAttribute-1684922014455]: 
          attrName: '[style.--background]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.headerColor
        ↓Attr2 [ngx.components.UIAttribute-1684922014458]: 
          attrName: '[style.--color]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.policyColor
      ↓Attr [ngx.components.UIAttribute-1684922014461]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.pages != undefined && (this.local.pages[this.local.currentIndex].enabledTab || (this.local.pages[this.local.currentIndex].enabledButtons && this.local.pages[this.local.currentIndex].positionButtons == 'tab') ) 
      ↓Style [ngx.components.UIStyle-1684922014464]: 
        isEnabled: false
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                'overflow-x: scroll;
                '
    ↓UseSharedComponent [ngx.components.UIUseShared-1684922014467]: 
      sharedcomponent: C8Oforms.MobileApplication.Application.SharedTabs
  ↓Attr [ngx.components.UIAttribute-1684922014470]: 
    attrName: '*ngIf'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:this.local.pages != undefined && this.local.currentIndex != undefined && this.local.pages[this.local.currentIndex].positionTab != undefined && this.local.pages[this.local.currentIndex].positionTab == 'bottom'
↓PageEvent [ngx.components.UIPageEvent-1684922157356]: 
  ↓CustomAction [ngx.components.UICustomAction-1684922227673]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		page.local.name = (page as any).navParams.data.name;
            		page.local.anonymous = (page as any).navParams.data.anonymous;
            		page.local.published = (page as any).navParams.data.published;
            		if(page.local.anonymous){
            			resolve(false);
            		}
            		else{
            			setTimeout(()=>{	
            				resolve(true);
            			},2000);
            		}
            
    ↓If [ngx.components.UIDynamicAction-1684930345413]: 
      beanData: '{"ionBean":"IfAction"}'
      tagName: If
      ↓RootPage [ngx.components.UIDynamicAction-1684922271028]: 
        beanData: |
          '{
           "ionBean": "RootPageAction",
           "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
           "data": "script:this.navParams.data.forwardData"
          }'
        tagName: RootPage