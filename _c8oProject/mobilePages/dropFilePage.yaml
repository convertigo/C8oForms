scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	public fileSelected = false;
        	public idSession = (new Date).getTime();
        	public files = [];
        	public idFiles ="";
        	public multiple: boolean = false;
        	public idItem;
        	public name;
        	public max_size;
        	public accept;
        	public import = false;
        	public pwa;
        	public barcode;
        	public id;
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		//this.idFiles = this.global["id"];
        		//this.multiple = this.global["multiple"];
        		//this.idItem = this.global["__tempITEMID"];
        		//this.name = this.global["__tempITEMNAME"];
        		this.max_size = this.navParams.data["max_size"];
        		this.local["barcoderesult"] = null;
        		
        		if(this.max_size != null && this.max_size != ""){
        			this.local.i18maxSize = {size: this.max_size};
        		}
        		if(this.navParams.data["import"] != undefined){
        			this.accept = ".c8oforms";
        		}
        		else{
        			this.accept = "file";
        		}
        		/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	async post() :Promise<any>{
                for(let file of this.files){
                    let type = (file.type == undefined || file.type == "") ? "application/octet-stream":file.type;
                    await this.router.c8o.callJson("fs://c8oformstemp.put_attachment",
                            "docid",''temp_''+this.idSession,
                            "name",file.name,
                            "content_type", type,
                            "content", file)
                            .async();
                }
        	}
        	
        	public FileConvertSize(aSize){
        	    
        	    aSize = Math.abs(parseInt(aSize, 10));
        	    var def = [[1, ''octets''], [1024, ''ko''], [1024*1024, ''Mo''], [1024*1024*1024, ''Go''], [1024*1024*1024*1024, ''To'']];
        	    for(var i=0; i < def.length; i++){
        	        if(aSize < def[i][0]) return (aSize/((def[i-1][0]) as any)).toFixed(2)+'' ''+def[i-1][1];
        	    }
        	    
        	}
        	    
            async importAttachment(idForm, name, b64): Promise<any>{
                let b64Data = b64.split('','');
                if(b64Data.length == 2){
                    let matches = /data:(.*);base64/.exec(b64Data[0]);
                    let  contentType = (matches !== null) ? matches[1] : "image/jpeg";
                    try{
                        await this.c8o.callJson("fs://c8oforms_fs.put_attachment", 
                            "docid", idForm, "name", name, "content_type", contentType, "content", b64Data[1]).async();
                    }
                    catch(e){
                        console.log("Can not add attachment named " + name + " to id " + idForm);
                    }
                }
            };
        
        	public async showToast(msgKey, var1){
        		let msgFiles= "";
        		try{
        			if(var1.length > 1){
        				msgFiles = var1.join(", ");
        			}
        			else{
        				msgFiles = var1[0];
        			}
        		}
        		//slient error
        		catch(e){
        			
        		}
        		let msg:any = await new Promise((resolve)=>{this.translate.get(msgKey, {size: this.max_size != undefined ? this.max_size: 5, listFiles: msgFiles}).subscribe((res)=>{resolve(res)})})
        		let toastController = this.getInstance(ToastController);
        		(await toastController.create({
        		    message: msg,
        		    position: ''bottom'',
        			cssClass: ''toastWarn'',
        			buttons:[
        				{
        		          text: this.translate.instant("close"),
        		          role: ''cancel''
        		    	}
        			]
        		  })).present();
        	}
        	/*End_c8o_PageFunction*/
        '
segment: path-to-dropfilepage
title: Title for dropFilePage
↓Header [ngx.components.UIDynamicElement-1658759478559]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓ToolBar [ngx.components.UIDynamicElement-1658759478565]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓BarTitle [ngx.components.UIDynamicElement-1658759478574]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓ImageConvertigo [ngx.components.UIDynamicElement-1658759478577]: 
        beanData: '{"ionBean":"Image","url":"script:''assets\/images\/svg\/logo\/logo_convertigo_blue.svg''"}'
        isEnabled: false
        selfClose: true
        tagName: img
        ↓Style [ngx.components.UIStyle-1658759478580]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  	margin-left:0.5em;
                  
      ↓Span [ngx.components.UIDynamicElement-1658759760300]: 
        beanData: '{"ionBean":"SpanTag"}'
        isEnabled: false
        tagName: span
        ↓Text [ngx.components.UIText-1658759478583]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:No Code Studio
        ↓Style1 [ngx.components.UIStyle-1658759478586]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '  font-size: 14px;
                    font-weight: 600;
                    font-style: normal;
                    font-stretch: normal;
                    line-height: normal;
                    letter-spacing: normal;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    	background: linear-gradient(0.25turn, #0cbbe7, #ff8206);
                  	background-clip: text;
                  	-webkit-text-fill-color: transparent;
                  	
                  '
      ↓ImageConvertigo2 [ngx.components.UIDynamicElement-1658938359288]: 
        beanData: '{"ionBean":"Image","url":"script:''assets\/images\/svg\/logo\/logo_convertigo_no_code_studio.svg''"}'
        selfClose: true
        tagName: img
        ↓Style [ngx.components.UIStyle-1658938359291]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  	/*margin-left:0.5em;
                  	margin-right:0.5em;*/
                  
      ↓Span1 [ngx.components.UIDynamicElement-1658759768483]: 
        beanData: '{"ionBean":"SpanTag"}'
        tagName: span
        ↓Text1 [ngx.components.UIText-1658759735290]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:insertFile
        ↓Style [ngx.components.UIStyle-1658759833315]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'font-size: 14px;
                  '
      ↓Span2 [ngx.components.UIDynamicElement-1658760580378]: 
        beanData: '{"ionBean":"SpanTag"}'
        tagName: span
        ↓Text1 [ngx.components.UIText-1658760580381]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:' | ' + ('max_size_file' | translate:this.local.i18maxSize)
        ↓Style [ngx.components.UIStyle-1658760580384]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'font-size: 14px;
                  '
        ↓Attr [ngx.components.UIAttribute-1658760588759]: 
          attrName: '*ngIf'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:this.local.i18maxSize != undefined
    ↓ButtonSetRight [ngx.components.UIDynamicElement-1658759478589]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
      tagName: ion-buttons
      ↓Button [ngx.components.UIDynamicElement-1658759478592]: 
        beanData: '{"ionBean":"Button"}'
        tagName: ion-button
        ↓Icon [ngx.components.UIDynamicElement-1658759478595]: 
          beanData: '{"ionBean":"Icon","IconName":"plain:close-outline"}'
          tagName: ion-icon
        ↓Event [ngx.components.UIControlEvent-1658759478598]: 
          ↓CloseModal [ngx.components.UIDynamicAction-1658759605250]: 
            beanData: '{"ionBean":"CloseModalAction"}'
↓Content [ngx.components.UIDynamicElement-1550680694160]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓Div [ngx.components.UIDynamicElement-1550843557848]: 
    beanData: '{"ionBean":"DivTag"}'
    tagName: div
    ↓Event [ngx.components.UIControlEvent-1550842982420]: 
      attrName: (dragover)
      eventName: (dragover)
      ↓allowDrop [ngx.components.UICustomAction-1550842982423]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                		    event.preventDefault();
                		    if (event.dataTransfer.types) {
                		        for (var i = 0; i < event.dataTransfer.types.length; i++) {
                		            if (event.dataTransfer.types[i] == "Files") {
                		                if(this.multiple || this.files.length == 0){
                		                   
                		                    document.getElementById("__C8oCOntent").classList.add("shadow2");
                		                }
                		                else{
                		                    resolve(false);
                		                    return false;   
                		                }
                		            }
                		        }
                		    }
                		resolve();
                
    ↓Event1 [ngx.components.UIControlEvent-1550842982426]: 
      attrName: (drop)
      eventName: (drop)
      ↓drop [ngx.components.UICustomAction-1550842982429]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '		    if(this.navParams.data["import"] == true){
                		        event.preventDefault();
                		        console.log(event["dataTransfer"]);
                		        console.log(event["dataTransfer"].types);
                		        console.log(event["dataTransfer"].files);
                		        document.getElementById("__C8oCOntent").classList.remove("shadow2");
                                
                		        if(event["dataTransfer"].files != undefined){
                		            for (let item of event["dataTransfer"].files){
                		                if(item.name.endsWith(".c8oforms")){
                		                    (this as any).files.push(item);
                		                }
                		            }
                		        }
                		    }
                		    else{
                				const authorized_sizeMB = (this as any).max_size != undefined ? +(this as any).max_size : 5;
                				const authorized_size = authorized_sizeMB * 1000000;
                		        event.preventDefault();
                	            document.getElementById("__C8oCOntent").classList.remove("shadow2");
                	            if((this as any).multiple || (this as any).files.length == 0){
                	                var refusedSize = [];
                					if(event["dataTransfer"].files != undefined){
                		            	for (let file of event["dataTransfer"].files){
                							if(file.size <= authorized_size){
                								(this as any).files.push(file);
                							}
                							else{
                								refusedSize.push(file.name);
                							}
                						}
                					}	
                					if(refusedSize.length > 0){
                						this.showToast("redused_file_max_size", refusedSize);
                					}
                	            }
                	            else{
                	                return;
                	            }
                		    }
                
                		    
                		resolve();
                '
    ↓Attr [ngx.components.UIAttribute-1550843281343]: 
      attrName: id
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:__C8oCOntent
    ↓Style [ngx.components.UIStyle-1550743943953]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'height:100%;
              position: relative;
              '
    ↓Event2 [ngx.components.UIControlEvent-1550843824568]: 
      attrName: (dragleave)
      eventName: (dragleave)
      ↓dragleave [ngx.components.UICustomAction-1550843824571]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                		    document.getElementById("__C8oCOntent").classList.remove("shadow2");
                
                
    ↓DivListFiles [ngx.components.UIDynamicElement-1658766335180]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓ListContainer [ngx.components.UIDynamicElement-1658766341252]: 
        beanData: '{"ionBean":"List"}'
        tagName: ion-list
        ↓Directive [ngx.components.UIControlDirective-1658766341255]: 
          directiveIndexName: index
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:this.files
          ↓ListItem [ngx.components.UIDynamicElement-1658766341258]: 
            beanData: '{"ionBean":"ListItem"}'
            tagName: ion-item
            ↓Icon [ngx.components.UIDynamicElement-1658766341261]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:document"}'
              tagName: ion-icon
            ↓Label [ngx.components.UIDynamicElement-1658766863478]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text1 [ngx.components.UIText-1658766341267]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: source:{"filter":"Iteration","project":"C8Oforms","input":"item1658766341255.name"}
              ↓Style [ngx.components.UIStyle-1658766898930]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        //--color	//Color of the label
                        margin-left:3px;
                        '
            ↓Note [ngx.components.UIDynamicElement-1658766413004]: 
              beanData: '{"ionBean":"Note"}'
              tagName: ion-note
              ↓Text1 [ngx.components.UIText-1658766341276]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: source:{"filter":"Iteration","project":"C8Oforms","input":"FileConvertSize(item1658766341255.size)"}
              ↓Style [ngx.components.UIStyle-1658766806409]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        //--color	//Color of the note
                        margin-top:auto;
                        margin-bottom:auto;
                        '
            ↓btEdit [ngx.components.UIDynamicElement-1658766341279]: 
              beanData: |
                '{
                 "ionBean": "Button",
                 "ButtonFormType": "plain:false",
                 "IonFill": "plain:clear",
                 "IonSize": "plain:small",
                 "IconSlot": "plain:end"
                }'
              tagName: ion-button
              ↓Icon [ngx.components.UIDynamicElement-1658766341282]: 
                beanData: '{"ionBean":"Icon","IconName":"plain:close"}'
                tagName: ion-icon
              ↓Event [ngx.components.UIControlEvent-1658766341288]: 
                ↓CustomAction [ngx.components.UICustomAction-1658766341291]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		this.files.splice(vars.i, 1);
                          		resolve();
                          
                  ↓i [ngx.components.UIControlVariable-1658766341294]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:i
              ↓Style [ngx.components.UIStyle-1663767306878]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        	--color:var(--ion-color-dark)
                        '
    ↓DivimportOrDropFiles [ngx.components.UIDynamicElement-1658765639752]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓Div [ngx.components.UIDynamicElement-1658765639755]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Directive [ngx.components.UIControlDirective-1658766132056]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:!this.global?.mobilePlat
          ↓H1 [ngx.components.UIDynamicElement-1658766132083]: 
            beanData: '{"ionBean":"Heading1"}'
            tagName: h1
            ↓Text [ngx.components.UIText-1658766132086]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'dragHere' | translate
            ↓FormatLayout [ngx.components.UIDynamicAttr-1658766132089]: 
              beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
              comment: FormatLayout
              tagName: div
            ↓Style [ngx.components.UIStyle-1658766132092]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'color: #aaa;
                      '
          ↓H11 [ngx.components.UIDynamicElement-1658766132095]: 
            beanData: '{"ionBean":"Heading1"}'
            tagName: h1
            ↓Text [ngx.components.UIText-1658766132098]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'or' | translate
            ↓Style [ngx.components.UIStyle-1658766132101]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'color: #aaa;
                      '
            ↓FormatLayout [ngx.components.UIDynamicAttr-1658766264727]: 
              beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
              comment: FormatLayout
              tagName: div
        ↓Div [ngx.components.UIDynamicElement-1658765639758]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Tag [ngx.components.UIElement-1658765639761]: 
            identifier: input
            selfClose: true
            tagName: input
            ↓Attr [ngx.components.UIAttribute-1658765639764]: 
              attrName: type
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:file
            ↓Attr1 [ngx.components.UIAttribute-1658765639767]: 
              attrName: id
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:file-input
            ↓Event [ngx.components.UIControlEvent-1658765639770]: 
              attrName: (change)
              eventName: (change)
              ↓CustomAction [ngx.components.UICustomAction-1658765639773]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '			// get authorize size
                        			const authorized_sizeMB = (this as any).max_size != undefined ? +(this as any).max_size : 5;
                        			const authorized_size = authorized_sizeMB * 1000000;
                        			var refusedSize = [];
                        			
                        			for(let file of event["srcElement"]["files"]){
                        				// if we are importing a .c8oforms no limit or if size ok
                        				if(page["import"] || file.size <= authorized_size){
                        					(this as any).files.push(file);
                        				}
                        				else{
                        					refusedSize.push(file.name);
                        				}
                        			}
                        			// in case of files too big show an error toast
                        			if(refusedSize.length > 0){
                        				page.showToast("redused_file_max_size", refusedSize);
                        			}
                        			resolve();
                        '
            ↓Attr2 [ngx.components.UIAttribute-1658765639776]: 
              attrName: '[attr.accept]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.accept
            ↓Attr3 [ngx.components.UIAttribute-1658840660053]: 
              attrName: '[attr.multiple]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.multiple ? true : null'
          ↓Style [ngx.components.UIStyle-1658765639779]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	input{
                    		visibility: hidden;
                    	}
                    '
        ↓Button [ngx.components.UIDynamicElement-1658765639782]: 
          beanData: '{"ionBean":"Button"}'
          tagName: ion-button
          ↓Label [ngx.components.UIDynamicElement-1658765639785]: 
            beanData: '{"ionBean":"Label"}'
            tagName: ion-label
            ↓Text [ngx.components.UIText-1658765639788]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:selectFileComp
          ↓Event [ngx.components.UIControlEvent-1658765639791]: 
            ↓emulateClickOnInput [ngx.components.UICustomAction-1658765639794]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		document.getElementById("file-input").click()
                      		resolve();
                      
          ↓Icon [ngx.components.UIDynamicElement-1658765639797]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IconName": "plain:folder-outline",
               "IconSlot": "plain:end"
              }'
            tagName: ion-icon
          ↓Style [ngx.components.UIStyle-1663767347045]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    	--color:var(--ion-color-btLight)
                    '
        ↓Style [ngx.components.UIStyle-1658765639800]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'display: inline-block;
                  '
        ↓FormatLayout [ngx.components.UIDynamicAttr-1658767433138]: 
          beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
          comment: FormatLayout
          tagName: div
      ↓Style1 [ngx.components.UIStyle-1658765639803]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                'display: flex;
                align-items: center;
                justify-content: center;
                '
      ↓Attr [ngx.components.UIAttribute-1658841069820]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.multiple || this.files.length == 0
    ↓Div1 [ngx.components.UIDynamicElement-1658764442153]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓Style [ngx.components.UIStyle-1658764442156]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '	position: absolute;
                	bottom:0;
                	right: 0;
                	color: #aaa;
                '
      ↓Text [ngx.components.UIText-1658764442165]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'copie' | translate
      ↓Attr [ngx.components.UIAttribute-1658764600403]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.navParams?.data?.import != true
↓Footer [ngx.components.UIDynamicElement-1550740387799]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓Attr [ngx.components.UIAttribute-1550743176042]: 
    attrName: 
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:shadow
  ↓ToolBar [ngx.components.UIDynamicElement-1658764693470]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓Div [ngx.components.UIDynamicElement-1658765222129]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓ButtonSet [ngx.components.UIDynamicElement-1658764693472]: 
        beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:start"}'
        tagName: ion-buttons
        ↓ButtonImport [ngx.components.UIDynamicElement-1658764714718]: 
          beanData: '{"ionBean":"Button"}'
          tagName: ion-button
          ↓Style [ngx.components.UIStyle-1658764714721]: 
            isEnabled: false
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	border-radius: 34px;
                    	background-color: #ff8206;
                    	color:white;
                     	font-size: 14px;
                       	line-height: 1.79;
                      	letter-spacing: normal;
                      	text-align: center;
                      	&:hover {
                    		color:white !important;
                    		background-color: #333333 !important;
                    	}
                    '
          ↓Text [ngx.components.UIText-1658764714724]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'import' | translate
          ↓Event [ngx.components.UIControlEvent-1658764714727]: 
            ↓postLocal [ngx.components.UICustomAction-1658764714730]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '		    if(page.import){
                      		        for(let elem of page.files){
                      		            try{
                      		                const reader = new FileReader();
                      	                    // This fires after the blob has been read/loaded.
                      	                    reader.addEventListener(''loadend'', (e) => {
                      	                       let text = e.srcElement["result"];
                      	                       let form = JSON.parse(text);
                      	                       delete form._id;
                      	                       delete form._attachments;
                      	                       delete form.creator;
                      							// remove collabs and shared people
                      							form["collabs"] = [];
                      							form["collabsResponse"] = [];
                      							form["shared"] = [];
                      							form["c8oGrp"] = {};
                      							form["creator"] = page.global.settings["~c8oAcl"];
                      	                       
                      	                       form._id = ""+new Date().getTime();
                      	                       if(form.c8o_view_type_published_form != undefined){
                      	                           delete form.c8o_view_type_published_form;
                      	                       }
                      	                       form.c8o_view_type_drafts_form = true;
                      	                       if(form.wallpaper && form.wallpaper.enabled == true && form.wallpaper.type && form.wallpaper.type != "color" && form.wallpaper.b64 === undefined){
                      	                           form.wallpaper.enabled = false;
                      	                       }
                      	                       if(form.thumbnail && form.thumbnail.enabled == true && form.thumbnail.type && form.thumbnail.type != "color" && form.thumbnail.b64 === undefined){
                                                     form.thumbnail.enabled = false;
                                                 }
                      	                       page.c8o.callJsonObject("fs://c8oforms_fs.post", form)
                      	                       .then((res)=>{
                      	                           new Promise(async (resolve1, reject1)=>{
                      	                               try{
                      	                                   if(res["id"] && form.wallpaper && form.wallpaper.enabled == true && form.wallpaper.b64)
                      	                                       await page.importAttachment(res["id"], "wallpaper", form.wallpaper.b64);
                      	                               }
                      	                               catch(e){
                      	                                   page.c8o.log.error("pageImportFile error: ", e);
                      	                               }
                      	                               try{
                      	                                   if(res["id"] && form.thumbnail && form.thumbnail.enabled == true && form.thumbnail.b64)
                      	                                       await page.importAttachment(res["id"], "thumbnail", form.thumbnail.b64);
                          	                           }
                                                         catch(e){
                                                             page.c8o.log.error("pageImportFile error: ", e);
                                                         }
                      	                               resolve1();
                      	                           })
                      	                           .then(()=>{
                      	                               resolve();
                      	                            })
                      	                            .catch(()=>{
                      	                                resolve();
                      	                            });
                      	                           return null;
                      	                       })
                      	                       .fail((err)=>{
                      	                           page.c8o.log.debug("pageImportFile error: ", err);
                      	                       })
                      	                       
                      	                     });
                      	                     reader.readAsText(elem);
                      		            }
                      		            catch(e){
                      		                page.c8o.log.debug("pageImportFile error: ", e);
                      		            }
                      		            
                      		        }
                      		    }
                      		    else if (page.pwa){
                                      this.global["pwafile"] = page.files.slice(0);
                                          
                                  }
                      		    else if (page.barcode){
                      		        page.global["barcoderesult"] = page.files.slice(0);
                      		    }
                      		    else{
                      		        page.global[page.id][page.idItem] = this.global[page.id][page.idItem].concat(page.files.slice(0));    
                      		    }
                      		    resolve();
                      '
              ↓If [ngx.components.UIDynamicAction-1658764714733]: 
                beanData: '{"ionBean":"IfAction","condition":"script:this.files.length > 0"}'
                ↓PublishEvent [ngx.components.UIDynamicAction-1658764714736]: 
                  beanData: |
                    '{
                     "ionBean": "PublishEventAction",
                     "topic": "plain:updateRed",
                     "data": "script:this.name"
                    }'
              ↓CloseModal [ngx.components.UIDynamicAction-1658764714739]: 
                beanData: '{"ionBean":"CloseModalAction"}'
          ↓Style1 [ngx.components.UIStyle-1658764756086]: 
            isEnabled: false
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the button
                    //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the button when pressed
                    //--background-focused	//Background of the button when focused with the tab key
                    //--background-focused-opacity	//Opacity of the button when focused with the tab key
                    //--background-hover	//Background of the button on hover
                    //--background-hover-opacity	//Opacity of the background on hover
                    //--border-color	//Border color of the button
                    //--border-radius	//Border radius of the button
                    //--border-style	//Border style of the button
                    //--border-width	//Border width of the button
                    //--box-shadow	//Box shadow of the button
                    //--color	//Text color of the button
                    //--color-activated	//Text color of the button when pressed
                    //--color-focused	//Text color of the button when focused with the tab key
                    //--color-hover	//Text color of the button when hover
                    //--opacity	//Opacity of the button
                    //--padding-bottom	//Bottom padding of the button
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                    //--padding-top	//Top padding of the button
                    //--ripple-color	//Color of the button ripple effect
                    //--transition	//Transition of the button
                    '
          ↓Style2 [ngx.components.UIStyle-1663767393338]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    	--color:var(--ion-color-btLight)
                    '
        ↓ButtonCancel [ngx.components.UIDynamicElement-1658764714742]: 
          beanData: '{"ionBean":"Button"}'
          tagName: ion-button
          ↓Style [ngx.components.UIStyle-1658764714745]: 
            isEnabled: false
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	border-radius: 34px;
                    	background-color: #ff8206;
                    	color:white;
                     	font-size: 14px;
                       	line-height: 1.79;
                      	letter-spacing: normal;
                      	text-align: center;
                    }
                    
                    .class1571672702219:hover {
                    	color:white !important;
                    	background-color: #333333 !important;
                    '
          ↓Event [ngx.components.UIControlEvent-1658764714748]: 
            ↓CloseModal [ngx.components.UIDynamicAction-1658764714751]: 
              beanData: '{"ionBean":"CloseModalAction"}'
          ↓Text [ngx.components.UIText-1658764714754]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'Cancel' | translate
          ↓Style1 [ngx.components.UIStyle-1663767395737]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    	--color:var(--ion-color-btLight)
                    '
      ↓Style [ngx.components.UIStyle-1658765055311]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the toolbar
                //--border-color	//Color of the toolbar border
                //--border-style	//Style of the toolbar border
                //--border-width	//Width of the toolbar border
                //--color	//Color of the toolbar text
                //--min-height	//Minimum height of the toolbar
                //--opacity	//Opacity of the toolbar background
                //--padding-bottom	//Bottom padding of the toolbar
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the toolbar
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the toolbar
                //--padding-top	//Top padding of the toolbar
                display: flex;
                align-items: center;
                justify-content: center;
                '