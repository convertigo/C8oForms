comment: Form Visualisator
menu: C8Oforms.MobileApplication.Application.Menu
scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        import { Content,ToastController } from ''ionic-angular'';
        
        //import { Observable, Subject } from ''rxjs'';
        import {compressAccurately, dataURLtoFile} from ''image-conversion'';
        
        import { delay } from ''rxjs/operators'';
        import { of, zip } from ''rxjs'';
        
        import { Observable } from ''rxjs/observable'';
        import ''rxjs/add/observable/zip'';
        import { map } from ''rxjs/operators/map'';
        
        
        import { Input, EventEmitter, Output } from ''@angular/core'';
        
        import ''rxjs/add/observable/zip'';
        import { indexationPage }                                                                       from ''../indexationPage/indexationpage'';
        
        //Used by conditional
        interface ValFieldObject{
            str: string;
            source: boolean;
            type: string;
            arr: Array<any>;
        }
        interface FieldObject {
            type: string;
            subject: string;
            operator: string;
            val1: ValFieldObject;
            val2: ValFieldObject;
        
        }
        interface FormObject {
            type: string;
            subject: string;
            operator: string;
            attribute: string;
        
        }
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	
            public formsList: Array<object> = [];
            public formsSubmit = {};
        	public actions = {};
            public link;
            public enabled = false;
            public results = {};
            public form;
            public epoch: string;
            public allfield = "";
            private el: HTMLElement;
            public edit: boolean = false;
            public redList = [];
            public formSubmittedStr = "";
            public submitFormStr = "";
            public sendFormStr = ""
            public idFiles; 
            public cpt = 0;
            public cptDelete = 0;
            public loading;
            public creating;
            public functionsById = {};
        	public previousAndPostFunctions = {};
        	public functionsExecById = {};
        	public shaById = {};
        	//public imageCompression = require("browser-image-compression");
            
            
            /*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		window["this"] = this;
        		this.local.tagName = "div";
                this.local.tagId = "id";
        		this.local.doing = {};
        		this.local.updating = {};
        		this.local.filters_elems = {};
        		this.local.__reservedDone = {};
                this.global[''__viewindeok'']= null;
                this.global["__viewerTotal"] = 0;
                this.global["__viewerarr"] = [];
                this.global[''__C8O_TODELETE''] = [];
                this.cpt = 0;
                this.epoch = (new Date()).getTime() + "";
                translate.get(''allfield'').subscribe((res: string) => {
                 this.allfield = res;
                });
                this.idFiles = "files_" + this.epoch;
                this.global[this.idFiles] = [];
                this.local.multipleField = {radio_group: true, checkbox_group: true, checkbox: true, location: true, grid: true};
                this.local.simpleField = {date: true, select: true, datetime: true, time: true, radio: true, text: true, barcode: true, slider: true, business_logic: true};
                this.local.fileField = {file: true};
                this.local.camSignField = {img: true, signature:true};
        
                this.global[this.global.id] = [];
                
                this.local.multipleFieldGoToPage = {radio_group: true, checkbox_group: true, checkbox: true, select: true, radio: true};
                this.local.simpleFieldGoToPage = {date: true, datetime: true, time: true, text: true, barcode: true, slider: true};
                this.local.fileFieldGoToPage = {file: true};
                this.local.camSignFieldGoToPage = {img: true, signature:true};
        		this.local.pickerOptionsDelete = (params) =>{
        			return {
        				buttons: [
        					{
        						text: this.translate.instant("clear"),
        						handler: ()=> { 
        							params.model[''value''] = "";
        							this.actionBeans.CTS1596618928274(
        								this,
        								{},
        								{
        									item:params.item,
        									line: params.line,
        									child: params.child,
        									canExec:params.canExec == undefined ? true : params.canExec,
        									j: params.j
        								},
        								null
        							);
        							this.actionBeans.CTS1609767736560(
        								this,
        								{},
        								{
        									item: params.item
        								},
        								null
        							)
        						}
        					}
        				]
        			};
        		}
        		this.local.selectFilter = {};
                /*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	public updateGridValues(event, item){
        		if(document.getElementById(item.id).getElementsByClassName("justTocheckExistingLoading").length == 0){
        			// if grids is''nt showing overlay
        			let page = this;
        			if(
        				page.local.techGrid != undefined
        				&& page.local.techGrid[item.name] != undefined
        				&& page["formsSubmit"][item.name]!= undefined
        				&& page["formsSubmit"][item.name].value != undefined 
        				&& (
        					typeof page["formsSubmit"][item.name].value != "object" 
        					|| (
        						Object.keys(page["formsSubmit"][item.name].value) != undefined
        						&& Object.keys(page["formsSubmit"][item.name].value).length > 0
        						)
        					)
        				&& page.local.sourceValue != undefined
        				&& page.local.sourceValue[item.name] != undefined
        			){
        				// if grid''s value returns row_selected
        				if(item.config.returned_value === "row_selected" || item.config.returned_value === "cell_selected"){
        					let founded = false;
        					//itterate over grid to retrive selected row 
        					event.event.api.forEachNode((node, rowIndex)=>{
        						// if based on __rowValue
        						if(node.data != undefined && JSON.stringify(node.data) ==  JSON.stringify(page.local.techGrid[item.name].data)){
        							//ensure that node is visible
        							event.event.api.ensureNodeVisible(node);
        							// if returned value is row (so selectable item is the row)
        							if(item.config.returned_value === "row_selected"){
        								//select the node
        								node.setSelected(true);
        								// set that we founded element so we won''t remove element from responses
        								founded = true;
        							}
        							// if returned value is cell (so selectable item is the cell)
        							else if(item.config.returned_value === "cell_selected"){
        								//we founded the node, now searching for cell
        								window["grid"]= event.event.api;
        								window["page"] = page;
        								for(let i in node.data){
        									// since __rowValue is not visible, and so is not available to select in case of cell_selected settings ignore it
        									if(i != "__rowValue"){
        										let currentCell = node.data[i];
        										//since there are diffrents type of cell we will search according to its formating
        										// in case of simple string cell 
        										if(typeof currentCell == "string"){
        											if(currentCell == page["formsSubmit"][item.name].value){
        												// founded value
        												/**
        													When data has been reloaded into grid, columns ids thakes a wrong value.
        													we are obliged to empty colDefs and set them again
        													see: https://github.com/ag-grid/ag-grid/issues/2889
        												 */
        												event.event.api.setColumnDefs([]);
        												event.event.api.setColumnDefs(page.local.sourceValue[item.name]["colDef"]);
        												// set focused cell
        												event.event.api.setFocusedCell(rowIndex, i);
        												// set that we founded element so we won''t remove element from responses
        												founded = true;
        												break;
        											}
        										}
        										// in case of object cell
        										else if(typeof currentCell == "object"){
        											// if value field exists its value is choosen 
        											if(currentCell.value != undefined && currentCell.value == page["formsSubmit"][item.name].value){
        												// founded value
        												/**
        													When data has been reloaded into grid, columns ids thakes a wrong value.
        													we are obliged to empty colDefs and set them again
        													see: https://github.com/ag-grid/ag-grid/issues/2889
        												 */
        												event.event.api.setColumnDefs([]);
        												event.event.api.setColumnDefs(page.local.sourceValue[item.name]["colDef"]);
        												// set focused cell
        												event.event.api.setFocusedCell(rowIndex, i);
        												// set that we founded element so we won''t remove element from responses
        												founded = true;
        												break;
        											}
        											// if not, displayValue is choosen
        											else if(currentCell.value == undefined && currentCell.displayValue == page["formsSubmit"][item.name].value){
        												// founded value
        												/**
        													When data has been reloaded into grid, columns ids thakes a wrong value.
        													we are obliged to empty colDefs and set them again
        													see: https://github.com/ag-grid/ag-grid/issues/2889
        												 */
        												event.event.api.setColumnDefs([]);
        												event.event.api.setColumnDefs(page.local.sourceValue[item.name]["colDef"]);
        												// set focused cell
        												event.event.api.setFocusedCell(rowIndex, i);
        												// set that we founded element so we won''t remove element from responses
        												founded = true;
        												break;
        											}
        										}
        									}								
        								}
        							}
        							//founded = true;
        							
        						}
        					})
        					if(!founded){
        						page["formsSubmit"][item.name].value = {};
        					}
        				}							
        			}
        			else{
        				// if grids is showing overlay: do nothing
        			}
        		}
        			
        	}
        	public AllDbReplicated(){
        		try{ 
        			let status;
        			//first search for all db if one is not replicated yet
        			for(let index in this.global.waitFSBaseStatus){
        				let current = this.global.waitFSBaseStatus[index];
        				if(current.init == false){
        					status = "red";
        					break;
        				}
        			}
        			// then if all are replicated search if some indexations are missing
        			if(status != "red") {
        				for(let index in this.global.waitFSBaseStatus){
        					let current = this.global.waitFSBaseStatus[index];
        					for(let indexY in current.indexed){
        						let currentY = current.indexed[indexY];
        						if(currentY == false){
        							status = "btLight";
        							break;
        						}
        					}
        				}
        			}
        			if(status == undefined){
        				status = "green";
        			}
        			return status;
        			
        		}
        		catch(e){
        			return "red";
        		}
        	}
        	getFsStatus(){
        		let doing = {db:{status: "", finished: false, statusComputed: false, "dateFormatedLastUpdate": "unknown"}, indexing:{status: "", finished: false}};
        		let finished = true;
        		let total = 0;
        		let currentC = 0;
        		let totalI = 0;
        		let currentI = 0;
        		let dateFormatedLastUpdate = "";
        		for(let i in this.global.waitFSBaseStatus){
        			let current = this.global.waitFSBaseStatus[i];
        			dateFormatedLastUpdate  = current.dateFormatedLastUpdate;
        			if(current.progress != undefined){
        				doing.db.statusComputed = true;
        				total += current.progress.total;
        				currentC += current.progress.current;
        				if(this.local.animated != true){
        					if(this.btStatus != undefined){
        						this.local.animated = true;
        						this.btStatus.nativeElement.classList.add("animate__animated");
        			            this.btStatus.nativeElement.classList.add("animate__heartBeat");
        						this.btStatus.nativeElement.classList.add("animate__infinite");
        						this.btStatus.nativeElement.classList.add("animate__slower");
        					}
        				} 
                            /*setTimeout(() => {
        	                    item.nativeElement.classList.remove("animate__animated");
        	                    item.nativeElement.classList.remove("animate__shakeX");
        	                }, 1000);*/
        			}
        			if(current.indexed != undefined){
        				totalI += Object.keys(current.indexed).length;
        				currentI = Object.keys(current.indexed).filter((x)=>{ return current.indexed[x] == true}).length;
        			}
        			
        			if(finished && !current.init){
        				finished = false;
        			}
        		}
        		
        		doing.indexing.finished = currentI == totalI;
        		if(doing.indexing.finished){
        			doing.indexing.status = this.translate.instant("data_optim_finished");
        		}
        		else{
        			doing.indexing.status = this.translate.instant("data_optim") + "... ("+currentI + "/" + totalI+")";
        		}
        		doing.db.status = this.translate.instant("data_download") + "... ("+currentC + "/" + total+")";
        		doing.db.finished = finished;
        		doing.db.dateFormatedLastUpdate = dateFormatedLastUpdate;
        		if(finished && doing.indexing.finished){
        			doing.db.status = this.translate.instant("data_download_finished");
        			if(this.btStatus != undefined){
        				this.btStatus.nativeElement.classList.remove("animate__animated");
        	            this.btStatus.nativeElement.classList.remove("animate__heartBeat");
        				this.btStatus.nativeElement.classList.remove("animate__infinite");
        				this.btStatus.nativeElement.classList.remove("animate__slower");	
        			} 
        		}
        		
        		
        		
        		//this.ref.detectChanges()
        		return doing;
        	}
        	showModalSyncOrOptimize(){
        		/*if(this.local.modalOptimize == undefined){
        			let modalCtrl = this.getInstance(ModalController);
        			this.local.modalOptimize = modalCtrl.create(indexationPage, {  }, {enableBackdropDismiss: false, showBackdrop: false, cssClass: "modalCSV"});
        	   		this.local.modalOptimize.present();
        		}*/
        		
        	}
        	hideModalSyncOrOptimize(){
        		try{
        			setTimeout(()=>{
        				let closeMe = true;
        				for(let i in this.global.waitFSBaseStatus){
        					let base = this.global.waitFSBaseStatus[i];
        					let not_finished = false;
        					for(let k in base.indexed){
        						let e = base.indexed[k];
        						if(e != true){
        							not_finished = true;
        						}
        					}
        					if(!base.init || not_finished){
        						closeMe = false;
        					}
        				}
        				if(closeMe){
        					if(this.local.modalOptimize != undefined){
        						this.local.modalOptimize.dismiss();
        						this.local.modalOptimize = null;
        					}
        					this.ref.reattach();
        					//this.local.callEndInitC8o();
        				}
        			})
        		}
        		catch(e){
        			
        		}		
        	}
        	
        	/**  list all database that must be synchronized to allow fs view oprations*/
        	getDatabasesToSync(arrayConnector, current = this.form.formulaire){
        		for(let component of current){
        			if(component.type == "ion-card"){
        				this.getDatabasesToSync(arrayConnector, component.children);
        				//recursive call
        			}
        			else if(component.sources != undefined){
        				for(let sourceName in component.sources){
        					var source = component.sources[sourceName];
        					if(source.enabled && source.fullsync){
        						arrayConnector[source.connectorName] = true;
        					}
        				}
        			}
        		}
        	}
        	
        	startSyncDatabases(databaseObject){
        		this.local.statDB = {};
        		for(let databaseName in databaseObject){
        			
        			if(databaseObject[databaseName]){
        				
        				this.local.statDB[databaseName] = false;
        				if(this.local.promisesFS == null){
        					this.local.promisesFS = {};
        				}
        				if(this.global.waitFSBaseStatus == null){
        					this.global.waitFSBaseStatus = {};
        				}
        				this.local.promisesFS[databaseName] = new Promise(async (resolveP)=>{
        					this.c8o.log.debug("beforeCall "+ databaseName + " status");
        					if(this.global.waitFSBaseStatus[databaseName] == undefined){
        						this.global.waitFSBaseStatus[databaseName] = {init:false, progress: null, errored: false, indexed: {}}	
        					}
        					else{
        						this.global.waitFSBaseStatus[databaseName].init = false;
        						this.global.waitFSBaseStatus[databaseName].progress = null;
        						this.global.waitFSBaseStatus[databaseName].errored = false;
        						if(this.global.waitFSBaseStatus[databaseName].indexed == null){
        							this.global.waitFSBaseStatus[databaseName].indexed = {};
        						}
        					}
        					 
        					let localC8o = undefined;
        					try{
        						if(window.navigator.onLine == false){
        							localC8o = await this.c8o.callJsonObject("fs://" + databaseName + ".get", { docid: "_local/c8o" }).async();
        							this.global.waitFSBaseStatus[databaseName].init = localC8o.status == "completed";
        							if(localC8o.indexed != undefined){
        								this.global.waitFSBaseStatus[databaseName].indexed = localC8o.indexed;
        							}
        							this.global.waitFSBaseStatus[databaseName].dateFormatedLastUpdate = new Date(+localC8o.timestamp_lastUpdate).toLocaleString();
        							console.log("OFFLINE TRUE", localC8o)
        						}
        						/*localC8o = await this.c8o.callJsonObject("fs://" + databaseName + ".get", { docid: "_local/c8o" }).async();
        						this.global.waitFSBaseStatus[databaseName].init = true;
        						this.c8o.log.debug("Got a _local/c8o doc for source database : "+ databaseName + " ==> Do not display loader for this base");
        						resolveP();*/
        					}
        					catch(e){
        						this.c8o.log.debug("no _local/c8o doc for source database : "+ databaseName + " ==> This is first sync, waiting for full replication before showing form");
        						this.showModalSyncOrOptimize();
        					}
        					this.local.syncFunc1 = ()=>{
        						this.c8o.callJsonObject("fs://"+databaseName+".replicate_pull",{"continuous": true, "heartbeat": false, "timeout": false, "batch_size": 1000, "retry": true, "batches_limit": 10})
        					.then((res, parameters)=>{
        						if(window.navigator.onLine){
        							this.global.waitFSBaseStatus[databaseName].init = true;
        							this.global.waitFSBaseStatus[databaseName].errored = false;
        							if(localC8o == undefined){
        								resolveP();
        								let timestamp_lastUpdate = ""+new Date().getTime()
        								this.global.waitFSBaseStatus[databaseName].dateFormatedLastUpdate = new Date(+timestamp_lastUpdate).toLocaleString();
        								this.c8o.callJsonObject("fs://" + databaseName + ".post", {
        		                            _id: "_local/c8o",
        		                            status: "completed",
        									"timestamp_lastUpdate":timestamp_lastUpdate,
        		                            "_use_policy":"merge"
        	                       		 }).async();
        							}
        							this.c8o.log.debug("startSyncDatabases "+ databaseName + " finished");
        							
        							this.hideModalSyncOrOptimize();
        							this.ref.detectChanges();
        							this.local.statDB[databaseName] = true;
        						}
        						else{
        							this.local.fsSourcesListenerOnline = (event) => {
        								console.log("customList");
            							window.removeEventListener(''online'',this.local.fsSourcesListenerOnline)
        								this.local.syncFunc1();
        								//this.startSyncDatabases(databaseObject);
        								try{
        									this.btStatus.nativeElement.classList.remove("animate__animated");
        						            this.btStatus.nativeElement.classList.remove("animate__heartBeat");
        									this.btStatus.nativeElement.classList.remove("animate__infinite");
        									this.btStatus.nativeElement.classList.remove("animate__slower");
        									setTimeout(()=>{
        										this.btStatus.nativeElement.classList.add("animate__animated");
        							            this.btStatus.nativeElement.classList.add("animate__heartBeat");
        										this.btStatus.nativeElement.classList.add("animate__infinite");
        										this.btStatus.nativeElement.classList.add("animate__slower");
        									})
        								}
        								catch(e){
        									
        								}
        								
        								
        							}
        							window.addEventListener(''online'',this.local.fsSourcesListenerOnline );
        						}
        						
        						return null;
        					})
        					.progress((progress)=>{
        						this.c8o.log.debug("startSyncDatabases progress "+ databaseName + " progress " + progress.status);
        						this.global.waitFSBaseStatus[databaseName].progress = progress;
        						this.global.waitFSBaseStatus[databaseName].errored = false;
        						this.ref.detectChanges();
        						console.log("progress", progress);
        						if(this.global.waitFSBaseStatus[databaseName].init == true){
        							let timestamp_lastUpdate = ""+new Date().getTime()
        							this.global.waitFSBaseStatus[databaseName].dateFormatedLastUpdate = new Date(+timestamp_lastUpdate).toLocaleString();
        							this.c8o.callJsonObject("fs://" + databaseName + ".post", {
        		                            _id: "_local/c8o",
        									"timestamp_lastUpdate":timestamp_lastUpdate,
        		                            "_use_policy":"merge",
        									"_use_merge_timestamp_lastUpdate":"override"
        	                       		 }).async();
        						}
        					})
        					.fail((error)=>{
        						this.global.waitFSBaseStatus[databaseName].errored = true;
        						this.c8o.log.error("error startSyncDatabases "+ databaseName + " status");
        					})
        					}
        					this.local.syncFunc1();
        					
        				})
        				
        			}
        		}
        	}
        	
        	getSessionId(){
        		if(this.form.c8o_view_type_drafts_form){
        			return this.form._id;
        		}
        		else{
        			if(this.form._id.indexOf("anonymous") != -1){
        				return this.form.parentId;
        			}
        			else{
        				return this.form._id;
        			}
        		}
        	}
        	ngAfterViewInit(): void {
        		this.all_videoCall.changes.subscribe((r) => {
        			if(r._results.length > 0){
        				r._results.forEach((x, index)=>{
        					x._elementRef.nativeElement.style.visibility = (index == 0 ? "visible" : "hidden");
        				});
        			}
        		  });
        	}
        	
        	
        	replaceAndTranslateDate(str){
        		return this.translate.instant(str.replace(/\//g, ''_''));
        	}
        	
        	/**
        		Shows a grid overlay with its given id in arg
        	 */
        	public showGridOverlayById(id){
        		for(let grid of this["all_agGrid"][''_results'']){
        			if(grid._nativeElement.id == id+""){
        				grid.api.showLoadingOverlay();
        			}
        		}						
        	}
        	/**
        		Hide a grid overlay with its given id in arg
        	 */
        	public hideGridOverlayById(id){
        		for(let grid of this["all_agGrid"][''_results'']){
        			if(grid._nativeElement.id == id+""){
        				grid.api.hideOverlay();
        			}
        		}
        	}
        	
        	public fillFormSubmit(list, redList, formSubmit, response): void {
        		let page = this;
                page.local.subKeyD = page.local.urlParams.get("_c8o_subkey");
                page.local.subKeyD = page.local.subKeyD == null ? "," : page.local.subKeyD;
                try  {
                    for(let item of list){
                        if(item["type"] == "ion-card"){
                            redList[item["name"]] = {};
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "children":{}, "label":item["config"]["title"]["text"], "labelHtml":item["config"]["title"]["personalized"] ? item["config"]["title"]["html"] : item["config"]["title"]["text"]};                                
                            let res = response != undefined && response[item["name"]] != undefined ? response[item["name"]]["children"] : null;
                            this.fillFormSubmit(item["children"],redList[item["name"]]["children"], formSubmit[item["name"]]["children"], res);
        					//fillFormSubmit(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"], res);
                        }
                        else if(item["type"] == "text"){
        					let value: string = "";
        					// search if we have to set current value by response init
        					if(response != undefined && response[item["name"]] != undefined && response[item["name"]]["value"] != undefined){
        						value = response[item["name"]]["value"];
        					}
        					// search if value has been set by url params
        					else if(page.local.urlParams.get(item["name"]) != null){
        						value = page.local.urlParams.get(item["name"]) + "";
        					}
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                        }
        				else if(item["type"] == "location"){
                            let urlParams = page.local.urlParams.get(item["name"]);
                            let value = urlParams != null ? urlParams : response != null && response[item["name"]] != undefined && response[item["name"]]["value"] != undefined ?  response[item["name"]]["value"] : {"addr":{}, "gps":{}}; 
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                        }
                        else if(item["type"] == "checkbox"){
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                            let urlParams = page.local.urlParams.get(item["name"]);
                            let arrayUrlParams = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                            for(let child in item["children"]){
        						let selected: boolean;
        						try{
        							// search if we have to set current value by response init
        							if(response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"] != undefined && response[item["name"]]["children"][child] != undefined && response[item["name"]]["children"][child]["selected"] != undefined){
        								selected = response[item["name"]]["children"][child]["selected"];
        							}
        							// search if value has been set by url params
        							else if(arrayUrlParams.indexOf(item["children"][child].value) != -1){
        								selected = (arrayUrlParams.indexOf(item["children"][child].value) != -1) == true
        							}
        							// in this case take default value
        							if(selected == undefined){
        								selected = item["children"][child].selected;
        							}
        						}
        						catch(e){
        							console.error("catch5", e);
        							selected = false;
        						}
                                formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected, "other": item["children"][child].other});
                            }
                        }
        				else if(item.type == "grid"){
        					let value = response != undefined && response[item["name"]] != undefined  && response[item["name"]]["value"] != undefined ? response[item["name"]]["value"] : {};
        					formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
        				}
                        else if(item["type"] == "radio" || item["type"] == "select"){
        					if(response != undefined && response[item.name] != undefined){
        						
        					} 
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                            
        					// search for default values in urlParams
        					let urlParams = page.local.urlParams.get(item["name"]);
                            let indexFinded = false;
                            let defaultSelected = "";
        					if(!item.config.sourceEnabled){
        						for(let child in item["children"]){
        							let selected: boolean = false;
        							let useResponse = response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"] != undefined && response[item["name"]]["children"][child] && response[item["name"]]["children"][child]["selected"] != undefined;
        	                        try {
        	                            selected =  useResponse ? response[item["name"]]["children"][child]["selected"] : urlParams != undefined ? item["children"][child]["value"] == urlParams : item["children"][child].selected;
        	                            if(selected){
        	                                defaultSelected = item["children"][child].value;
        	                            }
        	                        }
        	                        catch(e){
        	                            console.error("catch4", e);
        	                        }
        							formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected});
        						}
        					}
        					else{
        						defaultSelected = response != undefined && response[item["name"]] != undefined && response[item["name"]]["value"] != undefined ? response[item["name"]]["value"] : "";
        						if(response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"]!= undefined){
        							formSubmit[item["name"]]["children"] = response[item["name"]]["children"];
        						}
        					}					
        					// assign value
                            formSubmit[item["name"]]["value"] = defaultSelected; 
                        }
                        else if(item["type"] == "slider" || item["type"] == "datetime" || item["type"] == "time" || item["type"] == "barcode" || item["type"] == "img" || item["type"] == "file"|| item["type"] == "signature"){
                            let urlParams = page.local.urlParams.get(item["name"]);
                            let value;	
        					let default_slider = null;
                            if(item["type"] == "slider"){
                                urlParams = (isNaN(+urlParams) == false && urlParams != "" && urlParams != null) ? +urlParams : null;
        						default_slider = item.config.defaultvalue;
                            }
        					value = (response != null && response[item["name"]] != null && response[item["name"]]["value"] != null) ? response[item["name"]]["value"] : urlParams != null ? urlParams: default_slider != null ? default_slider : ""; 
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["name"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                        }
                        else if(item["type"] == "radio_group"){
                            
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, children_label:item["children"], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                            for(let line of item.lines){
                                let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                urlParams = item.children.filter(x=> x.value == urlParams).length > 0 ? urlParams : null;
                                let value = urlParams != null ? urlParams : response == null ? "": response[item["name"]]["children"][line.title]; 
                                formSubmit[item["name"]].children[line.title]= value;
                            }
                        }
                        else if(item["type"] == "checkbox_group"){
                            formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                            for(let line of item.lines){
                                formSubmit[item["name"]].children[line.title] = [];
                                let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                let arrayUrlParams = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                                for(let child in item["children"]){
        							let selected: boolean;
        							try{
        								// search if we have to set current value by response init
        								if(response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"] != undefined && response[item["name"]]["children"][line.title] != undefined && response[item["name"]]["children"][line.title][child] != undefined && response[item["name"]]["children"][line.title][child]["selected"] != undefined){
        									selected = response[item["name"]]["children"][line.title][child]["selected"];
        								}
        								// search if value has been set by url params
        								else if(arrayUrlParams.indexOf(item["children"][child].value) != -1){
        									selected = (arrayUrlParams.indexOf(item["children"][child].value) != -1) == true
        								}
        								// in this case take default value
        								if(selected == undefined){
        									selected = item["children"][child].selected;
        								}
        							}
        							catch(e){
        								console.error("catch5", e);
        								selected = false;
        							} 
                                    formSubmit[item["name"]].children[line.title].push({"value": item["children"][child].value, "selected": selected});
                                }
                            }
                        }
                        
                };
                }
                catch(e){
                    page.c8o.log.error("An error occured while executing function fillFormSubmit into viewerPage", e);
        			console.error("An error occured while executing function fillFormSubmit into viewerPage", e);
                }
        	}
        	
        	public fillActions(list): void{
        		let page = this;
        		try  {
                    for(let item of list){
        				if(item["type"] == "business_logic"){
        						let sources: any = page["searchForSources"](item, "sources", true);
        						let findName = sources.findName;
        						let findVars = sources.findVars;
        						let ObjectThatHaveToCallFunc = sources.ObjectThatHaveToCallFunc;
        						let sha = sources.sha;
        						let variables = {};
        						this.functionsById[sha] = ()=>{
        							page["computeVariable"](findVars, variables, item);
        							// if value has changed update it and call functions
        							if(page["actions"][item["name"]]["value"] != variables["selfVar"]){ 
        								page["actions"][item["name"]]["value"] = variables["selfVar"];
        								try{
        								if(page.local["processingDataS"] == undefined){
        									page.local["processingDataS"] = {};
        								}
        								
        								if(page.local.functionsToBeCalled[item.id] != undefined){
        									if(page.local["processingDataS"][item.id] != undefined){
        										try{
        											clearTimeout(page.local["processingDataS"][item.id]);
        										}
        										catch(e){
        											console.error("catch9", e);
        										}
        									}
        									page.local["processingDataS"][item.id] = setTimeout(()=>{
        										page.local.functionsToBeCalled[item.id]
        										.forEach((id)=>{
        											page["functionsById"][id](); 
        										})
        									}, 200)
        									
        								}
        							}
        							catch(e){
        								console.error("catch10", e);
        								page.c8o.log.error("Error while trying to refresh a data source", e);
        							}
        							}
        							
        						}
        						//funcTocall();
        						this.functionsById[sha](); 
        						this.fillFunctionsIDToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, sha); //ToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, funcTocall);
        				}
        			}
        		}
        		catch(e){
        			page.c8o.log.error("An error occured while executing function fillActions into viewerPage", e);
        			console.error("An error occured while executing function fillActions into viewerPage", e);
        		}
        	}
        	
        	public fillFunctionsToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, funcTocall) : void{
        		let page = this;
        		if(ObjectThatHaveToCallFunc!= undefined && ObjectThatHaveToCallFunc.length > 0){
        			let onlyUnique = (value, index, self)=> {
        			  return self.indexOf(value) === index;
        			}
        			var unique = ObjectThatHaveToCallFunc.filter(onlyUnique);
        			unique.forEach((x)=>{
        				if(page.local.functionsToBeCalled[x] == undefined){
        						page.local.functionsToBeCalled[x] = [];
        					}
        					page.local.functionsToBeCalled[x].push(funcTocall);
        			});
        		}
        	}
        	
        	public fillFunctionsIDToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, id) : void{
        		let page = this;
        		if(ObjectThatHaveToCallFunc!= undefined && ObjectThatHaveToCallFunc.length > 0){
        			let onlyUnique = (value, index, self)=> {
        			  return self.indexOf(value) === index;
        			}
        			var unique = ObjectThatHaveToCallFunc.filter(onlyUnique);
        			unique.forEach((x)=>{
        				if(page.local.functionsToBeCalled[x] == undefined){
        						page.local.functionsToBeCalled[x] = [];
        				}
        				if(page.local.functionsToBeCalled[x].indexOf(id) == -1){
        					page.local.functionsToBeCalled[x].push(id);
        				}
        				
        			});
        		}
        	}
        	
        	public async getDdocFromBase(sources, params){
        		const page = this;
        		return await page.c8o.callJsonObject("fs://"+sources.fullSyncArgs.connectorName+".get", {docid:"_design/"+params["ddoc"]}).async();
        	}
        	
        	public async getDdocFromHttp(sources,params){
        		const page = this;
        		let headersObject = { ''Accept'': ''application/json'', ''x-convertigo-sdk'': this.c8o.sdkVersion };
                Object.assign(headersObject, this.c8o.headers);
                let headers =  this.c8o.httpInterface.getHeaders(headersObject);
        		return await page.c8o.httpPublic.get(this.c8o.endpointConvertigo +"/fullsync/" + sources.fullSyncArgs.connectorName+"/"+"_design/"+params["ddoc"], {headers: headers, withCredentials: true}).toPromise();
        	}
        	public async getAndApplyC8oformComputeKeysFunction(sources, params, variables){
        		try {
        			let page = this;
        			var commentBegin = "/*Begin_c8oformComputeKeys_function*/";
        			var commentEnd = "/*End_c8oformComputeKeys_function*/"
        			var functionName = "var c8oformComputeKeys = function";
        			var varName = "var c8oformComputeKeys = ";
        			var functionKeyWord = "function";
        			//var wait = await this.local.promisesFS[sources.fullSyncArgs.connectorName];
        			// get database status
        			let ready = false;
        			let allReady = false;
        			try{
        				ready = this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].init;
        			}
        			catch(e){
        				
        			}
        			try{
        				let countNotReady = Object.keys(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed).filter((x)=>{return this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[x] == false});
        				allReady = countNotReady.length == 0 && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].init;
        			}
        			catch(e){
        				
        			}
        			let doc;
        			let hasExecOnline = false;
        			try{
        				if(window.navigator.onLine && !allReady){
        					hasExecOnline = true;
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync isn''t finished, we will get ddoc to execute offline source over http");
        					doc = await this.getDdocFromHttp(sources, params);
        				}
        				else{
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync is finished, or we are offline, we will get ddoc to execute offline source over fullsync.get");
        					doc = await this.getDdocFromBase(sources, params);
        				}
        			}
        			catch(e){
        				try{
        					if(hasExecOnline){
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source over http, we will try in fullsync.get");
        						doc = await this.getDdocFromBase(sources, params);
        					}
        					else{
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source in fullsync.get, we will try over http");
        						doc = await this.getDdocFromHttp(sources, params);
        					}
        				}
        				catch(e){
        					page.c8o.log.error("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to to execute offline source over http and fullsync.get");
        				}
        			}
        			doc = doc["views"][params.view].map;
        			var functionStr = doc.substring(doc.indexOf(commentBegin) + commentBegin.length, doc.indexOf(commentEnd)).trim();
        			functionStr = functionStr.substring(functionStr.indexOf(varName)+varName.length);
        			var str = functionStr.substring(functionStr.indexOf(functionKeyWord)+functionKeyWord.length);
        			// get the next "{" char
        			str = str.substring(0,str.indexOf("{"));
        			// remove spaces and ()
        			str = str.trim().replace(/\s/g, '''');
        			str = str.substring(1, str.length -1);
        			var varsOrdered = str.split(",");
        			let args = [];
        			for(let vars of varsOrdered){
        				vars = vars.trim();
        				args.push(variables[vars]);
        			}
        			//@ts-ignore
        			return await eval("(async "+functionStr+").apply({...this, ...{ready: ready,allReady:allReady }},args)");
        		}
        		catch(e){
        			return {};	
        		}
        		
        	}
        	
        	public async getAndApplyC8oformPostQueryFunction(sources, params, response, type, variables){
        		try{
        			let page = this;
        			var commentBegin = "/*Begin_c8oformPostQuery_function*/";
        			var commentEnd = "/*End_c8oformPostQuery_function*/"
        			var functionName = "var c8oformPostQuery = function";
        			var varName = "var c8oformPostQuery = ";
        			let doc;
        			let hasExecOnline = false;
        			let ready = false;
        			
        			try{
        				ready = this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].init;
        			}
        			catch(e){
        				
        			}
        			try{
        				if(window.navigator.onLine && !ready){
        					hasExecOnline = true;
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync isn''t finished, we will get ddoc to execute offline source over http");
        					doc = await this.getDdocFromHttp(sources, params);
        				}
        				else{
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync is finished, or we are offline, we will get ddoc to execute offline source over fullsync.get");
        					doc = await this.getDdocFromBase(sources, params);
        				}
        			}
        			catch(e){
        				try{
        					if(hasExecOnline){
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source over http, we will try in fullsync.get");
        						doc = await this.getDdocFromBase(sources, params);
        					}
        					else{
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source in fullsync.get, we will try over http");
        						doc = await this.getDdocFromHttp(sources, params);
        					}
        				}
        				catch(e){
        					page.c8o.log.error("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to to execute offline source over http and fullsync.get");
        				}
        			}
        			doc = doc["views"][params.view].map;
        			var functionStr = doc.substring(doc.indexOf(commentBegin) + commentBegin.length, doc.indexOf(commentEnd)).trim();
        			functionStr = functionStr.substring(functionStr.indexOf(varName)+varName.length);
        			var args =[response, type, variables, params];
        			return eval("("+functionStr+").apply(this,args)");	
        		}
        		catch(e){
        			return null;
        		}
        	}
        	public async getFullsyncSources(list){
        		let page = this;
        		let resetObject = {};
        		try  {
                    for(let item of list){
        				if(item["type"] == "ion-card"){
        					this.getFullsyncSources(item["children"]);
        					
        				}
        				else if(item["config"]["sourceEnabled"] == true || item.sources){
        					//findName
        					//fullSyncArgs
        					//sha
        					let sources: any = this["searchForSources"](item, "sources", true, true);
        					let findName = sources.findName;
        					if(findName != "" && sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync){
        						if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] == null){
        							this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] = {};
        						}						
        						let localC8o = undefined;
        						try{
        							if(resetObject[sources.fullSyncArgs.connectorName] == undefined){
        								//check for reset
        								try{
        									localC8o = await this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".get", { docid: "_local/c8o" }).async();
        									//set max listener
        									page.c8o.c8oFullSync["fullSyncDatabases"][page.c8o.database.localName(sources.fullSyncArgs.connectorName)+"_device"].database.setMaxListeners(100);
        									let has_reset = await page.c8o.c8oFullSync["fullSyncDatabases"][page.c8o.database.localName(sources.fullSyncArgs.connectorName)+"_device"].checkResetBase();
        									if(has_reset){
        										page.c8o.log.debug("A fs:// source database has been reset we will reload app");
        										let toastCtrl = page.getInstance(ToastController);
        	          							let toast = toastCtrl.create({
        	          							    message: page["translate"].instant("db_reset"),
        	          							    duration: 10000,
        	          							    position: ''bottom'',
        	          								dismissOnPageChange: false,
        	          								showCloseButton: true,
        	          								closeButtonText: page["translate"].instant("restart_app_update"),
        	          								cssClass: "changeToast"
        	          							});
        										toast.onDidDismiss(() => {
        											window.location.reload();
        										});
                  							
                  								toast.present();
        										return {restart: true};
        									}
        								}
        								catch(e){
        									
        								}
        								resetObject[sources.fullSyncArgs.connectorName] = true;
        							}
        							localC8o = await this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".get", { docid: "_local/c8o" }).async();
        							if(localC8o.indexed != undefined && localC8o.indexed[sources.sha] == true){
        								if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed == undefined){
        									this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed = {};
        								}
        								this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] = true;
        								this.c8o.log.debug("Got a _local/c8o doc for source database : "+ sources.fullSyncArgs.connectorName + " and view "+sources.fullSyncArgs["ddoc"] + "/"+ sources.fullSyncArgs["view"] +" ==> Do not display loader for this base");						
        								
        							}
        							else{
        								throw new Error();
        							}
        						}
        						catch(e){
        							if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed == null){
        								this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed = {};
        							}
        							this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] = false;
        							//remove here
        							//this.showModalSyncOrOptimize();
        							this.c8o.log.debug("no _local/c8o doc for source database : "+ sources.fullSyncArgs.connectorName + " and view "+sources.fullSyncArgs["ddoc"] + "/"+ sources.fullSyncArgs["view"] +" ==> This is first sync, waiting for full replication before showing form");
        						}
        					}
        				}
        			}
        		}
        		catch(e){
        			
        		}
        	}
        	
        	public async indexFullsyncSources(list){
        		let page = this;
        		try  {
                    for(let item of list){
        				if(item["type"] == "ion-card"){
        					this.getFullsyncSources(item["children"]);
        					
        				}
        				else if(item["config"]["sourceEnabled"] == true || item.sources){
        					let sources: any = this["searchForSources"](item, "sources", true, true);
        					let findName = sources.findName;
        					if(findName != "" && sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync){
        						if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] == null){
        							this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] = {};
        						}						
        						let localC8o = undefined;
        						try{
        							localC8o = await this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".get", { docid: "_local/c8o" }).async();
        							if(localC8o.indexed != undefined && localC8o.indexed[sources.sha] == true){
        								this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] = true;
        								this.c8o.log.debug("Got a _local/c8o doc for source database : "+ sources.fullSyncArgs.connectorName + " and view "+sources.fullSyncArgs["ddoc"] + "/"+ sources.fullSyncArgs["view"] +" ==> Do not display loader for this base");
        							}
        							else{
        								throw new Error();
        							}
        						}
        						catch(e){
        							this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] = false;
        							let indexed = {[sources.sha]: false};
        							this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        	                            _id: "_local/c8o",
        	                            "_use_policy":"merge",
        								"indexed" :indexed
                           		 	})
        							this.showModalSyncOrOptimize();
        							this.c8o.log.debug("no _local/c8o doc for source database : "+ sources.fullSyncArgs.connectorName + " and view "+sources.fullSyncArgs["ddoc"] + "/"+ sources.fullSyncArgs["view"] +" ==> This is first sync, waiting for full replication before showing form");
        							let defaults = {};
        							let params = {};
        							let variables = sources.findVars;
        							defaults["ddoc"] = sources.fullSyncArgs.ddoc;
        							defaults["view"] = sources.fullSyncArgs.view;
        							// get c8oformComputeKeys
        							let computedParams = await page.getAndApplyC8oformComputeKeysFunction(sources, defaults, variables);
        							params = {...defaults, ...computedParams}
        							delete params["__live"];
        							page.c8o.callJsonObject(findName, params)
        							.then((res: any) =>{
        								if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] != undefined && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] == false){
        									this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] = true;
        									this.hideModalSyncOrOptimize();
        									let indexed = {[sources.sha]: true};
        									this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        			                            _id: "_local/c8o",
        			                            "_use_policy":"merge",
        										"indexed" :indexed
        	                       		 	})
        								}
        								return null;
        							})
        						}
        					}
        				}
        			}
        		}
        		catch(e){
        			
        		}
        	}
        
        	public fillSources(list, redList, formSubmit): Array<string>{
        		let page = this;
        		let idsToCall: Array<string> = [];
        		
        		try  {
                    for(let item of list){
                        if(item["type"] == "ion-card"){
        					let interIDs = this.fillSources(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"]);
                            idsToCall = idsToCall.concat(interIDs);
                        }
        				else if((item["config"]["sourceEnabled"] == true  && item["type"] == "select" ) || (item.sources && item["type"] == "grid") ){
        					//search source name and params
        					let sources: any = page["searchForSources"](item, "sources", true);
        					let findName = sources.findName;
        					// if there is a sequence founded
        					if(findName != ""){
        						let findVars = sources.findVars;
        						// find objects that have to call this functions
        						let ObjectThatHaveToCallFunc = sources.ObjectThatHaveToCallFunc;
        						// unique hash for this sequence with thoses parameters
        						let sha = sources.sha;
        						/* disabled factorization because of variables params
        						// in case of object select we can''t factorize beacause of filter param
        						if(item.type == "select"){
        							sha +=item.id;
        						}*/
        						let Osha = ""+sha;
        						sha +=item.id;
        						
        						this.shaById[item.id] = sha;
        						
        						let postFunc, failFunc, prevFunc: any;
        						if(this.functionsExecById[sha] == undefined){
        							this.functionsExecById[sha] = {};
        						}
        						// if this sequence withn thoses parameters has not been founded yet add it
        						if(this.functionsById[sha] == undefined){ 
        							idsToCall.push(sha);
        							this.functionsById[sha] =  async ()=>{
        								// cancel all others executions for the same component
        								for(let key in this.functionsById[sha]){
        									this.functionsById[sha][key] = false;
        								}
        								// register myself as executing
        								let idExec = new Date().getTime() + "_" +(Math.random()+"").substring(2);
        								this.functionsExecById[sha][idExec] = true;
        								
        								// check for cancel order
        								if(this.functionsExecById[sha][idExec] == false){
        									page.c8o.log.debug("Canceling execution of "+ item.name+" source ("+idExec+") because a newer was launched");
        									return;
        								}
        								// call preload functions
        								//...
        								this.previousAndPostFunctions[sha].previous.forEach((func)=>{
        									func();
        								})
        								if(this.functionsExecById[sha][idExec] == false){
        									page.c8o.log.debug("Canceling execution of "+ item.name+" source ("+idExec+") because a newer was launched");
        									return;
        								}
        								let variables = {};
        								page["computeVariable"](findVars, variables, item);
        								/*
        								let params = {[C8oLocalCache.PARAM]: new C8oLocalCache(Priority.LOCAL, 3.154e+10)}
        								page.c8o.callJsonObject(findName, {...variables, ...params})
        								*/
        								let hadAPrepare = false;
        								// create empty object for params
        								let params = {};
        								// enable execution by default
        								let canExec = true;
        								// set default requestable
        								let requestable = "" + findName;
        								// if this is a fullsync / hybrid source
        								if(sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync){
        									// set default params
        									let defaults = {};
        									defaults["ddoc"] = sources.fullSyncArgs.ddoc;
        									defaults["view"] = sources.fullSyncArgs.view;
        									defaults["__live"] = sources.fullSyncArgs.__live;
        									if(this.functionsExecById[sha][idExec] == false){
        										page.c8o.log.debug("Canceling execution of "+ item.name+" source ("+idExec+") because a newer was launched");
        										return;
        									}
        									// compute parameters for exec
        									let computedParams = await page.getAndApplyC8oformComputeKeysFunction(sources, defaults, variables);
        									// override defaults parameters with computed ones
        									params = {...defaults, ...computedParams}
        									// if disable __live is asked
        									if(params["__live"] == false){
        										delete params["__live"];
        									}
        									else{
        										// push live request to an array to be able to stop them when leaving the form
        										if(this.local.liveToCancel == null){
        											this.local.liveToCancel = []
        										}
        										this.local.liveToCancel.push(params["__live"]);
        									}
        									// override requestable
        									if(params["__requestable"] != undefined && params["requestable"] != ""){
        										requestable = ""+ params["__requestable"];
        									}
        									// or set default value if no override where asked
        									else{
        										requestable = "" + findName;
        									}
        									// if ts an hybird request ( fs + callJSON)
        									if(params["__prepare"] != undefined){
        										// if view is not indexed
        										if(this.local.alreadyDoing == undefined){
        											this.local.alreadyDoing = {};
        										}
        										if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] != undefined && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] == false && this.local.alreadyDoing[Osha] != true){
        											this.local.alreadyDoing[Osha] = true;
        											var params2 = {...defaults, ...params["__prepare"]["__params"]};
        											// we wont launch this request as live since its only for indexing
        											delete params2["__live"];
        											// if requestable is set use it if not use default one
        											let requestable2 = params["__prepare"]["__requestable"] != undefined ?  params["__prepare"]["__requestable"] : ("" + findName);
        											this.local.promisesFS[sources.fullSyncArgs.connectorName]
        											.then((res)=>{
        												// call fs request to index
        												page.c8o.callJsonObject(requestable2, params2)
        												.then((res)=>{
        													// store result
        													this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] = true;
        													let indexed = {[Osha]: true};
        													this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        							                            _id: "_local/c8o",
        							                            "_use_policy":"merge",
        														"indexed" :indexed
        					                       		 	})
        													return null;
        												})
        												.fail((err)=>{
        													console.log("NEW FAIL", err);
        												})
        											})
        										}
        										
        									}
        									// check if requestable must be executed
        									if(params["__execute"] != undefined && params["__execute"] == false){
        										canExec = false;
        									}
        									else{
        										canExec = true;
        									}
        									if(params["__prepare"] != undefined){
        										hadAPrepare = true;
        									}
        									delete params["__prepare"];																
        								}
        								// if this is a "classic" source
        								else{
        									params = variables;
        								}
        								
        								try{
        									let res;
        									if(canExec){
        										if(this.functionsExecById[sha][idExec] == false){
        											page.c8o.log.debug("Canceling execution of "+ item.name+" source ("+idExec+") because a newer was launched");
        											return;
        										}
        										try{
        											res = await page.c8o.callJsonObject(requestable, params).async();
        										}
        										catch(e){
        											console.error("catttttchhhhhh", e);
        										}
        									}						
        									//if fullsync
        									if(sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync){
        										if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] != undefined && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] == false && requestable.indexOf("fs://") == 0 && hadAPrepare == false){
        											this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] = true;
        											this.hideModalSyncOrOptimize();
        											let indexed = {[Osha]: true};
        											this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        					                            _id: "_local/c8o",
        					                            "_use_policy":"merge",
        												"indexed" :indexed
        			                       		 	})
        										}
        										try {
        											if(this.functionsExecById[sha][idExec] == false){
        												page.c8o.log.debug("Canceling execution of "+ item.name+" source ("+idExec+") because a newer was launched");
        												return;
        											}
        											res = await page.getAndApplyC8oformPostQueryFunction(sources, params, res, item["type"], variables)
        										}
        										catch(e){
        											
        										}
        									}
        									if(this.functionsExecById[sha][idExec] == false){
        										page.c8o.log.debug("Canceling execution of "+ item.name+" source ("+idExec+") because a newer was launched");
        										return;
        									}
        									// call post load functions
        									//...
        									if(res._c8o_update != false){
        										console.log("we will update", {res: res, requestable: requestable,params: params });
        										this.previousAndPostFunctions[sha].post.forEach((func)=>{
        											let res2 = {...res};
        											func(res2);  
        										})
        									}
        									else{
        										console.log("we won''t update", {res: res, requestable: requestable,params: params });
        									}
        									if(res._c8o_forceLoader != undefined && res._c8o_forceLoader != false){
        										console.log("we will force loader status to " + res._c8o_forceLoader);
        										
        										try{
        											res._c8o_forceLoader = +res._c8o_forceLoader;
        											if(res._c8o_forceLoader != "NaN"){
        												// do
        												switch(res._c8o_forceLoader){
        													case 0:
        														page.c8o.log.debug("Forcing loader to display");
        														if(item.type == "grid"){
        															page.c8o.log.debug("grid loader detected, showing it");
        															page.local.updating[item.id] = 0;
        															setTimeout(()=>{
        																this.showGridOverlayById(item.id);
        																console.log("show overlay");
        																page.ref.detectChanges();
        															})
        															page.ref.detectChanges();
        														}
        														else if(item.type == "select"){
        															page.c8o.log.debug("select loader detected, showing it");
        															page.local.updating[item.id] = 0;
        															page.ref.detectChanges();
        														}
        													break;
        													case 1:
        														page.c8o.log.debug("Forcing loader dismiss");
        														if(item.type == "grid"){
        															page.c8o.log.debug("grid loader detected, dismiss it");
        															page.local.updating[item.id] = 1;
        															setTimeout(()=>{
        																this.hideGridOverlayById(item.id);
        																page.ref.detectChanges();
        															})
        															page.ref.detectChanges();
        														}
        														else if(item.type == "select"){
        															page.c8o.log.debug("select loader detected, dismiss it");
        															page.local.updating[item.id] = 1;
        															page.ref.detectChanges();
        														}
        													break;
        													case 1:
        														page.c8o.log.debug("Forcing loader dismiss due to error");
        														if(item.type == "grid"){
        															page.c8o.log.debug("grid loader detected, dismiss it and display error message");
        															page.local.updating[item.id] = 2;
        															setTimeout(()=>{
        																this.hideGridOverlayById(item.id);
        																page.ref.detectChanges();
        															})
        															page.ref.detectChanges();
        														}
        														else if(item.type == "select"){
        															page.c8o.log.debug("select loader detected, dismiss it and display error message");
        															page.local.updating[item.id] = 2;
        															page.ref.detectChanges();
        														}
        													break;
        												}
        												
        											}
        											else{
        												page.c8o.log.debug("_c8o_forceLoader has an invalid value: "+ res._c8o_forceLoader);
        											}
        										}
        										catch(e){
        											page.c8o.log.debug("An error occured while running _c8o_forceLoader"+ e);
        										}
        										
        										
        									}
        									else{
        										console.log("we won''t update", {res: res, requestable: requestable,params: params });
        									}
        									page.ref.detectChanges();
        									
        								}
        								catch(err){
        									if(sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync){
        										if(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] != undefined && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] == false){
        											this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] = true;
        											this.hideModalSyncOrOptimize();
        											let indexed = {[Osha]: true};
        											this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        					                            _id: "_local/c8o",
        					                            "_use_policy":"merge",
        												"indexed" :indexed
        			                       		 	})
        										}
        									}
        									if(this.functionsExecById[sha][idExec] == false){
        										page.c8o.log.debug("Canceling execution of "+ item.name+" source ("+idExec+") because a newer was launched");
        										return;
        									}
        									// call fail functions
        									//...
        									this.previousAndPostFunctions[sha].fail.forEach((func)=>{
        										let err2 = {...err};
        										func(err2);
        									})
        								}
        								
        							}
        							// has we now parameters, we not each object that have to call this sequence do it once
        							this.fillFunctionsIDToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, sha);
        						}
        						if(item.type == "grid"){
        							if(page.local.sourceValue[item.name] == undefined){
        								page.local.sourceValue[item.name] = {colDef:[], data:[]};
        							}							
        							// preload function for grid
        							prevFunc = ()=>{
        								page.local.sourceValue[item.name]["data"] = [];
        								
        								setTimeout(()=>{
        									this.showGridOverlayById(item.id);
        									console.log("show overlay");
        								})
        								page.local.updating[item.id] = 0;
        								//page.local.sourceValue[item.name]["data"] = [];
        							}
        							// postload function for grid
        							postFunc = (res)=>{
        								// find Colomn definitions
        									if(res.data != undefined && res.data.length > 0){
        										let colDef = 
        										Object.keys(res.data[0]).map((y)=>{
        											let current = res.data[0];
        											let obj = {"editable": false};
        											if(y != "__rowValue"){
        												// if cell is a simple string
        												if(typeof(res.data[0][y]) === "string"){
        													obj["field"] = y;
        													return obj;
        												}
        												// if it''s a more complex object
        												else{
        													// if cell has a specified name then take it
        													if(current[y].displayName != undefined){
        														obj["field"] = current[y].displayName;
        													}		
        													// else take key name
        													else{
        														obj["field"] = y;
        													}
        													// if cell has an html type 
        													if(current[y].type == "html"){
        														// create a cell renderer to have innerHTML
        														let HTMLCellRenderer = function HTMLCellRenderer () {};
        														HTMLCellRenderer.prototype.init = function(params) {
        															try{
        																this.eGui = document.createElement(''div'');	
        																// if displayValue field exists display it, if not display field value																		
        																this.eGui.innerHTML = params.value.displayValue != undefined ? params.value.displayValue : params.value.value;
        															}
        															catch(e){
        																this.eGui.innerHTML = "<p>ko<p>"
        															}
        															
        														}
        														HTMLCellRenderer.prototype.getGui = function() {
        														    return this.eGui;
        														};
        														HTMLCellRenderer.prototype.refresh = function(params) {
        															this.eGui.innerHTML = params.valueFormatted ? params.valueFormatted : params.value;
        															return true;
        														}
        														obj["cellRenderer"] = HTMLCellRenderer;
        													}
        													// if cell has a text type or no type
        													else{
        														let TextCellRenderer = function TextCellRenderer () {};
        														TextCellRenderer.prototype.init = function(params) {
        															try{
        																this.eGui = document.createElement(''div'');
        																let p = document.createElement(''p'');
        																p.textContent = params.value.displayValue != undefined ? params.value.displayValue : params.value.value;
        																p.style.whiteSpace = "normal"
        																this.eGui.appendChild(p);
        																// if displayValue field exists display it, if not display field value																		
        																//this.eGui.innerHTML = params.value.displayValue != undefined ? params.value.displayValue : params.value.value;
        															}
        															catch(e){
        																this.eGui.innerHTML = "<p>ko<p>"
        															}
        															
        														}
        														TextCellRenderer.prototype.getGui = function() {
        														    return this.eGui;
        														};
        														TextCellRenderer.prototype.refresh = function(params) {
        															this.eGui.innerHTML = params.valueFormatted ? params.valueFormatted : params.value;
        															return true;
        														}
        														obj["cellRenderer"] = TextCellRenderer;
        													}
        													// define default sorting field
        													let sortingField = "displayValue";
        													if(current[y].sortingField == "displayValue" || current[y].sortingField == "" || current[y].sortingField == undefined){
        														sortingField = "displayValue";
        													}
        													else{
        														sortingField = current[y].sortingField;
        													}
        													if(current[y].sortingType == "text" || current[y].sortingType == "string" || current[y].sortingType == "default" || current[y].sortingType == "" || current[y].sortingType == undefined ){
        														obj["comparator"] = (valueA, valueB, nodeA, nodeB, isInverted) => (""+ (valueA[sortingField])).localeCompare(""+(valueB[sortingField]))
        													}
        													else if(current[y].sortingType == "number" ){
        														obj["comparator"] = (valueA, valueB, nodeA, nodeB, isInverted) => (+valueA[sortingField]) - (+valueB[sortingField])
        													}
        													return obj;
        												}
        											}
        											// hide __rowValue
        											else{
        												obj["hide"] = true;
        												obj["field"] = y;
        												return obj;  
        											}
        										});
        										// foreach row
        										let data = res.data.map((x)=>{
        											var row = {...x};
        											// foreach col
        											Object.keys(row).forEach((col)=>{
        												// if col is not a simple string
        												if(typeof(row[col]) !== "string"){
        													// if there is a displayColName
        													if(row[col].displayName != undefined){
        														// rename the col name
        														row[row[col].displayName] = row[col];
        														// save the technical name
        														row[row[col].displayName].technicalName = col;
        														// delete the usless col;
        														delete row[col];
        													}
        													else{
        														// save the technical name (same as its name)
        														row[col].technicalName = col;
        													}
        												}
        											});
        											return row;
        										})
        										page.local.updating[item.id] = 1;
        										this.hideGridOverlayById(item.id);
        										page.local.sourceValue[item.name]["colDef"] = colDef;
        										page.local.sourceValue[item.name]["data"] = data;
        										// in case of user wants all data to be returned to response
        										if(item.config.returned_value === "all_the_data"){
        											formSubmit[item.name]["value"] = res.data;
        										}
        										page.ref.detectChanges();
        									}
        									else {
        										page.local.sourceValue[item.name]["data"] = [];
        									}
        							}
        							// fail function for grid
        							failFunc = (err)=>{
        								this.hideGridOverlayById(item.id);
                                        page.c8o.log.error("an error occured while trying to laod source for a grid", err);	
        								page.local.updating[item.id] = 2;
        							}							
        						}
        	                    else if(item["type"] == "select"){
        							// preload function for select
        							prevFunc = ()=>{
        								page.local.updating[item.id] = 0;
        							}
        							// postload function for select
        							postFunc = (res)=>{
        								let defaultSelected ="";
        								// find Colomn definitions
        								let urlParams = page.local.urlParams.get(item["name"]);
        								if(formSubmit[item.name] != undefined && formSubmit[item.name].children != undefined && formSubmit[item.name].children.length > 0){
        									const tmp = formSubmit[item.name].children.filter(x=> x.selected == true);
        									if(tmp != undefined && tmp.length > 0){
        										urlParams = tmp[0].value
        									}
        								}
        								formSubmit[item["name"]]["children"] = [];
                                        
        								let array = [];
        								if(!(res["value"] == undefined)){
        					                if(typeof(res["value"]) == "string"){
        					                    array.push(res["value"]);
        					                }
        					                else{
        										if(res.value instanceof Array){
        											for(let child of res["value"]){
        						                        array.push(child);
        						                    }
        										}
        										else{
        											array.push(res["value"]);
        										}
        					                    
        					                }
        					            }
                                        for(let child of array){
        									let selected2 = false;
                                            if(child == urlParams){
                                                defaultSelected = child;
        										selected2 = true;
                                            }
        									else if(child != undefined && urlParams != undefined && child.value != undefined && JSON.stringify(child.value) == JSON.stringify(urlParams)){
        										defaultSelected = child.value;
        										selected2 = true;
        									}
        									//let childToAgreragte = typeof(child) == "string" ? child: child.value != undefined ? child.value: child.displayValue;
        									let objectToPush = {selected: selected2};
        									if(typeof(child) == "string"){
        										// simple value mode
        										objectToPush["value"] = child;
        									}
        									else {
        										if(child.displayValue != undefined){
        											objectToPush["displayValue"] = child.displayValue;
        										}
        										if(child.value != undefined){
        											objectToPush["value"] = child.value;
        										}
        									}
                                            formSubmit[item["name"]]["children"].push(objectToPush);
                                        }
                                        formSubmit[item["name"]]["value"] = defaultSelected;
        								page.local.sourceValue[item.name] = array;
        								page.local.updating[item.id] = 1;
        								
        								formSubmit[item["name"]]["value"] = defaultSelected;
        							}
        							// fail function for grid
        							failFunc = (err)=>{
                                        page.c8o.log.error("an error occured while trying to laod source for a select", err);	
        								page.local.updating[item.id] = 2;
        							}
        	                    }
        						// register previous and post functions for this sequence
        						if(this.previousAndPostFunctions[sha] == undefined){
        							this.previousAndPostFunctions[sha] = {previous: [], post: [], fail:[]}
        						}
        						this.previousAndPostFunctions[sha].previous.push(prevFunc);
        						this.previousAndPostFunctions[sha].post.push(postFunc);
        						this.previousAndPostFunctions[sha].fail.push(failFunc);   
        					}  
        				} 
                	}
                }
                catch(e){
                    page.c8o.log.error("An error occured while executing function fillFormSubmit into vieworPage", e);
                }
        		return idsToCall; 
        	}
        	
        	public searchForSources (item, path, isSource = true, noEval = false) : Object {
        		let findName = "";
                let findVars = {};
        		let isFullsync = false;
        		let fullSyncArgs = {};
        		let ObjectThatHaveToCallFunc = [];
                for(let w in item[path]){
        	        if(item[path][w].enabled == true){
        				for (const [key, value] of (<any>Object).entries(item[path][w]["vars"])) {
        					findVars[key] = value;  
        				}
        				if(item[path][w]["fullsync"] == true){
        					fullSyncArgs["isFullsync"] = true;
        					findName = "fs://" + item[path][w]["connectorName"] + ".view";
        					let viewName = item[path][w]["viewName"].split("/");
        					fullSyncArgs["ddoc"] = viewName[0];
        					fullSyncArgs["view"] = viewName[1];
        					fullSyncArgs["__live"] = w;
        					fullSyncArgs["connectorName"] = item[path][w]["connectorName"]
        					fullSyncArgs["viewName"] =  item[path][w]["viewName"];
        				}
        				else{
        					findName = w;
        				}
        	        }
                }
        		const sha = sha256(JSON.stringify(findName) + JSON.stringify(findVars));
        		if(noEval){
        			for(let va in findVars){
        				findVars[va] = "";
        			}
        		}
        		else{
        			const regex = /([$$$$START]{2}\w+)(((?![END]{1}\w+[$$]{2}).)*)([END]{1}\w+[$$]{2})|[$$]{2}\w+[$$]{2}/gm
        			for(let va in findVars){
        				if(isSource && va == "forms_filter"){
        					findVars[va] = "page.local.filters_elems[''"+item.id+"''] == undefined ? '''': page.local.filters_elems[''"+item.id+"'']";
        					ObjectThatHaveToCallFunc.push(item.id);
        				}
        				else{
        					if(findVars[va].from_attachment != undefined && findVars[va].from_attachment == true){
        						
        					}
        					else{
        						let str = findVars[va].str;
        		                if(str == undefined){
        		                    str = "";
        		                }
        		                //var arrayFound = str.match(regex);
        						if(!(findVars[va]["type"] != undefined && findVars[va]["type"] == "ts")){
        		                	str = "`" + str.replace(/`/g, "\\`") + "`";
        						}
        						
        						let match;
        						let cpt = 0;
        						while((match = regex.exec(str)) != null) {
        							cpt++;
        							let elem = match[0];
        							let iStart = str.indexOf(elem);
        			                let iEnd = iStart + elem.length;
        							// if its a non preview $$
        							if(match[4] == undefined){
        			                    let id = elem.substring(2, elem.length -2);
        								ObjectThatHaveToCallFunc.push(id);
        			                    let path = this.getPathById(+id);
        								let currentVal = "";
        								if(findVars[va]["type"] != undefined && findVars[va]["type"] == "ts"){
        									currentVal = path;
        								}
        								else{
        									 currentVal = "`+("+ path +" instanceof Object ? JSON.stringify("+path+") : "+path+")+`"
        								}
        								str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
        							}
        							// if its a preview $$START END$$
        							else{
        								let id = match[1].substring("$$START".length);
        								ObjectThatHaveToCallFunc.push(id);
        								let defElem = this.getItemById(id);
        								let valElem = this.getPathById(+id)
        								let meta = JSON.parse(match[2]);
        								if(defElem != null){
        									str = str.substring(0, iStart) + "`+this.getBadge("+id+", "+ JSON.stringify(defElem)+", " +valElem+", "+ JSON.stringify(meta)+", false, ''html'')+`" + str.substring(iEnd);
        								}
        							}
        						}
        		                
        		                findVars[va] = str;
        		                
        							
        					}
        					
        				}
        			}
        		}
        		return {findVars: findVars, findName: findName, ObjectThatHaveToCallFunc: ObjectThatHaveToCallFunc, sha: sha, fullSyncArgs: fullSyncArgs }
        	}
        	
        	public getBadge(id, defElem, valElem, meta = null, newBadge = false, targetType){
        		let elem: any = defElem;
        		let str = "";
        		if(elem != null && targetType == "html"){
        			switch(elem.type){
        				case "radio_group":
        				case "checkbox_group":
        					let cptOpts = 0;
        					let childrenLength = elem.children.length;
        					let linesLength = elem.lines.length;
        					let colwidth = 100 / (childrenLength + 1);
        					
        					str += `<${this.local.tagName} ${this.local.tagId}="${elem.id}" class="tooltip mceNonEditable" style="width:100%"  contenteditable="false">
        						<span class="tooltiptext" contenteditable="false" >${name}</span>`;
        					if(newBadge){
        						str += `<table style="border-collapse: collapse; width: 99.1426%; height: 72px;" border="1" class="mceNonEditable">`
        					}
        					else{
        						str += `<table`;
        						if(meta != null){
        							for(let elem in meta){
        								str += ` ${elem}="${meta[elem]}"`;
        							}
        						}
        						str += `>`;
        					}
        					str += `
        						<tbody>
        						<tr style="height: 18px;">
        						<th style="text-align: center; height: 18px; width: 99.2498%;" colspan="${childrenLength+1}"><span id="1234"><!--START1123-->${elem.config.html}<!--END1123--></span></th>
        						</tr>
        						<tr style="height: 18px;">
        						<td style="width: ${colwidth}%; height: 18px;">
        						&nbsp;
        						</td>
        						`;
        					for(let i = 0; i < childrenLength; i++){
        						str += `
        						<td style="width: ${colwidth}%; height: 18px; text-align: center;">
        						${elem.children[i].value}
        						</td>
        						`
        						
        					}
        					str += `</tr>`;
        					
        					for(let line of elem.lines){
        						str += `<tr style="height: 18px;">
        								<td style="width: ${colwidth}%; height: 18px; text-align: center; "><span>${line.title}</span></td>`
        						for(let i = 0; i < childrenLength; i++){
        							str += `<td style="width: ${colwidth}%; height: 18px; text-align: center;"><span>${elem.type == "checkbox_group" ? valElem[line.title][i].selected ? "✔️" : "&nbsp;" : valElem[line.title] == elem.children[i].value ? "✔️" : "&nbsp;" }</span></td>`
        						}
        						str += `</tr>`;
        						cptOpts ++;
        	
        					}
        					str += `</tbody>
        							</table>
        							</${this.local.tagName}>`;
        					if(newBadge){
        						str += `<p></p>`;
        					}
        				break;
        				case "radio":
        				case "checkbox":
        				case "select":
        					let childrenLength2 = elem.children.length;
        					str += `<${this.local.tagName} ${this.local.tagId}="${elem.id}" class="tooltip mceNonEditable" style="width:100%">
        						<span class="tooltiptext" contenteditable="false" >${name}</span>`;
        					if(newBadge){
        						str += `<table style="border-collapse: collapse; width: 99.1426%; height: 72px;" border="1" class="mceNonEditable">`;
        					}
        					else{
        						str += `<table`;
        						if(meta != null){
        							for(let elem in meta){
        								str += ` ${elem}="${meta[elem]}"`;
        							}
        						}
        						str += `>`;
        					}
        					
        					str += `<tbody>
        						<tr style="height: 18px;">
        						<th style="text-align: center; height: 18px; width: 99.2498%;" colspan="2"><span id="1234"><!--START1123-->${elem.config.html}<!--END1123--></span></th>
        						</tr>`;
        					for(let index in elem.children){
        						let child = elem.children[index];
        						str+= `<tr style="height: 18px;">
        						<td style="width: 50%; height: 18px; text-align: center;">
        						${child.value}
        						</td>
        						<td style="width: 50%; height: 18px; text-align: center;">
        						${ elem.type == "checkbox" ? valElem[index].selected ? "✔️" : "&nbsp;" : child.value == valElem ? "✔️" : "&nbsp;"}
        						</td>
        						</tr>
        						`;
        					}
        					str += `</tbody>
        						</table>
        						</${this.local.tagName}>`;
        					if(newBadge){
        						str += `<p></p>`;
        					}
        				break;
        				case "grid":
        				let length = 0;
        					str += `<${this.local.tagName} ${this.local.tagId}="${id}" class="tooltip mceNonEditable" style="width:100%"  contenteditable="false">
        						<span class="tooltiptext" contenteditable="false" >${name}</span>`;
        					if(newBadge){
        						str += `<table style="border-collapse: collapse; width: 99.1426%; height: 72px;" border="1" class="mceNonEditable">`
        					}
        					else{
        						str += `<table`;
        						if(meta != null){
        							for(let elem in meta){
        								str += ` ${elem}="${meta[elem]}"`;
        							}
        						}
        						str += `>`;
        					}
        					for(let el of this.local.sourceValue[elem.name].colDef){
        								if(el.hide != true){
        									length ++;
        								}
        							}
        					str += `
        						<tbody>
        						<tr style="height: 18px;">
        						<th style="text-align: center; height: 18px; width: 99.2498%;" colspan="${length}"><span id="1234"><!--START1123-->${elem.config.html}<!--END1123--></span></th>
        						</tr>
        						<tr style="height: 18px;">`;
        					let colsName = [];	
        					switch(elem.config.returned_value){
        						case "nothing":
        						case "":
        							for(let el of this.local.sourceValue[elem.name].colDef){
        								if(el.hide != true){
        									colsName.push(el.field);
        								}
        							}
        							
        							let width = 100 / (colsName.length != 0 ? colsName.length : 1);
        							colsName.forEach((field)=>{
        								str += `
        										<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        										${field}
        										</td>`
        							})
        							str +=`</tr>`;
        							str += `</tbody>
        									</table>
        									</${this.local.tagName}>`;
        								if(newBadge){
        									str += `<p></p>`;
        								}
        						break;
        						case "all_the_data":
        							
        							for(let el of this.local.sourceValue[elem.name].colDef){
        								if(el.hide != true){
        									colsName.push(el.field);
        								}
        							}
        							
        							width = 100 / (colsName.length != 0 ? colsName.length : 1);
        							colsName.forEach((field)=>{
        								str += `<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        										${field}
        										</td>`
        							})
        							str +=`</tr>`;
        							for(let el of this.local.sourceValue[elem.name].data){
        									str += `<tr style="height: 18px;">`;
        									for(let st of colsName){
        										let current = el[st];
        										let display = "";
        										if(current == undefined){
        											display = "";
        										}
        										else if(current.displayValue != undefined){
        											display = current.displayValue;
        										}
        										else if (current.display != undefined){
        											display = current.value;
        										}
        										else{
        											display = current;
        										}
        										str += `<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        										${display}
        										</td>`
        									}
        									str +=`</tr>`;
        								}
        								str += `</tbody>
        									</table>
        									</${this.local.tagName}>`;
        								if(newBadge){
        									str += `<p></p>`;
        								}
        							break;
        							case "row_selected":
        								//let colsName = [];
        								for(let el of this.local.sourceValue[elem.name].colDef){
        									if(el.hide != true){
        										colsName.push(el.field);
        										str += `
        											<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        											${el.field}
        											</td>`
        									}
        								}
        								width = 100 / (colsName.length != 0 ? colsName.length : 1);
        								str +=`</tr>`;
        								if(this.formsSubmit[elem.name].value != null || this.formsSubmit[elem.name].length > 0){
        									if(typeof(this.formsSubmit[elem.name].value) === "string"){
        										str += `<tr style="height: 18px;"><td colspan="${length} style="width: 100%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">${this.formsSubmit[elem.name].value}</td></tr>`;
        									}
        									else if(this.local.sourceValue[elem.name].data[0] != undefined && this.local.sourceValue[elem.name].data[0].__rowValue == undefined){
        										let prettyForUgly = {};
        										try{
        											for(let i in this.local.sourceValue[elem.name].data[0]){
        												try{
        													let sub =  this.local.sourceValue[elem.name].data[0][i];
        													prettyForUgly[sub.displayName] = sub.technicalName;
        												}
        												catch(e){
        													
        												}
        												
        											}
        										}
        										catch(e){
        											
        										}
        										str += `<tr style="height: 18px;">`;
        										for(let st of colsName){
        											let current = this.formsSubmit[elem.name].value[st];
        											if(current == undefined){
        												current = this.formsSubmit[elem.name].value[prettyForUgly[st]];
        											}
        											let display = "";
        											if(current.displayValue != undefined){
        												display = current.displayValue;
        											}
        											else if (current.display != undefined){
        												display = current.value;
        											}
        											else{
        												display = current;
        											}
        											str += `
        											<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        											${display}
        											</td>`
        										}
        										str +=`</tr>`;
        									}
        									else{
        										str += `<tr style="height: 18px;"><td colspan="${length} style="width: 100%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">${JSON.stringify(this.formsSubmit[elem.name].value)}</td></tr>`;
        									}
        								}
        								else{
        									str += `<tr style="height: 18px;"><td colspan="${length} style="width: 100%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">&nbsp;</td></tr>`;
        								}
        								str += `</tbody>
        									</table>
        									</${this.local.tagName}>`;
        								if(newBadge){
        									str += `<p></p>`;
        								}
        							break;
        							case "cell_selected":
        								for(let el of this.local.sourceValue[elem.name].colDef){
        									if(el.hide != true){
        										colsName.push(el.field);
        										str += `
        											<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        											${el.field}
        											</td>`
        									}
        								}
        								width = 100 / (colsName.length != 0 ? colsName.length : 1);
        								str +=`</tr>`;
        								str += `<tr style="height: 18px;">`;
        								str += `
        											<td colspan="${length} style="width: ${100}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        											${this.formsSubmit[elem.name].value}
        											</td>`;
        								str +=`</tr>`;
        								str += `</tbody>
        									</table>
        									</${this.local.tagName}>`;
        								if(newBadge){
        									str += `<p></p>`;
        								}
        							break;
        					}
        					
        				break;
        				default:
        				break;
        			
        			}
        		}
        		if(str != ""){
        			return str;
        		}
        		else{
        			return ''<''+ this.local.tagName +'' ''+this.local.tagId+''="''+id+''" class="styleBadge badge badge-md badge-md-convertigo" color="convertigo" contenteditable="false" style="display: inline-block;">''+name+''</''+ this.local.tagName +''>'';
        		}
        	    
        	}
        	
        	
        	
        	public fillActionsVars(list): void {
        		let page = this;
        		for(let elem of list){
        			if(elem["type"] == "business_logic"){
        				 page["actions"][elem["name"]] = {"name":elem["name"], "type": elem["type"], "value":""};
        
        			}
        		}
        	}
        	public computeVariable(findVars, variables, item, findName = null) : void {
        		let page = this;
        		let names = {};
        		if(findName != null){
        			for(let i in item.actions[findName].vars){
        				if(item.actions[findName].vars[i].html === true){
        					names
        				}
        			}
        		}
        		for(let va in findVars){
        			try{
        				if(findName != null && item.actions[findName].vars[va].html == true){
        					
        				}
        				else{
        					
        				}
        				variables[va] = eval(findVars[va]);
        				if(variables[va] == undefined || variables[va] == "undefined"){
        					delete variables[va];
        				}
        			}
        			catch(e){
        				this.c8o.log.warn("An error occured while computing variables for "+item.name+" data sources, maybe the source has still not been created");
        				delete variables[va];
        			}
        			
        		}
        	}
        	
        	public toFixed(number: any, count: number){
        		let numb: Number = +number;
        		let res = numb.toFixed(count);
        		return res;
        	}
            
            getWidthbyId(id){
                console.log(id);
                try{
                    return {''width'':''calc(98%-''+ document.getElementById(id).clientWidth+''px);''}
                }
                catch(e){
                    return {}
                }
            }
            public lo(){
        		console.log("raaaaaaaaaaaaaaaa");
        	}
            public codeIsADigit(code){
                //return /^[+-]?[0-9]\d*([\.,])?$ /g.test(code);
                return /(^[-?$[0-9]\d*([\.,]\d*)?$)/g.test(code);
            }
            getProgress(){
                if(this.global["__viewerProgress"] == undefined || this.global["__viewerTotal"] == undefined){
                    return 0
                }
                else{
                    //console.log(Number(this.global["__viewerProgress"]));
                    //console.log(Number(this.global["__viewerTotal"]));
                    return ((Number(this.global["__viewerProgress"]) / Number(this.global["__viewerTotal"])) * 100);
                }
        
            }
            getTranslate(msgTosearch :string): Promise<any>{
                return new Promise((resolve, reject)=>{
                    let translate = this.getInstance(TranslateService)
                    translate.get(msgTosearch).subscribe((res: string) => {
                        resolve(res);
                    });
                });        
            }
            showProgress(){
                this.loading = this.loadingCtrl.create({
                    spinner: ''hide'',
                    content: `
                      <div>
                        <progress-bar [progress]="''0''"></progress-bar>
                        <p>abc</p>
                      </div>`
                  });
                this.loading.present();
            }
            
            flatArray(): any{
                let arr = [];
                let cpt = 0;
                 for(let bean in this.global[this.idFiles]){
                     for(let file of this.global[this.idFiles][bean]){
                         if(file.deleted === undefined){
                             arr.push({file: file, bean: bean});
                             cpt = cpt + 1;
                         }
                     }
                 }
                 return [arr, cpt];
            }
        
        	trackByFn(index, item) {
        		return index;  
        	}
        	trackById(index, item) {
        		return item.id;  
        	}
            //
            //this.global[''__viewerTotal''] > 0 || this.global["__C8O_TODELETE"] >0
            //delete_attachment
            deleteRecursive(arr: any, index: number, total: number, id:any):Promise<any>{
                return new Promise((resolve)=>{
                    if(total == 0 || arr == undefined){
                        resolve();
                    }
                    else{
                        let args = {
                                "docid":id,
                                "name": arr[index]["path"],
                                "index": index
                        }
                        this.router.c8o.callJsonObject("fs://c8oforms_response_fs.delete_attachment",args)
                        .then((resp, parameters)=>{
                            this.cptDelete = this.cptDelete+1;
                            this.global[''cptTotal''] = this.global[''cptTotal''] + 1;
                            this.global[''__C8O_TODELETE''][index][''deleted''] = true;
                            //console.log("Progress delete: " +this.cptDelete+ " / "+ total);
                            //this.global["__viewerProgressDelete"] = this.global["__viewerProgressDelete"] + this.cptDelete;
                            //this.global[''__C8O_TODELETE''][parameters[''index'']]["deleted"]= true;
                            if(this.cptDelete == total){
                                //console.log("finished deletions");
                                resolve();
                            }
                            else{
                                setTimeout(() => {
                                    this.deleteRecursive(arr, index + 1, total, id)
                                    .then(()=>{
                                        resolve();
                                    });
                                }, 100);
                               
        
                            }
                            return null;
                        })
                        .fail((err)=>{
                            //console.log(err);
                            //this.cpt = this.cptDelete+1;
                            //console.log("Progress delete: " +this.cptDelete+ " / "+ total);
                            this.global[''cptTotal''] = this.global[''cptTotal''] + 1;
                            if(this.cpt == total){
                                //console.log("finishedErrores deletions");
                                resolve();
                            }
                            else{
                                this.postRecursive(arr, index + 1, total, id)
                                .then(()=>{
                                    resolve();
                                });
                            }
                        });
                    }
                    
                });
            }
            postRecursive(arr: any, index: number, total: number, id: any = null) : Promise<any>{
                return new Promise((resolve)=>{
                    if(total == 0 || arr == undefined){
                        resolve();
                    }
                    else{
                        let ids = id != null ? id: this.local.user+''_''+this.local.edit+''_''+this.epoch;
                        let args;
                        if(window[''cordova''] == undefined){
                            let type = (arr[index]["file"].type == undefined || arr[index]["file"].type == "") ? "application/octet-stream":arr[index]["file"].type;
                            let file: Blob = arr[index]["file"];
                            args = {
                                    "docid":ids,
                                    "name": arr[index]["bean"] + "_C80C80_" +arr[index]["file"]["name"]+"_C80C80_"+(new Date).getTime(),
                                    "content_type": type,
                                    "content":file,
                                    "index":index
                            }
                        }
                        else{
                            let type = (arr[index]["file"].mediaType == undefined || arr[index]["file"].mediaType == "") ? "application/octet-stream":arr[index]["file"].mediaType;
                            args = {
                                    "docid":ids,
                                    "name": arr[index]["bean"] + "_C80C80_" +arr[index]["file"]["name"]+"_C80C80_"+(new Date).getTime(),
                                    "content_type": type,
                                    "content": new Blob(arr[index]["file"].data, {type: type}),
                                    "index":index
                            }
                        }
                        
                        this.router.c8o.callJsonObject("fs://c8oforms_response_fs.put_attachment",args)
                            .then((resp, parameters)=>{
                                this.cpt = this.cpt+1;
                                //console.log("Progress: " +this.cpt+ " / "+ total);
                                this.global[''cptTotal''] = this.global[''cptTotal''] + 1;
                                this.global["__viewerProgress"] = this.cpt;
                                this.global["__viewerProgressDelete"] = this.global["__viewerProgressDelete"] +this.cpt;
                                this.global[''__viewerarr''][parameters[''index'']].file["ok"]= true;
                                this.global[''__viewindeok''][index]= true;
                                if(this.cpt == total){
                                    console.log("finished");
                                    resolve();
                                }
                                else{
                                    this.postRecursive(arr, index + 1, total, ids)
                                    .then(()=>{
                                        resolve();
                                    });
        
                                }
                                return null;
                            })
                            .fail((err)=>{
                                //console.log(err);
                                this.cpt = this.cpt+1;
                                //console.log("Progress: " +this.cpt+ " / "+ total);
                                if(this.cpt == total){
                                    console.log("finishedErrores");
                                    resolve();
                                }
                                else{
                                    this.postRecursive(arr, index + 1, total, ids)
                                    .then(()=>{
                                        resolve();
                                    });
                                }
                            });
                    }
                    
                });
                
                
            }
            
            unsetred(name:string){
                this.redList[name] = false;
                this.tick();         
            }
            
            setRedSpecs(obj:any, first: any){
                for(let item of obj){
                    let find;
                    if(item.nativeElement.id.indexOf("_C8o#") != -1){
                        find = this.redList[item.nativeElement.id.substring(0,item.nativeElement.id.indexOf("_C8o#"))][item.nativeElement.id.substring(item.nativeElement.id.indexOf("_C8o#")+5)];
                    }
                    else{
                        find = this.redList[item.nativeElement.id];
                    }
                    if(find){
                        item.nativeElement.classList.remove("animated");
                        item.nativeElement.classList.remove("shake");
                        if(!first){
                            item.nativeElement.scrollIntoView({block: "center", inline: "nearest", behavior:"smooth"});   
                            first = true;
                        }
                        setTimeout(() => {
                            item.nativeElement.classList.add("animated");
                            item.nativeElement.classList.add("shake");
                            
                        }, 50);
                    }
                    
                }
            }
            
            
            
            /**
             * Browse into conditions to generate Javascript expressions for visibility
             * @param conditions (condition Object define in Fullsync doc)
             */
            public evaluateConditions(conditions, bool= null): string{
                let jsString: string = "";
                for(let conds of Object.keys(conditions)){
                    switch(conds){
                        case "visibleIf":
                            jsString += this.detectSubjectAndComplete(conditions[conds]["conds"], conditions[conds]["condVisible"]);
                        break;
                        case "goToPageIf":
                            if(bool){
                                let abc = this.detectSubjectAndComplete(conditions[conds]["conds"], conditions[conds]["cond"], true);
                            }
                            
                        break;
                    }
                }
                return jsString;
                
            }
            
            /**
             * Browse into conditions to generate Javascript expressions for navigation
             * @param conditions (condition Object define in Fullsync doc)
             */
            public evaluateConditionsNavigation(conditions, bool= null){
                let jsString: string = "";
                for(let conds of Object.keys(conditions)){
                    switch(conds){
                        case "goToPageIf":
                            if(bool){
                                let abc = this.detectSubjectAndComplete(conditions[conds]["conds"], conditions[conds]["cond"], true);
                            }
                            
                        break;
                    }
                }
               if(eval(jsString) == true){
                   
               }
                
            }
            
            /**
             * Compute navigation conditions detecting type of conditions
             * @param conds Array<any> -- array of conditions 
             * @param operatorStr string -- string operator
             * @param line 
             * @param child
             */
            private detectTypeAndComplete(conds: Array<any>, item = null){
                // Iterating over conditions
                for(let cond of conds){
                    if(cond.val1.type == "radio_group" || cond.val1.type == "checkbox_group" || cond.val1.type == "radio" || cond.val1.type == "checkbox" || cond.val1.type == "select"){
                        if(cond.val2.vals != undefined){
                            if(cond.val1.type == "radio_group" || cond.val1.type == "checkbox_group"){
                                try {
                                    let indexes = this.getElementByNameIntoFormSubmit(item.name);
                                    for(let lin of item.lines){
                                        let cpt = 0;
                                        for(let child of item.children){
                                            try {
                                                // Get page to go
                                                let action = (cond.val2.vals[lin.id].filter((x=>{return x.value == child.id })))[0].action;
                                                // If there is a defined page to go
                                                if(action != "" && action != undefined){
        											//detect verb goTo
        											var goTo = (action.indexOf("goTo_") == 0);
        											if(goTo){
        												action = action.substring(5);
        											}
                                                    // get Index of page to go
                                                    let indexToGo = this.findIndexOfPageByPageTechName(action);
        											// if verb is allowPage
        											if(!goTo){
        												// Create enabled object if does not exist yet
        	                                            if(this.local.pages[indexToGo].enabled == undefined || typeof(this.local.pages[indexToGo].enabled) == "boolean"){
        	                                                this.local.pages[indexToGo].enabled = {};
        	                                            }
        	                                            // update value of accesible page
        	                                            let selected;
        	                                            if(item.type == "radio_group"){
        	                                                selected = indexes.length > 1 ? this.formsSubmit[indexes[0]].children[indexes[1]].children[lin.title] == child.value : this.formsSubmit[indexes[0]].children[lin.title] == child.value
        	                                            }
        	                                            else{
        	                                                selected = indexes.length > 1 ? this.formsSubmit[indexes[0]].children[indexes[1]].children[lin.title][cpt].selected : this.formsSubmit[indexes[0]].children[lin.title][cpt].selected; 
        	                                            }
        	                                            this.local.pages[indexToGo].enabled[lin.id+"_" +child.id] = selected;
        											}
        											// if verb is goTo
        											else{
        												// update value of accesible page
        	                                            let selected;
        	                                            if(item.type == "radio_group"){
        	                                                selected = indexes.length > 1 ? this.formsSubmit[indexes[0]].children[indexes[1]].children[lin.title] == child.value : this.formsSubmit[indexes[0]].children[lin.title] == child.value
        	                                            }
        	                                            else{
        	                                                selected = indexes.length > 1 ? this.formsSubmit[indexes[0]].children[indexes[1]].children[lin.title][cpt].selected : this.formsSubmit[indexes[0]].children[lin.title][cpt].selected; 
        	                                            }
        												if(selected){
        													this.local.currentIndex = indexToGo;
        													this.ref.detectChanges();
        												}
        											}
                                                    
                                                }
                                            }
                                            catch(e){}
                                            cpt++;        
                                        }
        								
                                    }
                                }
                                catch(e){
        							this.c8o.log.error("an error occured while computing navigation conditions and detecting type of conditions",e);
        						}
                            }
                            // If cond.val1.type == "radio" || "checkbox"
                            else{
                                try{     
                                    let cpt = 0;
                                    let indexes = this.getElementByNameIntoFormSubmit(item.name);
                                    // Foreach element of current item
                                    for(let elem of item.children){
                                            // Get page to go
                                            let action = cond.val2.vals[elem.id];
                                            // If there is a defined page to go
                                            if(action != "" && action != undefined){
        										//detect verb goTo
        										var goTo = (action.indexOf("goTo_") == 0);
        										if(goTo){
        											action = action.substring(5);
        										}
                                                // get Index of page to go
                                                let indexToGo = this.findIndexOfPageByPageTechName(action);
        										// if verb is allowPage
        										if(!goTo){
        											// Create enabled object if does not exist yet
        	                                        if(this.local.pages[indexToGo].enabled == undefined || typeof(this.local.pages[indexToGo].enabled) == "boolean"){
        	                                            this.local.pages[indexToGo].enabled = {};
        	                                        }
        	                                        // update value of accesible page
        	                                        let selected = indexes.length > 1 ? this.formsSubmit[indexes[0]].children[indexes[1]].children[cpt].selected : this.formsSubmit[indexes[0]].children[cpt].selected
        	                                        this.local.pages[indexToGo].enabled[elem.id] = selected;
        										}
        										// if verb is goTo
        										else{
        											if(indexes.length > 1 ? this.formsSubmit[indexes[0]].children[indexes[1]].children[cpt].selected : this.formsSubmit[indexes[0]].children[cpt].selected){
        												this.local.currentIndex = indexToGo;
        												this.ref.detectChanges();
        											}
        										}
                                            }
                                        cpt++;
                                    }
                                }
                                catch(e){
        							this.c8o.log.error("an error occured while computing navigation conditions and detecting type of conditions",e);
        						}
                            }
                        }
                        
                    }
                    else if(this.isAfieldSimpleOrMultipleGo(cond) || this.isACamSign(cond)){
                        try{
                            let action = cond.page;
                            if(action != "" && action != undefined){
                             // get Index of page to go
                                let indexToGo = this.findIndexOfPageByPageTechName(action);
        						// if verb is allowPage
        						if(cond.verb == undefined || cond.verb == "authorize"){
        	                        // Create enabled object if does not exist yet
        	                        if(this.local.pages[indexToGo].enabled == undefined || typeof(this.local.pages[indexToGo].enabled) == "boolean"){
        	                            this.local.pages[indexToGo].enabled = {};
        	                        }
        	                        // update value of accesible page
        	                        this.local.pages[indexToGo].enabled[item.id] = this.compute(cond);
        						}
        						// if verb is goTo
        						else if(cond.verb == "goTo"){
        							if(this.compute(cond)){
        								this.local.currentIndex = indexToGo;
        								this.ref.detectChanges();
        							}
        						}
        						
                            }
                        }
                        catch(e){
        					this.c8o.log.error("an error occured while computing navigation conditions and detecting type of conditions",e);
        				}
                    }
                    else if(this.isACamSign(cond)){
                    }
                }
            }
            
            private findIndexOfPageByPageTechName(pageTechName: string): number{
                let cpt = 0;
                for(let page of this.local.pages){
                    if(page.pageTechName == pageTechName){
                        return cpt;
                    }
                    cpt ++;
                }
                return -1;
            }
            
            /**
             * Compute visibility conditions detecting type of conditions
             * @param conds Array<any> -- array of conditions
             * @param operatorStr string -- string operator
             */
            public detectSubjectAndComplete(conds: Array<any>, operatorStr: string, goToPage = null){
                // Javascript string to be built
                let jsString = "";
                // Operator between each condition
                const operator = this.getcondVisibleToSign(operatorStr);
                let cpt = 0;
                
                // Iterating over conditions
                for(let cond of conds){
                    var status = "";
                    try{
                        // If subject of current condition are fields  
                        if(this.isAfieldSimpleOrMultiple(cond)){
                            status = "field";
                            jsString+= cpt > 0 ? operator+ " " + this.compute(cond) : this.compute(cond);
                            cpt ++;
                        }
                        // If subject of current condition is the form
                        else if(this.isAform(cond)){
                            status = "form";
                            // If its first condition of string don''t prefix by operator, then call generateJsVisibleIfForm
                            jsString+= cpt > 0 ? operator+ " " + this.generateJsVisibleIfForm(cond) : this.generateJsVisibleIfForm(cond);
                            //console.log("form");
                            cpt ++;
                        }
                        else if(this.isAFile(cond)){
                            status = "field";
                            jsString+= cpt > 0 ? operator+ " " + this.compute(cond) : this.compute(cond);
                            cpt ++;
                        }
                        else if(this.isACamSign(cond)){
                            status = "field";
                            jsString+= cpt > 0 ? operator+ " " + this.compute(cond) : this.compute(cond);
                            cpt ++;
                        }
        				else if(this.isANeverVisible(cond)){
        					status = "never_visible";
        					jsString += cpt > 0 ? operator+ " false" : "false";
        				}
                        else{
                            status = "error";
                        }
                    }
                    catch(e){
                    }
                    
                }
                if(jsString == "" && goToPage == null){
                    jsString = "true";
                }
                return jsString;  
            }
            
            /**
             * detect if object is instance of field
             * @param object
             */
            private instanceOfField(object:any){
                return ''val1'' in object
            }
            
            /**
             * detect if we are evaluating a valid field Simple or multiple
             * @param cond
             */
            private isAfieldSimpleOrMultiple(cond: FieldObject){
                try {
                    return (cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && (cond.val1.str != "" || cond.val1.arr.length > 0) && cond.val2 != undefined && (cond.val2.str != "" || cond.val2.arr.length > 0) && cond.operator != undefined && cond.operator != "") 
                }
                catch(e){
                    return (cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && (cond.val1.str != "" || cond.val1.arr.length > 0) && cond.operator != undefined && cond.operator != "" && (cond.operator == "is_filled" || cond.operator == "is_empty"));;
                }
            }
            /**
             * 
             * @param cond
             */
            private isAfieldSimpleOrMultipleGo(cond: FieldObject){
                try {
                    return (cond.val1 != undefined && (cond.val1.str != "" || cond.val1.arr.length > 0) && cond.val2 != undefined && (cond.val2.str != "" || cond.val2.arr.length > 0) && cond.operator != undefined && cond.operator != "" && cond.type == "goToPageIf") 
                }
                catch(e){
                    return (cond.val1 != undefined && (cond.val1.str != "" || cond.val1.arr.length > 0) && cond.operator != undefined && cond.operator != "" && (cond.operator == "is_filled" || cond.operator == "is_empty") && cond.type == "goToPageIf");;
                }
            }
            
            /**
             * detect if we are evaluating a valid form
             * @param cond
             */
            private isAform(cond: FormObject){
                try {
                    return cond.subject != undefined && cond.subject == "form" && cond.attribute != undefined && cond.attribute != "" && cond.operator != undefined && cond.operator != "";
                }
                catch(e){
                    return false;
                }
            }
        	/**
             * detect if we are evaluating a valid form
             * @param cond
             */
            private isANeverVisible(cond: FormObject){
                try {
                    return cond.subject == "never_visible";
        		}
                catch(e){
                    return false;
                }
            }
            
            /**
             * detect if we are evaluating a valid file
             * @param cond
             */
            private isAFile(cond: FieldObject){
                try {
                    return cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && cond.val1.str != undefined && cond.operator != "" && cond.val1.type == "file";
                }
                catch(e){
                    return false;
                }
            }
            
            /**
             * detect if we are evaluating a valid camSign
             * @param cond
             */
            private isACamSign(cond: FieldObject){
                try {
                    return cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && cond.val1.str != undefined && cond.operator != "" && (cond.val1.type == "signature" || cond.val1.type == "img");
                }
                catch(e){
                    return false;
                }
            }
            
            /**
             * 
             * @param val ValFieldObject
             * @param val1 ValFieldObject
             */
            private compute(cond: FieldObject | FormObject){
                let result = true;
                if(this.instanceOfField(cond)){
                    const field = <FieldObject>cond;
                    const type1: string = this.getType(field.val1.type);
                    const operator: string = field.operator;
                    result = this[operator](field, type1);
                }
                else{
                    const form = <FormObject>cond;
                }
                return result;
                
            }
            
            /**
             * getter to a simple field val
             * @param val
             */
            private getValSimple(val : ValFieldObject){
                return val.source ? this.getSimple(val) : val.str;
            }
            
            /**
             * getter to a multiple field val
             * @param val
             */
            private getValMultiple(val : ValFieldObject): Array<any>{
                let ret;
                let str 
                if(val.source){
                    switch(val.type){
                        case "checkbox":
                            str = this.getNameById(val.arr!= undefined ? val.arr[0].value : val.str); 
                            ret = val.source ? this.getFormCheckboxValueByName(str) :val.arr;
                        break;
                        case "radio_group":
                            str = this.getNameById(val.arr!= undefined ? val.arr[0].value : val.str); 
                            ret = val.source ? this.getFormRadioGroupValueByName(str) :val.arr;
                        break;
                        case "checkbox_group":
                            str = this.getNameById(val.arr!= undefined ? val.arr[0].value : val.str); 
                            ret = val.source ? this.getFormCheckboxGroupValueByName(str) :val.arr;
                        break;
                            
                    }
                }
                else{
                    ret = val.arr.map((e)=>{return e.display});
                }
                
                return ret;
            }
            
            
            /**
             * equals operator 
             * @param field
             * @param type
             */
            private equals(field: FieldObject, type: string){
                if(type == "simple"){
                    return this.getValSimple(field.val1) == this.getValSimple(field.val2);
                }
                else if(type == "multiple"){
                    let arr1 = this.getValMultiple(field.val1);
                    let arr2 = this.getValMultiple(field.val2)
                    return arr1.length != arr2.length ? false : arr1.sort().every((value, index) => { return value ==  arr2[index]});
                }
            }
            
            /**
             * different operator
             * @param field
             * @param type
             */
            private different(field: FieldObject, type: string){
                if(type == "simple"){
                    return this.getValSimple(field.val1) != this.getValSimple(field.val2);
                }
                else if(type == "multiple"){
                    let arr1 = this.getValMultiple(field.val1);
                    let arr2 = this.getValMultiple(field.val2)
                    return !(arr1.length != arr2.length ? false : arr1.sort().every((value, index) => { return value ==  arr2[index]}));
                }
            }
            
            /**
             * greater operator
             * @param field
             * @param type
             */
            private greater(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 > v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) > this.getValSimple(field.val2);
                    }
        
                    
                }
            }
            
            /**
             * minus operator
             * @param field
             * @param type
             */
            private minus(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 < v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) < this.getValSimple(field.val2);
                    }
        
                    
                }
            }
            
            /**
             * greaterequals operator
             * @param field
             * @param type
             */
            private greaterequals(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 >= v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) >= this.getValSimple(field.val2);
                    }
        
                    
                }
            }
            
            /**
             * minusequals operator
             * @param field
             * @param type
             */
            private minusequals(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 <= v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) <= this.getValSimple(field.val2);
                    }            
                }
            }
            
            /**
             * among_following operator
             * @param field
             * @param type
             */
            private among_following(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValMultiple(field.val2);
                    return (v2.filter(w => w == v1)).length > 0;
                }
                else if(type == "multiple"){
                    let v1 = this.getValMultiple(field.val1);
                    let v2 = this.getValMultiple(field.val2)
                    return v2.filter(Set.prototype.has, new Set(v1)).length > 0;
                
                }
            }
            
            /**
             * out_following operator
             * @param field
             * @param type
             */
            private out_following(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValMultiple(field.val2);
                    return (v2.filter(w => w == v1)).length == 0;
                }
                else if(type == "multiple"){
                    let v1 = this.getValMultiple(field.val1);
                    let v2 = this.getValMultiple(field.val2) 
                    return v2.filter(Set.prototype.has, new Set(v1)).length == 0;
                }
            }
            
            /**
             * contains operator
             * @param field
             * @param type
             */
            private contains(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValSimple(field.val2);
                    return v1.indexOf(v2) != -1;
                }
            }
            
            /**
             * not_contains operator
             * @param field
             * @param type
             */
            private not_contains(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValSimple(field.val2);
                    return v1.indexOf(v2) == -1;
                }
            }
            
            /**
             * contains_multiple_files operator
             * @param field
             */
            private contains_multiple_files(field: FieldObject, type: string){
                let v1 = field.val1.str;
                let id = this.global.id;
                return this.global[id] != undefined && this.global[id][v1] != undefined && this.global[id][v1].length > 1;
            }
            
            /**
             * contains_a_file operator
             * @param field
             */
            private contains_a_file(field: FieldObject, type: string){
                let v1 = field.val1.str;
                let id = this.global.id;
                return this.global[id] != undefined && this.global[id][v1] != undefined && this.global[id][v1].length == 1;
            }
            
            /**
             * does_not_contain_file operator
             * @param field
             */
            private does_not_contain_file(field: FieldObject, type: string){
                let v1 = field.val1.str;
                let id = this.global.id;
                return this.global[id] == undefined || this.global[id][v1] == undefined || this.global[id][v1].length == 0;
            }
            
            /**
             * is_filled operator
             * @param field
             */
            private is_filled(field: FieldObject){
                const val = this.getValSimple(field.val1);
                return val != "";
            }
            
            /**
             * is_empty operator
             * @param field
             */
            private is_empty(field: FieldObject){
                const val = this.getValSimple(field.val1);
                return val == "";
            }
            
            /**
             * Generate Javascript expression for a given FormObject
             * @param form FormObject -- Its a field Object
             */
            private generateJsVisibleIfForm(form: FormObject): string{
                // Javascript string to be built
                let jsString = "";
                jsString+= this.strOperatorToAssert(form.operator) + this.getAttributeForm(form.attribute);
                return jsString;
            }
            
            /**
             * 
             * @param str
             */
            public getAttributeForm(str): string{
                let stri = "";
                switch(str){
                    case "anonymous":
                        stri = "this.local.anonymous";
                    break;
                }
                return stri;
            }
            
            
            /**
             * 
             * @param str
             */
            public strOperatorToAssert(str){
                let stri = "";
                switch(str){
                    case "equals":
                        stri = "";
                    break;
                    case "different":
                        stri = "!";
                    break;
                }
                return stri;
            }
        
            /**
             * 
             * @param str
             */
            public getcondVisibleToSign(str){
                let stri = "";
                switch(str){
                    case "and":
                        stri = "&&";
                    break;
                    case "or":
                        stri = "||";
                    break;
                }
                return stri;
            }
            /**
             * 
             * @param name
             */
            public getFormElementValueByName(name): string{
        		var searchArray = {... this.formsSubmit, ...this.actions};
                for(let key of Object.keys(searchArray)){
                    if(key == name){
                        return searchArray[key].value;
                    }
                    else if(searchArray[key].type == "ion-card"){
                        for(let keyChild of Object.keys(searchArray[key]["children"])){
                            if(keyChild == name){
                                let val = searchArray[key]["children"][keyChild].value;
                                if(val == undefined){
                                    val =  "";
                                }
                                return val;
                                
                            }
                        }
                    }
                }
                return "";
            }
        
        	public getPathById(id): string{
        		let name = this.getNameById(id);
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        return "page.formsSubmit[\""+name.replace(/"/g, ''\\\"'')+"\"][\""+this.getKeyByType(this.formsSubmit[key].type)+"\"]";
                    }
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                return "page.formsSubmit[\""+key+"\"].children[\""+name+"\"][\""+this.getKeyByType(this.formsSubmit[key]["children"][keyChild].type)+"\"]";
                                
                            }
                        }
                    }
                }
        		for(let key of Object.keys(this.actions)){
                    if(key == name){
                        return "page.actions[\""+name+"\"][\""+this.getKeyByType(this.actions[key].type)+"\"]";;
                    }
                }
                return "";
            }
        
        	public getKeyByType(type): string {
        		if(type == "checkbox" || type == "checkbox_group" || type =="radio_group"){
        			return ''children'';
        		}
        		else{
        			return ''value'';
        		}
        	}
            
            /**
             * 
             * @param name
             */
            public getIdByName(name, search = this.formsList): string{
                /*for(let obj of this.formsList){
                    if(obj["type"] == "ion-card"){
                        let id = this.getIdByName(name);
                        if(id != ""){
                            return id;
                        }
                    }
                    else{
                        if(obj["name"] == name){
                            return obj["id"];
                        }
                    }
                }
                return "";*/
        		for(let obj of search){
        			let current: any = obj;
        			if(name == current.name){
        				return current.id;
        			}
        			else if(current.type == "ion-card"){
        				let val = this.getIdByName(name, current.children);
        				if(val != null){
        					return val;
        				}
        			}
                }
                return null;	
            }
        
        	public getItemById(id, search = this.formsList): object{
                for(let obj of search){
        			let current: any = obj;
        			if(id == current.id){
        				return current;
        			}
        			else if(current.type == "ion-card"){
        				let val = this.getItemById(id, current.children);
        				if(val != null){
        					return val;
        				}
        			}
                }
                return null;
            }
            
            /**
             * 
             * @param name
             */
            public getFormCheckboxValueByName(name): Array<string>{
                let arrayStr: Array<string> = [];
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        for(let i in this.formsSubmit[key].children){
                            if(this.formsSubmit[key].children[i]["selected"]){
                                arrayStr.push(this.formsSubmit[key].children[i].value);  
                            }
                        }
                    }
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                for(let i in this.formsSubmit[key]["children"][keyChild].children){
                                    if(this.formsSubmit[key]["children"][keyChild].children[i]["selected"]){
                                        arrayStr.push(this.formsSubmit[key]["children"][keyChild].children[i].value);  
                                    }
                                }
                            }
                        }
                    }
                }
                return arrayStr;
            }
            
            /**
             * 
             * @param name
             */
            public getFormRadioGroupValueByName(name): Array<string>{
                let arrayStr: Array<string> = [];
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        for(let i in this.formsSubmit[key].children){
                            if(this.formsSubmit[key].children[i] != ""){
                                arrayStr.push(i+"_"+this.formsSubmit[key].children[i]);  
                            }
                        }
                    }
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                for(let i in this.formsSubmit[key]["children"][keyChild].children){
                                    if(this.formsSubmit[key]["children"][keyChild].children[i] != ""){
                                        arrayStr.push(i+"_"+this.formsSubmit[key]["children"][keyChild].children[i]);  
                                    }
                                }
                            }
                        }
                    }
                }
                return arrayStr;
            }
            
            /**
             * 
             * @param name
             */
            public getFormCheckboxGroupValueByName(name): Array<string>{
                let arrayStr: Array<string> = [];
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        for(let i in this.formsSubmit[key].children){
                            for(let j in this.formsSubmit[key].children[i]){
                                if(this.formsSubmit[key].children[i][j]["selected"]){
                                    arrayStr.push(i+"_"+this.formsSubmit[key].children[i][j].value);  
                                }
                            }
                        }
                    }
                    //this.formsSubmit[key]["children"][keyChild]
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                for(let i in this.formsSubmit[key]["children"][keyChild].children){
                                    for(let j in this.formsSubmit[key]["children"][keyChild].children[i]){
                                        if(this.formsSubmit[key]["children"][keyChild].children[i][j]["selected"]){
                                            arrayStr.push(i+"_"+this.formsSubmit[key]["children"][keyChild].children[i][j].value);  
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return arrayStr;
            }
        
            /**
             * 
             * @param val
             */
            private getSimple(val: ValFieldObject ): string{
                const name = this.getNameById(val)
                return this.getFormElementValueByName(name);
            }
            
            /**
             * 
             * @param val
             */
            private getNameById(val: ValFieldObject | number): string{
        		var searchArray = this.form.formulaire.concat(this.form.actions);
                if(typeof(val) == ''number''){
                    for(let elem of searchArray){
                        if(elem.id == val){
                            return elem.name;
                        }
                        else if(elem.type == "ion-card"){
                            for(let child of elem["children"]){
                                if(child.id == val){
                                    return child.name;
                                }
                            }
                        }
                    }
                    return "";
                }
                else{
                    for(let elem of searchArray){
                        if(elem.id == val.str){
                            return elem.name;
                        }
                        else if(elem.type == "ion-card"){
                            for(let child of elem["children"]){
                                if(child.id == val.str){
                                    return child.name;
                                }
                            }
                        }
                    }
                    return "";
                }
                
            }
        
            
            
            /**
             * bind eval function
             * @param str
             */
            public eval(str){
                return eval(str);
            }
            
            /**
             * returns type of field (simple, multiple, file, or camSign)
             * @param type
             */
            public getType(type: string): string{
                if(this.local.multipleField[type] == true){
                    return "multiple";
                }
                else if(this.local.simpleField[type] == true){
                    return "simple";
                }
                else if(this.local.fileField[type] == true){
                    return "file";
                }
                else if(this.local.camSignField[type] == true){
                    return "camSign"; 
                }
                else{
                    return "";
                }
                
            }
            
            /**
             * returns next available page index
             */
            public getNextPageIndex(){
                let b = JSON.parse(JSON.stringify(this.local.currentIndex));
                for (let i = b +1; i < this.local.pages.length; i++) {
                    try{
                        if(this.local.pages[i].enabled != undefined &&((this.local.pages[i].enabled == true) || (this.local.pages[i].enabled instanceof Object && Object.keys(this.local.pages[i].enabled).map((e)=> {return this.local.pages[i].enabled[e];}).indexOf(true) != -1))){
                            return i;
                        }   
                    }
                    catch(e){
                        if(this.local.pages[i].enabled == true){
                            return i;
                        }  
                    }  
                 }
            }
            /**
             * returns previous available page index
             */
            public getPreviousPageIndex(){
                for (let i = this.local.currentIndex -1; i >= 0 ; i--) {
                    try{
                        if(this.local.pages[i].enabled != undefined &&((this.local.pages[i].enabled == true) || (this.local.pages[i].enabled instanceof Object && Object.keys(this.local.pages[i].enabled).map((e)=> {return this.local.pages[i].enabled[e];}).indexOf(true) != -1))){
                            return i;
                        }   
                    }
                    catch(e){
                        if(this.local.pages[i].enabled == true){
                            return i;
                        }  
                    }
                 }
                return 0;
            }
            /**
             * search for next page to use
             */
            public isThereANextPage(){
                if(this.local.pages != undefined && (this.local.currentIndex < this.local.pages.length -1)){
                    for (let i = this.local.currentIndex +1; i < this.local.pages.length; i++) {
                        if(this.local.pages[i].enabled != undefined && ((this.local.pages[i].enabled == true) || (this.local.pages[i].enabled instanceof Object && Object.keys(this.local.pages[i].enabled).map((e)=> {return this.local.pages[i].enabled[e];}).indexOf(true) != -1))){
                            return true;
                        }   
                     }
                    return false;
                }
                else{
                    return false;
                }
                
            }
          
            /**
             * check for any existing condition and initial value of some objects
             * @param formList
             */
            public checkForAnyCondition(formList = this.formsList){
                if(this.local.initDone == undefined){
                    this.local.initDone = {}; 
                }
                // for each element of form
                for(let e of formList){     
                    let elem :any = e;
                        try{
                            // search for conditions object
                            if(elem.conditions != undefined && elem.conditions.goToPageIf != undefined && elem.conditions.goToPageIf.conds != undefined){
                                if(true){
                                    if(this.local.initDone[elem.id] == null){
                                        this.detectTypeAndComplete(elem.conditions.goToPageIf.conds, elem);
                                        this.local.initDone[elem.id] = true;
                                    }
                                }
                            }
                            if(elem.type == "ion-card"){
                                this.checkForAnyCondition(elem.children);
                            }
                        }
                        catch(e){
                            console.log(e);
                        }
                    }
              }
            
            /**
             * returns path to some element from name
             * used by detectTypeAndComplete
             * @param name
             * @param index
             * @param formsSubmit
             */
            public getElementByNameIntoFormSubmit(name: string, index = null, formsSubmit = this.formsSubmit){
                for(let i in formsSubmit){
                    if(formsSubmit[i].name == name){
                        if(index == null){
                            return [i];
                        }
                        else{
                            return [index, i];
                        }
                    }
                    else if(formsSubmit[i].type == "ion-card"){
                        let idx = this.getElementByNameIntoFormSubmit(name, i, formsSubmit[i]["children"]);
                        if(idx != null){
                            return idx;
                        }
                    }
                }
                return null;
            }
        
        public getSelectSelectedOne(arr, val){
        	let filt = arr.filter((x)=>{return typeof(x) == "string" ? x == val : x.value == val});
        	
        	return filt.length > 0 ? filt[0].displayValue != undefined ? filt[0].displayValue : filt[0]: "";
        }
            /*End_c8o_PageFunction*/
        '
segment: viewer/:formId/:edit/:i
title: Visualisateur
↓PageEvent [mobile.components.UIPageEvent-1537364954559]: 
  viewEvent: onWillEnter
  ↓Error_Handler [mobile.components.UIActionErrorEvent-1576602133134]: 
    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586424644097]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms.MobileApplication.Application.removeSpinner
  ↓If [mobile.components.UIDynamicAction-1628003483159]: 
    beanData: '{"ionBean":"IfAction","condition":"script:this.local.hash == undefined"}'
    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586254439607]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms.MobileApplication.Application.setSpinner
    ↓getUrlParameters [mobile.components.UICustomAction-1570712319541]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              		    this.global.debug = {};
              		    let formId = this.navParams.get('formId');
              		    let edit = this.navParams.get('edit');
              		    if(edit != undefined && edit != ":edit"){
              		        this.local.edit = edit;
              		    }
              		    this.local.formId = formId;
              		    // get predefined values
              		    this.local.urlParams = new URLSearchParams(window.location.search);
              		    
              		    // end get predefined values
              		    
              		    if(formId != null && formId != ":formId"){
              		        
              		        resolve(true);
              		    }
              		    else{
              		        resolve(false);
              		    }		
              
      package_dependencies: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: js-sha256
                - java.lang.String: 
                  - ↑value: 0.9.0
      page_ts_imports: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: Priority
                - java.lang.String: 
                  - ↑value: c8osdkangular
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: C8oLocalCache
                - java.lang.String: 
                  - ↑value: c8osdkangular
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: sha256
                - java.lang.String: 
                  - ↑value: js-sha256
      ↓ifFormIdIsDefined [mobile.components.UIDynamicIf-1570701884872]: 
        beanData: '{"ionBean":"IfElseAction"}'
        ↓IfEditingAResponse [mobile.components.UIDynamicIf-1572271164680]: 
          beanData: '{"ionBean":"IfElseAction","condition":"script:this.local.edit != undefined"}'
          ↓SyncFsResponses [mobile.components.UIDynamicAction-1576601220792]: 
            beanData: '{"ionBean":"FullSyncSyncAction","requestable":"plain:C8Oforms.c8oforms_response_fs"}'
            ↓GetResponseToEdit [mobile.components.UIDynamicAction-1576601220795]: 
              beanData: |
                '{
                 "ionBean": "FullSyncGetAction",
                 "requestable": "plain:C8Oforms.c8oforms_response_fs",
                 "_id": "script:this.local?.edit"
                }'
              ↓setLocal [mobile.components.UICustomAction-1576601220798]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		page.local.respInit = props.out.resp;
                        		resolve();
                        
                ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586254658439]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.syncAndInvokeViewer
            ↓PublishEventInitalSyncFinished [mobile.components.UIDynamicAction-1601369388218]: 
              beanData: |
                '{
                 "ionBean": "PublishEventAction",
                 "topic": "plain:anyInitalSyncFinished",
                 "data": "script"
                }'
          ↓Else_Handler [mobile.components.UIActionElseEvent-1572271179176]: 
            ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586254675310]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.syncAndInvokeViewer
              ↓PublishEventInitalSyncFinished [mobile.components.UIDynamicAction-1601369420390]: 
                beanData: |
                  '{
                   "ionBean": "PublishEventAction",
                   "topic": "plain:anyInitalSyncFinished",
                   "data": "script"
                  }'
            ↓SyncFsResponses [mobile.components.UIDynamicAction-1576601012769]: 
              beanData: |
                '{
                 "ionBean": "FullSyncSyncAction",
                 "requestable": "plain:C8Oforms.c8oforms_response_fs",
                 "Direction": "plain:push"
                }'
        ↓Else_Handler [mobile.components.UIActionElseEvent-1570701884980]: 
          ↓IfElse [mobile.components.UIDynamicIf-1593622945986]: 
            beanData: '{"ionBean":"IfElseAction","condition":"script:this.local.user != undefined || this.local.user != \":i\""}'
            ↓LoadFormanonymous [mobile.components.UICustomAction-1593622986245]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '		    this.global.errorViewer = false; 
                      		    page.local.user = this.navParams.get(''i'');
                      		    page.c8o.callJson(".getAnonymousForm", "login", page.local.user,"__disableAutologin", true)
                                  .then((res: any)=>{
                                      page.local.sourceValue = {};
                                      let respInit = null;
                                      if(res.transaction != undefined && res.transaction.document != undefined && res.transaction.document.couchdb_output != undefined && res.transaction.document.couchdb_output.rows != undefined && res.transaction.document.couchdb_output.rows[0] != undefined){
                                          let response = res.transaction.document.couchdb_output;
                                           if(response.rows != undefined){
                                              if(response.rows[0] != undefined){
                                                  page["local"]["_rev"] = response.rows[0].value.doc[''_rev''];
                                                  page["form"] = response.rows[0].value.doc;
                                                  page["formsList"] = response.rows[0].value.doc.formulaire;
                                                  page["link"] = response.rows[0].value.doc["wallpaper"]["link"];
                                                  try{
                                                      page["local"]["pages"] =  response.rows[0].value.doc["pages"]  
                                                      for(let i in page.local.pages){
                                                          page["local"]["pages"][i]["enabled"] = true;
                                                      }
                                                      page["local"]["currentIndex"] = 0;
                                                  }
                                                  catch(e){
                                                      page["local"]["pages"] = undefined;
                                                      page["local"]["currentIndex"] = 0;
                                                  }
                                                  
                                                  
                                                  page.c8o.log.debug("CallViewLiveAndFillFormList: formsList object has been updated from live view");
                                                  
                                                  // load background image if we are in new support mode image
                                                  if(response.rows[0].value.doc["wallpaper"]["enabled"] && page["form"]["wallpaper"]["type"] != undefined && page["form"]["wallpaper"]["type"] != ''color''){
                                                      page.c8o.get_attachment(page["form"]["_id"], "wallpaper", "c8oforms_fs")
                                                      .then((res) => {
                                                          var urlCreator = window["URL"] || window["webkitURL"];
                                                          page.local.url = urlCreator.createObjectURL(res);
                                                          page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                                          page.tick();
                                                      }).catch((err) => {
                                                          page.c8o.log.error("Error loading wallpaper from local base", err);
                                                      }); 
                                                  }
                                                  else{
                                                      page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                                  }
                                              
                                                  const checkAuthorizedPages = (item: any) => {
                                                      if(item.config.page != undefined && item.config.page != ""){
                                                          if(item.conditions != undefined && item.conditions.goToPageIf != undefined){
                                                              for(let el of item.conditions.goToPageIf.conds){
                                                                  if((el.val2.source == false && (el.val2.str != "" || Object.keys(el.val2.vals).length > 0)) && el.operator != undefined && el.operator != "" && el.page != undefined && el.page != ""){
                                                                      //this is a valid goToPage condition so enable it 
                                                                      for(let i in page.local.pages){
                                                                          if(+i == page.local.currentIndex){
                                                                              page.local.pages[+i].enabled = true;
                                                                          }
                                                                          else{
                                                                              page.local.pages[+i].enabled = false;
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                              
                                                          }
                                                      }
                                                  };
                      							page.local.functionsToBeCalled = {};
                                                  
                                                  let fillFormSubmit = (list, redList, formSubmit, response) => {
                                                      page.local.subKeyD = page.local.urlParams.get("_c8o_subkey");
                                                      page.local.subKeyD = page.local.subKeyD == null ? "," : page.local.subKeyD;
                                                      try  {
                                                          for(let item of list){
                                                              //checkAuthorizedPages(item);
                                                              if(item["type"] == "ion-card"){
                                                                  redList[item["name"]] = {};
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "children":{}, "label":item["config"]["title"]["text"], "labelHtml":item["config"]["title"]["personalized"] ? item["config"]["title"]["html"] : item["config"]["title"]["text"]};
                                                                  //redList[item["name"]]["children"] = [];
                                                                  
                                                                  let res = response != undefined ? response[item["name"]]["children"] : null;
                                                                  fillFormSubmit(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"], res);
                                                              }
                                                              else if(item["type"] == "text"){
                                                                  let urlParams = page.local.urlParams.get(item["name"]);
                                                                  let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                              }
                      										else if(item["type"] == "location"){
                                                                  let urlParams = page.local.urlParams.get(item["name"]);
                                                                  let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":{"addr":{}, "gps":{}}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                              }
                                                              else if(item["type"] == "checkbox"){
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                  let urlParams = page.local.urlParams.get(item["name"]);
                                                                  let array = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                                                                  for(let child in item["children"]){
                                                                      let selected;
                                                                      try {
                                                                          let s = array.indexOf(item["children"][child].value) != -1;
                                                                          selected = s == true ? s : respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                                      }
                                                                      catch(e){
                                                                          
                                                                      }
                                                                      
                                                                      formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected, "other": item["children"][child].other});
                                                                  }
                                                              }
                      										else if(item.type == "grid"){
                      											let findName = "";
                                                                  let findVars = {};
                      											let ObjectThatHaveToCallFunc = [];
                                                                      for(let w in item["sources"]){
                                                                          if(item["sources"][w].enabled == true){
                                                                            for (const [key, value] of (<any>Object).entries(item["sources"][w]["vars"])) {
                                                                                findVars[key] = value["str"];
                                                                            }
                                                                            findName = w;
                                                                          }
                                                                      }
                      
                      												const regex = /[$$]{2}\w+[$$]{2}/gm
                      												for(let va in findVars){
                                                          
                      				                                    let str = findVars[va];
                      				                                    if(str == undefined){
                      				                                        str = "";
                      				                                    }
                      				                                    var arrayFound = str.match(regex);
                      				                                    str = "''" + str + "''";
                      				                                    if(arrayFound!= undefined && arrayFound.length > 0){
                      				                                        for(let elements of arrayFound){
                      				                                            let iStart = str.indexOf(elements);
                      				                                            let iEnd = iStart + elements.length;
                      				                                            let id = elements.substring(2, elements.length -2);
                      				    										ObjectThatHaveToCallFunc.push(id);
                      				                                            let path = page["getPathById"](+id);
                      				                                            let currentVal = "''+"+ path +"+''";
                      				                                            
                      				                                            str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
                      				                                        }
                      				                                        findVars[va] = str;
                      				                                    }
                      				                                    else{
                      				                                        findVars[va] = str;
                      				                                    }
                      												}
                      											if(findName != ""){
                      												let showOverlay = undefined;
                      												let dismissOverlay = ()=>{
                      														
                      													};
                      												let funcTocall = ()=>{
                      													
                      													if(showOverlay == undefined){
                      														for(let grid of page["all_agGrid"][''_results'']){
                      															if(grid._nativeElement.id == item.id+""){
                      																grid.api.showLoadingOverlay();
                      																showOverlay = ()=>{
                      																	grid.api.showLoadingOverlay();
                      																	dismissOverlay = ()=>{
                      																		grid.api.hideOverlay();
                      																	};
                      																}
                      															}
                      										            	}
                      													}
                      													else{
                      														showOverlay();
                      													}
                      													
                      													page.local.updating[item.id] = 0;
                      													let variables = {};
                      													for(let va in findVars){
                      														variables[va] = eval(findVars[va]);
                      													}
                      													page.c8o.callJsonObject(findName,variables)
                      													.then((res: any) =>{
                      	                                                    // find Colomn definitions
                      														if(res.data != undefined && res.data.length>0){
                      															let colDef = 
                      															Object.keys(res.data[0]).map((y)=>{
                      																return {"field": y}
                      															});
                      															// find data
                      															formSubmit[item["name"]] = {};
                      															let data = res.data;
                      															formSubmit[item["name"]]["colDef"] = colDef;
                      															formSubmit[item["name"]]["data"] = data;
                      															page.local.updating[item.id] = 1;
                      															dismissOverlay();
                      														}
                      														else{
                      															formSubmit[item["name"]]["data"] = [];
                      														}
                      														
                      	                                                    return null;
                      	                                                })
                      	                                                .fail((err)=>{
                      														dismissOverlay();
                      	                                                    page.c8o.log.error("an error occured while trying to laod source for  select", err);	
                      														page.local.updating[item.id] = 2;
                      	                                                })
                      												};
                      												if(ObjectThatHaveToCallFunc!= undefined && ObjectThatHaveToCallFunc.length > 0){
                      													let onlyUnique = (value, index, self)=> {
                      													  return self.indexOf(value) === index;
                      													}
                      													var unique = ObjectThatHaveToCallFunc.filter(onlyUnique);
                      													unique.forEach((x)=>{
                      														if(page.local.functionsToBeCalled[x] == undefined){
                      																page.local.functionsToBeCalled[x] = [];
                      															}
                      															page.local.functionsToBeCalled[x].push(funcTocall);
                      													});
                      												}
                      												funcTocall();
                                                                  }
                      											
                      										}
                                                              else if(item["type"] == "radio" || item["type"] == "select"){
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                      											// if item is sourced
                      											if(item["type"] == "select" && item["config"]["sourceEnabled"] == true){
                      												let findName = "";
                      	                                            let findVars = {};
                      												let ObjectThatHaveToCallFunc = [];
                      	                                                for(let w in item["sources"]){
                      	                                                    if(item["sources"][w].enabled == true){
                      	                                                      for (const [key, value] of (<any>Object).entries(item["sources"][w]["vars"])) {
                      	                                                          findVars[key] = value["str"];
                      	                                                      }
                      	                                                      findName = w;
                      	                                                    }
                      	                                                }
                      	
                      													const regex = /[$$]{2}\w+[$$]{2}/gm
                      													for(let va in findVars){
                      														if(va == "forms_filter"){
                      															findVars[va] = "page.local.filters_elems[''"+item.id+"''] == undefined ? '''': page.local.filters_elems[''"+item.id+"'']";
                      															ObjectThatHaveToCallFunc.push(item.id);
                      														}
                      														else{
                      															let str = findVars[va];
                      						                                    if(str == undefined){
                      						                                        str = "";
                      						                                    }
                      						                                    var arrayFound = str.match(regex);
                      						                                    str = "''" + str + "''";
                      						                                    if(arrayFound!= undefined && arrayFound.length > 0){
                      						                                        for(let elements of arrayFound){
                      						                                            let iStart = str.indexOf(elements);
                      						                                            let iEnd = iStart + elements.length;
                      						                                            let id = elements.substring(2, elements.length -2);
                      						    										ObjectThatHaveToCallFunc.push(id);
                      						                                            let path = page["getPathById"](+id);
                      						                                            let currentVal = "''+"+ path +"+''";
                      						                                            
                      						                                            str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
                      						                                        }
                      						                                        findVars[va] = str;
                      						                                    }
                      						                                    else{
                      						                                        findVars[va] = str;
                      						                                    }
                      														}
                      													}
                      												if(findName != ""){
                      													let funcTocall = ()=>{
                      														let funcId = new Date().getTime();
                      														page.local.doing[item.id] = funcId;
                      														page.local.updating[item.id] = 0;
                      														let variables = {};
                      														for(let va in findVars){
                      															variables[va] = eval(findVars[va]);
                      															if(variables[va] == undefined || variables[va] == "undefined"){
                      																delete variables[va];
                      															}
                      														}
                      														page.c8o.callJsonObject(findName,variables)
                      														.then((res: any) =>{
                      															let defaultSelected ="";
                      															// if we are still the latest request for this object
                      															if(funcId == page.local.doing[item.id]){
                      																// find Colomn definitions
                      																let urlParams = page.local.urlParams.get(item["name"]);
                      																if(page["formsSubmit"][item.name] != undefined && page["formsSubmit"][item.name].children != undefined && page["formsSubmit"][item.name].children.length > 0){
                      																	const tmp = page["formsSubmit"][item.name].children.filter(x=> x.selected == true);
                      																	if(tmp != undefined && tmp.length > 0){
                      																		urlParams = tmp[0].value
                      																	}
                      																}
                      																formSubmit[item["name"]]["children"] = [];
                      			                                                    
                      																let array = [];
                      																if(!(res["value"] == undefined)){
                      													                if(typeof(res["value"]) == "string"){
                      													                    array.push(res["value"]);
                      													                }
                      													                else{
                      													                    for(let child of res["value"]){
                      													                        array.push(child);
                      													                    }
                      													                }
                      													                
                      													            }
                      			                                                    for(let child of array){
                      			                                                        if(child == urlParams){
                      			                                                            defaultSelected = child;
                      			                                                        }
                      			                                                        formSubmit[item["name"]]["children"].push({"value": child, "selected": child == urlParams});
                      			                                                    }
                      			                                                    formSubmit[item["name"]]["value"] = defaultSelected;
                      	 															page.local.sourceValue[item.name] = array;
                      																page.local.updating[item.id] = 1;
                      															}
                      															formSubmit[item["name"]]["value"] = defaultSelected;
                      		                                                    return null;
                      		                                                })
                      		                                                .fail((err)=>{
                      		                                                    page.c8o.log.error("an error occured while trying to laod source for  select", err);
                      															// if we are still the latest request for this object
                      															if(funcId == page.local.doing[item.id]){
                      																page.local.updating[item.id] = 2;
                      															}
                      		                                                })
                      													};
                      													if(ObjectThatHaveToCallFunc != undefined && ObjectThatHaveToCallFunc.length > 0){
                      														let onlyUnique = (value, index, self)=> {
                      														  return self.indexOf(value) === index;
                      														}
                      														var unique = ObjectThatHaveToCallFunc.filter(onlyUnique);
                      														unique.forEach((x)=>{
                      															if(page.local.functionsToBeCalled[x] == undefined){
                      																page.local.functionsToBeCalled[x] = [];
                      															}
                      															page.local.functionsToBeCalled[x].push(funcTocall);
                      														});
                      													}
                      													funcTocall();
                      	                                            }
                      											}
                                                                  else{
                                                                      let urlParams = page.local.urlParams.get(item["name"]);
                                                                      let indexFinded = false;
                                                                      let defaultSelected ="";
                                                                      
                                                                      if(urlParams != undefined){
                                                                          for(let child in item["children"]){
                                                                              if(item["children"][child]["value"] == urlParams){
                                                                                  indexFinded = true; 
                                                                                  defaultSelected = item["children"][child].value;
                                                                                  formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": true});
                                                                              }
                                                                              else{
                                                                                  formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": false});
                                                                              }
                                                                          }
                                                                      }
                                                                      if(!indexFinded){
                                                                          for(let child in item["children"]){
                                                                              let selected;
                                                                              try {
                                                                                  selected = respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                                                  if(selected){
                                                                                      defaultSelected = respInit == null ? item["children"][child].value : response[item["name"]]["children"][child]["value"];
                                                                                  }
                                                                              }
                                                                              catch(e){
                                                                                  
                                                                              }
                                                                              
                                                                              formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected});
                                                                          }
                                                                      }
                                                                      formSubmit[item["name"]]["value"] = defaultSelected; 
                                                                  }
                                                              }
                                                              else if(item["type"] == "slider" || item["type"] == "datetime" || item["type"] == "time" || item["type"] == "barcode" || item["type"] == "img" || item["type"] == "file"|| item["type"] == "signature"){
                                                                  let urlParams = page.local.urlParams.get(item["name"]);
                                                                  let value;
                                                                  if(item["type"] == "slider"){
                                                                      let valConvert = (isNaN(+urlParams) == false && urlParams != "") ? +urlParams : null;
                                                                      value = valConvert != null ? valConvert : respInit == null ? "": response[item["name"]]["value"]; 
                                                                  }
                                                                  else{
                                                                      value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                                  }
                                                                  
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["name"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                              }
                                                              else if(item["type"] == "radio_group"){
                                                                  
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, children_label:item["children"], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                  for(let line of item.lines){
                                                                      let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                                                      urlParams = item.children.filter(x=> x.value == urlParams).length > 0 ? urlParams : null;
                                                                      let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["children"][line.title]; 
                                                                      formSubmit[item["name"]].children[line.title]= value;
                                                                  }
                                                              }
                                                              else if(item["type"] == "checkbox_group"){
                                                                  formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                  
                                                                  for(let line of item.lines){
                                                                      formSubmit[item["name"]].children[line.title] = [];
                                                                      let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                                                      let array = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                                                                      for(let child in item["children"]){
                                                                         
                                                                          
                                                                          let selected;
                                                                          try {
                                                                              let s = array.indexOf(item["children"][child].value) != -1;
                                                                              selected = s == true ? s : respInit == null ? item["children"][child].selected : response[item["name"]]["children"][line.title][child]["selected"];
                                                                          }
                                                                          catch(e){   
                                                                          }   
                                                                          formSubmit[item["name"]].children[line.title].push({"value": item["children"][child].value, "selected": selected});
                                                                      }
                                                                  }
                                                              }
                                                              
                                                      };
                                                      }
                                                      catch(e){
                                                          console.log("error");
                                                          console.log(e);
                                                      }
                                                      
                                                  }
                                                  
                                                  
                                                  fillFormSubmit(page["formsList"], page["redList"], page["formsSubmit"], respInit); 
                                                  page["checkForAnyCondition"]();
                                                  
                                                  // do stuff to support upload files
                                                  if(page.global["__C8O_TODELETE"] == undefined){
                                                      page.global["__C8O_TODELETE"] = [];
                                                  }
                                                  let nullBefore = false;
                                                  if(page.global[page["idFiles"]].length == 0){
                                                      nullBefore = true
                                                  }
                                                  for(let item of page["formsList"]){
                                                      if( item[''type''] == "file"){
                                                          if(page.global[page["idFiles"]][item["id"]] == null){
                                                              page.global[page["idFiles"]][item["id"]] = [];
                                                          }
                                                      }
                                                      if(item["type"] =="ion-card"){
                                                          for(let child of item["children"]){
                                                              if(child[''type''] == "file"){
                                                                  if(page.global[page["idFiles"]][child["id"]] == null){
                                                                      page.global[page["idFiles"]][child["id"]] = [];
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                                  
                                                  
                                                  
                                                  if(respInit == null){
                                                        resolve();        
                                                  }
                                                  else{
                                                      if(page.global["__C8O_TODELETE"] == undefined){
                                                          page.global["__C8O_TODELETE"] = [];
                                                      }
                                                      let nullBefore = false;
                                                      if(page.global[page["idFiles"]].length == 0){
                                                          nullBefore = true
                                                      }
                                                      for(let item of page["formsList"]){
                                                          if( item[''type''] == "file"){
                                                              if(page.global[page["idFiles"]][item["id"]] == null){
                                                                  page.global[page["idFiles"]][item["id"]] = [];
                                                              }
                                                          }
                                                          if(item["type"] =="ion-card"){
                                                              for(let child of item["children"]){
                                                                  if(child[''type''] == "file"){
                                                                      if(page.global[page["idFiles"]][child["id"]] == null){
                                                                          page.global[page["idFiles"]][child["id"]] = [];
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                      page.c8o.callJson("fs://c8oforms_response_fs.get", "docid", page.local.edit, "attachments", true)
                                                      .then((res)=>{
                                                          let att = res["_attachments"];
                                                          for(let item in att){
                                                              //first itemid
                                                              let itemid = item.substring(0, item.indexOf(''_C80C80_''));
                                                              //second namefile
                                                              let name = item.substring(item.indexOf(''_C80C80_'')+8,item.lastIndexOf(''_C80C80_''));
                                                              //synthax
                                                              if(page.global[page["idFiles"]][itemid] == null){
                                                                  page.global[page["idFiles"]][itemid] = [];
                                                              }
                                                              if(nullBefore){
                                                                  page.global[page["idFiles"]][itemid].push({name:name,path:item, deleted:false});
                                                              }
                                                          }
                                                          resolve();
                                                          return null;
                                                      })
                                                      .fail((err)=>{
                                                          resolve();
                                                      })
                                                  }
                                                  
                                              }
                                              else{
                                                  reject();
                                              }
                                           }
                                          //document  =  res.transaction.document.couchdb_output.rows[0].value.doc
                                      }
                                      else{
                                          if(res.transaction != undefined && res.transaction.document != undefined && res.transaction.document.error != undefined){
                                              let errorSearch = "Max number of sessions";
                                              if(res.transaction.document.error.substring(errorSearch) != -1){
                                                  this.local.errorViewer = true;
                                                  this.local.errorMsgViewer = page["translate"].instant("Max_number_of_sessions");
                                              }
                                              else{
                                                  this.local.errorViewer = true;
                                                  this.local.errorMsgViewer = page["translate"].instant("error_occured");
                                              }
                                          }
                                          if(!this.global.pwa){
                                              window.location.href = ''./'';
                                              resolve(true);
                                          }
                                          else{
                                              this.local.errorViewer = true;
                                              this.local.errorMsgViewer = page["translate"].instant("error_occured");
                                              resolve(true);
                                          }
                                          return null;
                                      }
                                      return null;
                                    
                                  })
                                  .fail((e)=>{
                                      
                                      console.log(e);
                                      if(!this.global.pwa){
                                          window.location.href = ''./'';
                                          resolve(true);
                                      }
                                      else{
                                          this.local.errorViewer = true;
                                          this.local.errorMsgViewer = page["translate"].instant("error_occured");
                                          resolve(true);
                                      }
                                  })
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                      '
              isEnabled: false
              ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1593701778492]: 
                beanData: '{"ionBean":"InvokeAction"}'
                stack: C8Oforms.MobileApplication.Application.removeSpinner
            ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1610051868051]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.callViewLiveAndFillFormListViewer
              ↓fs [mobile.components.UIControlVariable-1610051932024]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:false
              ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1610052928702]: 
                beanData: '{"ionBean":"InvokeAction"}'
                stack: C8Oforms.MobileApplication.Application.removeSpinner
            ↓Else_Handler [mobile.components.UIActionElseEvent-1593622954755]: 
              ↓RootPage [mobile.components.UIDynamicAction-1572269500185]: 
                beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.selectorPage"}'
    ↓CustomAction [mobile.components.UICustomAction-1616685438684]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '		page.global.overlayNoRowsTemplate = ''<div class="justTocheckExistingLoading" style="background-color:#f4f4f450; width:100%; height:100%; display: flex;align-items: center;justify-content: center;"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>''
              		//page.global.overlayNoRowsTemplate2 = ''<div style="width:100%; height:100%; display: flex;align-items: center;justify-content: center;">''+page["translate"].instant("no_result_grid")+''</div>''
              		this.local.agGridLocaleTextFunc =
              		(key, defaultValue) =>{
              			let translation = page["translate"].instant("agGrid."+key)
              			if(translation != "" && translation != "agGrid."+key){
              				return translation;
              			}
              			else{
              				return defaultValue
              			}
                  	};
              				
              				resolve();
              '
  ↓InvokeSharedAction1 [mobile.components.UIDynamicInvoke-1628526953602]: 
    beanData: '{"ionBean":"InvokeAction"}'
    stack: C8Oforms.MobileApplication.Application.importNg2Tooltips
↓PageEvent1 [mobile.components.UIPageEvent-1547566899630]: 
  viewEvent: onCanEnter
  ↓CheckUser [mobile.components.UICustomAction-1572275202786]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '			this.local.p = "viewer";
            		    this.local.errorViewer = false;
            		    if(page.c8o.session.status == C8oSessionStatus.Connected || page.c8o.session.status == C8oSessionStatus.HasBeenConnected){
                            resolve(true);
                        }
            			// if we are in offline mode
            			else if(window.navigator.onLine == false && this.c8o.session.user.name != undefined){
            				resolve(true);
            			}
            			var ua = window.navigator.userAgent;
            			var isIE = /MSIE|Trident/.test(ua);
            			if(isIE){
            				resolve(false);
                            setTimeout(()=>{
                                page.routerProvider.setRoot("loginPage", {page:''editorPage'', formId:page.local.formId}, null); 
                            }, 200);
                            return;
            			}
            		    const request = window["indexedDB"]["open"]("MyTestDatabase", 3);
                        request.onerror = (event)=> {
                            resolve(false);
                            setTimeout(()=>{
                                page.routerProvider.setRoot("loginPage", {page:''editorPage'', formId:page.local.formId}, null); 
                            }, 200);
                            return;
                          };
                          request.onsuccess = (event)=> {
            		    /*page.local.formId = this.navParams.get(''formId'');
            		    page.local.edit = this.navParams.get(''edit'');*/
            		    // Getting user status (whenever he is logged or not)
            		    page.local.formId = this.navParams.get(''formId'');
            		    
            		    page.local.published = page.local.formId != undefined ?page.local.formId.indexOf("published") != -1 ? true : false: false;
            		    page.global.published = page.local.published;
            			page.local.user = this.navParams.get(''i'');
            		    // if we are in anonymous mode
            		    if(page.local.user != undefined && page.local.user != ":i"){ 	        
            		        page.local.grp = {};
            
                            page.local.anonymous = true;
            				page.global.anonymous = page.local.anonymous;
                            resolve(true);
            		        
                            /*page.c8o.callJson(".login", "email", page.local.user, "password", page.local.user)
                            .then((res: any)=>{
                                if(res != "ko"){
                                    return page.c8o.callJson("fs://c8oforms_fs.sync"
                                    );
                                }
                                else{
                                    window.location.href = ''./'';
                                    resolve(false);
                                    return null;
                                }
                              
                            })
                            .then((res)=>{
                                
                              return page.c8o.callJson("fs://c8oforms_fs.view",
                                      "ddoc", "published_forms_anonymous",
                                      "view", "all"
                                  );
                            })
                            .then((res)=>{
                                const key = "_C8O_HIDDEN_" + res.rows[0].key.substring(0, res.rows[0].key.indexOf("_anonymous"));
                                page.local.grp = {};
                                page.local.grp[key] = true;
                               // page.local.user = res.user;
                                page.local.anonymous = true;
                                resolve(true);
                            })
                            .fail((e)=>{
                                console.log(e);
                                window.location.href = ''./'';
                                resolve(false);
                            });*/
            		    }
            		    else{
            		        page.c8o.httpInterface.getUserServiceStatus()
            	            .then((res)=>{
            	                if(res.user.length == 64 || res.user.authenticated == false){
                                    setTimeout(()=>{
                                        page.routerProvider.setRoot("loginPage", {page:''viewerPage'', formId:page.local.formId, edit:page.local.edit}, null); 
                                    }, 200);
                                    resolve(false);
                                }
                                else{
                                    page.local.user = res.user;
                                    resolve(true);
                                }
            	                    
            	            })
            	            .catch((err)=>{
            	                if(window.navigator.onLine == true){
                	                setTimeout(()=>{
                	                    page.routerProvider.setRoot("loginPage", {page:''viewerPage'', formId:page.local.formId, edit:page.local.edit}, null); 
                	                }, 200);
                	                resolve(false);
            	                }
            	                else{
            	                    // Offline mode
            	                    page.local.user = page.c8o.session.user.name
            	                    resolve(true);
                	            }
            	            })
            		    }
            		    
                       };
            		   /* this.local.debug = {};
                        let formId = this.navParams.get(''formId'');
                        if(formId != undefined){
                            this.local.formId = formId;
                            resolve(true);
                        }
                        else{
                            resolve(true);
                        }*/
                       
                        
            		/*
            		if(this.global.user == '''' || this.global.user == undefined){
            		    window.location.href = ''./'';
            		    resolve(false);
            		}
            		else{
            		    resolve(true);
            		}*/
            '
    page_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: C8oSessionStatus
              - java.lang.String: 
                - ↑value: c8osdkangular
↓Header [mobile.components.UIDynamicElement-1571856354963]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓Directive [mobile.components.UIControlDirective-1572552867684]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!(this.local.published == true || this.local.anonymous == true) else ElseBlock_1612361896826
    isEnabled: false
  ↓Attr [mobile.components.UIAttribute-1604407602200]: 
    attrName: '*ngIf'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:!(this.local.published == true || this.local.anonymous == true)
    isEnabled: false
  ↓Tag [mobile.components.UIElement-1612361896826]: 
    identifier: ElseBlock_1612361896826
    isEnabled: false
    tagName: ng-template
  ↓UseSharedComponent [mobile.components.UIUseShared-1571856416149]: 
    sharedcomponent: C8Oforms.MobileApplication.Application.sharedHeaderViewer
    ↓prod [mobile.components.UIControlVariable-1612365833730]: 
      varValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
          - MobileSmartSourceType: script:(this.local.published == true || this.local.anonymous == true)
↓Content [mobile.components.UIDynamicElement-1537435548501]: 
  beanData: '{"ionBean":"Content","IonPadding":"plain:false"}'
  comment: Page content
  tagName: ion-content
  ↓Attr [mobile.components.UIAttribute-1543509288894]: 
    attrName: '[style.background-repeat]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:no-repeat
  ↓Attr1 [mobile.components.UIAttribute-1543509369804]: 
    attrName: '[style.background-size]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:cover
  ↓Attr21 [mobile.components.UIAttribute-1545226048588]: 
    attrName: '[ngStyle]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: 'script:{''background-color'': this.enabled == true ? (this.form.wallpaper[''type''] == ''color'' ? this.form.wallpaper[''color''] : ''#fff'') : ''#fff'' ,''background-image'': this.enabled == true ? (this.form.wallpaper[''type''] != undefined ? (this.form.wallpaper[''type''] != ''color'' ? ''url(''+this.local.url+'')'' : ''none'') : ''url('' + this.link+ '')'') : ''none''}'
  ↓Attr11 [mobile.components.UIAttribute-1571141618057]: 
    attrName: '[ngClass]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:'themeVizu'
  ↓Style [mobile.components.UIStyle-1571143195258]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '/* $text-input-highlight-color-valid: #ffffff !global; */
            position:relative;
            '
  ↓Directive [mobile.components.UIControlDirective-1576510500502]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.local.finished
    ↓Grid [mobile.components.UIDynamicElement-1543345620685]: 
      beanData: '{"ionBean":"Grid","Height":"plain:height:100%"}'
      tagName: ion-grid
      ↓GridRow [mobile.components.UIDynamicElement-1543345633316]: 
        beanData: '{"ionBean":"GridRow","Height":"plain:height:100%"}'
        tagName: ion-row
        ↓GridCol [mobile.components.UIDynamicElement-1543345636494]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
        ↓GridCol1 [mobile.components.UIDynamicElement-1543345638252]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsXSmall": "plain:12",
             "ColumnsSmall": "plain:12",
             "ColumnsMedium": "plain:10",
             "ColumnsLarge": "plain:8",
             "ColumnsXLarge": "plain:6"
            }'
          tagName: ion-col
          ↓Directive21 [mobile.components.UIControlDirective-1593770170775]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.anonymous == true
            isEnabled: false
            ↓TextFormat [mobile.components.UIDynamicElement-1593770170778]: 
              beanData: '{"ionBean":"TextFormat","TextCenter":"plain:text-center"}'
              tagName: div
              ↓Badge [mobile.components.UIDynamicElement-1593770170781]: 
                beanData: '{"ionBean":"Badge","IonColor":"plain:btLight"}'
                tagName: ion-badge
                ↓Text [mobile.components.UIText-1593770170784]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Anonymous_Form
                ↓Style [mobile.components.UIStyle-1593770170787]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'position:absolute;
                          top:0;
                          right: 5px;;
                          border-radius: 10px;
                          '
          ↓Directive2 [mobile.components.UIControlDirective-1593769984818]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.published == true
            isEnabled: false
            ↓TextFormat [mobile.components.UIDynamicElement-1593769838195]: 
              beanData: '{"ionBean":"TextFormat","TextCenter":"plain:text-center"}'
              tagName: div
              ↓Badge [mobile.components.UIDynamicElement-1593769815371]: 
                beanData: '{"ionBean":"Badge","IonColor":"plain:btLight"}'
                tagName: ion-badge
                ↓Text [mobile.components.UIText-1593769826956]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Published_Form
                ↓Style [mobile.components.UIStyle-1593769900491]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'position:absolute;
                          top:0;
                          right: 5px;;
                          border-radius: 10px;
                          '
          ↓Div [mobile.components.UIDynamicElement-1584610356623]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Style [mobile.components.UIStyle-1584610376264]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'background-color: rgba(255,255,255,0.95) !important;
                      border-radius: 8px;
                      
                      '
            ↓Directive [mobile.components.UIControlDirective-1600247779964]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:!(this.local.pages != undefined && this.form.pages[this['local']['currentIndex']] != undefined && this.form.pages[this['local']['currentIndex']].desc != undefined && this.form.pages[this['local']['currentIndex']].desc != '')
              ↓Directive3 [mobile.components.UIControlDirective-1584610404185]: 
                directiveExpression: form.namePosition == 'text-center'
                directiveName: If
                ↓Div [mobile.components.UIDynamicElement-1584610404188]: 
                  beanData: '{"ionBean":"DivTag"}'
                  tagName: div
                  ↓Attr [mobile.components.UIAttribute-1584610404191]: 
                    attrName: '[attr.text-center]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:true
                  ↓TextFormat [mobile.components.UIDynamicElement-1584610404194]: 
                    beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                    tagName: div
                    ↓Text [mobile.components.UIText-1584610404197]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.form.name
                    ↓Style [mobile.components.UIStyle-1584610404200]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              'font-size: 34px;
                              '
              ↓Directive11 [mobile.components.UIControlDirective-1584610404203]: 
                directiveExpression: form.namePosition == 'text-left'
                directiveName: If
                ↓Div [mobile.components.UIDynamicElement-1584610404206]: 
                  beanData: '{"ionBean":"DivTag"}'
                  tagName: div
                  ↓Attr [mobile.components.UIAttribute-1584610404209]: 
                    attrName: '[attr.text-left]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:true
                  ↓TextFormat [mobile.components.UIDynamicElement-1584610404212]: 
                    beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                    tagName: div
                    ↓Text [mobile.components.UIText-1584610404215]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.form.name
                    ↓Style [mobile.components.UIStyle-1584610404218]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              'font-size: 34px;
                              '
              ↓Directive21 [mobile.components.UIControlDirective-1584610404221]: 
                directiveExpression: form.namePosition == 'text-right'
                directiveName: If
                ↓Div [mobile.components.UIDynamicElement-1584610404224]: 
                  beanData: '{"ionBean":"DivTag"}'
                  tagName: div
                  ↓Attr [mobile.components.UIAttribute-1584610404227]: 
                    attrName: '[attr.text-right]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:true
                  ↓TextFormat [mobile.components.UIDynamicElement-1584610404230]: 
                    beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                    tagName: div
                    ↓Text [mobile.components.UIText-1584610404233]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.form.name
                    ↓Style [mobile.components.UIStyle-1584610404236]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              'font-size: 34px;
                              '
            ↓Directive1 [mobile.components.UIControlDirective-1584610404239]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.pages == undefined && this.form.descform != ''
              ↓Div [mobile.components.UIDynamicElement-1584610404353]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr1 [mobile.components.UIAttribute-1584610404356]: 
                  attrName: '[innerHTML]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.router.sanitizer.bypassSecurityTrustHtml(this.form.descform)
                ↓Attr2 [mobile.components.UIAttribute-1584626454040]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:['styledivnormal']
                ↓Style [mobile.components.UIStyle-1584627079486]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	padding-bottom:13px !important;	
                          
            ↓Attr2 [mobile.components.UIAttribute-1584610445587]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:['card', 'card-md']
            ↓Directive12 [mobile.components.UIControlDirective-1592563520001]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.pages != undefined && this.form.pages[this['local']['currentIndex']] != undefined && this.form.pages[this['local']['currentIndex']].desc  != undefined &&this.form.pages[this['local']['currentIndex']].desc != ''
              ↓Div [mobile.components.UIDynamicElement-1592563520004]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr1 [mobile.components.UIAttribute-1592563520007]: 
                  attrName: '[innerHTML]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.router.sanitizer.bypassSecurityTrustHtml(this.form.pages[this['local']['currentIndex']].desc)
                ↓Attr2 [mobile.components.UIAttribute-1592563520010]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:['styledivnormal']
                ↓Style [mobile.components.UIStyle-1592563520013]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	padding-bottom:13px !important;	
                          
          ↓Attr [mobile.components.UIAttribute-1543864506194]: 
            attrName: '[style.background-color]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:#fff
            isEnabled: false
          ↓Directive [mobile.components.UIControlDirective-1543865083865]: 
            directiveExpression: 'let i = index; trackBy: trackById'
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:let item of this.formsList
            ↓Directive [mobile.components.UIControlDirective-1586530752522]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:item.cat == undefined && this.local.hideme == undefined
              ↓Directive1 [mobile.components.UIControlDirective-1592514000964]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local.pages == undefined  || (this.local.pages[this.local.currentIndex]['pageTechName'] == item.config.page)
                ↓Directive [mobile.components.UIControlDirective-1588846603623]: 
                  directiveName: Switch
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:item.type
                  ↓DivCard [mobile.components.UIDynamicElement-1586265611980]: 
                    beanData: '{"ionBean":"DivTag"}'
                    tagName: div
                    ↓Attr2 [mobile.components.UIAttribute-1586265635235]: 
                      attrName: '[ngClass]'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:['card', 'card-md']
                    ↓Style [mobile.components.UIStyle-1586265647519]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              'background-color: rgba(255,255,255,0.95);
                              border-radius: 8px;
                              
                              '
                    ↓Attr [mobile.components.UIAttribute-1586265658284]: 
                      attrName: '*ngIf'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: 'plain:(item.type == ''ion-card'' || item.type == ''videoCall'') ? false : item.conditions != undefined ? this.eval(this.evaluateConditions(item.conditions)) : true;'
                    ↓DivContentInnerHTML [mobile.components.UIDynamicElement-1586265727271]: 
                      beanData: '{"ionBean":"DivTag"}'
                      tagName: div
                      ↓Attr2 [mobile.components.UIAttribute-1586265841305]: 
                        attrName: '[ngClass]'
                        attrValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: 'script:item.type != ''grid'' ? [''styledivnormal''] : []'
                      ↓Style [mobile.components.UIStyle-1586265928118]: 
                        styleContent: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                padding-bottom:10px;
                                padding-top:10px;
                                
                      ↓Directive1 [mobile.components.UIControlDirective-1588846642198]: 
                        directiveExpression: '''text'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent [mobile.components.UIUseShared-1588846642201]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemTextViewer
                          ↓item [mobile.components.UIControlVariable-1588846642204]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓this [mobile.components.UIControlVariable-1588846642207]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this
                          ↓model [mobile.components.UIControlVariable-1588846642210]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642213]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive11 [mobile.components.UIControlDirective-1588846642216]: 
                        directiveExpression: '''ion-title'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent3 [mobile.components.UIUseShared-1588846642219]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemTitleViewver
                          ↓item [mobile.components.UIControlVariable-1588846642222]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642225]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                      ↓Directive2 [mobile.components.UIControlDirective-1588846642228]: 
                        directiveExpression: '''ion-label'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent4 [mobile.components.UIUseShared-1588846642231]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemLabelViewver
                          ↓item [mobile.components.UIControlVariable-1588846642234]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642237]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                      ↓Directive3 [mobile.components.UIControlDirective-1588846642240]: 
                        directiveExpression: '''checkbox'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent2 [mobile.components.UIUseShared-1588846642243]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemCheckboxViewer
                          ↓item [mobile.components.UIControlVariable-1588846642246]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642249]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642252]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive4 [mobile.components.UIControlDirective-1588846642255]: 
                        directiveExpression: '''radio'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent811 [mobile.components.UIUseShared-1588846642258]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemRadioViewver
                          ↓item [mobile.components.UIControlVariable-1588846642261]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642264]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642267]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive5 [mobile.components.UIControlDirective-1588846642270]: 
                        directiveExpression: '''slider'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent8 [mobile.components.UIUseShared-1588846642273]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemSliderViewver
                          ↓item [mobile.components.UIControlVariable-1588846642276]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642279]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642282]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive51 [mobile.components.UIControlDirective-1588846642285]: 
                        directiveExpression: '''select'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent81 [mobile.components.UIUseShared-1588846642288]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemSelectViewver
                          ↓item [mobile.components.UIControlVariable-1588846642291]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642294]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642297]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive52 [mobile.components.UIControlDirective-1588846642300]: 
                        directiveExpression: '''datetime'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent5 [mobile.components.UIUseShared-1588846642303]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemDateTimeViewver
                          ↓item [mobile.components.UIControlVariable-1588846642306]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642309]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642312]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive53 [mobile.components.UIControlDirective-1588846642315]: 
                        directiveExpression: '''time'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent51 [mobile.components.UIUseShared-1588846642318]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemTimeViewver
                          ↓item [mobile.components.UIControlVariable-1588846642321]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642324]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642327]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive54 [mobile.components.UIControlDirective-1588846642330]: 
                        directiveExpression: '''img'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent1 [mobile.components.UIUseShared-1588846642333]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemImgViewer
                          ↓item [mobile.components.UIControlVariable-1588846642336]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642339]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642342]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive55 [mobile.components.UIControlDirective-1588846642345]: 
                        directiveExpression: '''barcode'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent7 [mobile.components.UIUseShared-1588846642348]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemBarcodeViewver
                          ↓item [mobile.components.UIControlVariable-1588846642351]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642354]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642357]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive56 [mobile.components.UIControlDirective-1588846642360]: 
                        directiveExpression: '''file'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent8111 [mobile.components.UIUseShared-1588846642363]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemFileViewver
                          ↓item [mobile.components.UIControlVariable-1588846642366]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642369]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642372]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                          ↓idFiles [mobile.components.UIControlVariable-1588846642375]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.idFiles
                      ↓Directive561 [mobile.components.UIControlDirective-1588846642378]: 
                        directiveExpression: '''signature'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent6 [mobile.components.UIUseShared-1588846642381]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemSignatureViewver
                          ↓item [mobile.components.UIControlVariable-1588846642384]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642387]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642390]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive562 [mobile.components.UIControlDirective-1588846642393]: 
                        directiveExpression: '''radio_group'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent8112 [mobile.components.UIUseShared-1588846642396]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemRadioGroupViewver
                          ↓item [mobile.components.UIControlVariable-1588846642399]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642402]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642405]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                          ↓ix [mobile.components.UIControlVariable-1588846642408]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:i
                      ↓Directive563 [mobile.components.UIControlDirective-1588846642411]: 
                        directiveExpression: '''checkbox_group'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent21 [mobile.components.UIUseShared-1588846642414]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemCheckboxGroupViewer
                          ↓item [mobile.components.UIControlVariable-1588846642417]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642420]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642423]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                          ↓disabled [mobile.components.UIControlVariable-1588846642426]: 
                            comment: this.formsSubmit[item['name']]
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:false
                      ↓Directive21 [mobile.components.UIControlDirective-1604675615710]: 
                        directiveExpression: '''description'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent4 [mobile.components.UIUseShared-1604675615713]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemDescriptionViewer
                          ↓item [mobile.components.UIControlVariable-1604675615716]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                      ↓Directive12 [mobile.components.UIControlDirective-1608817811015]: 
                        directiveExpression: '''grid'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent [mobile.components.UIUseShared-1608817811018]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemGridViewer
                          ↓item [mobile.components.UIControlVariable-1608817811021]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓this [mobile.components.UIControlVariable-1608817811024]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this
                          ↓model [mobile.components.UIControlVariable-1608817811027]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.local.sourceValue[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1608817811030]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                          ↓disabled [mobile.components.UIControlVariable-1610117592319]: 
                            comment: this.formsSubmit[item['name']]
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:false
                      ↓Directive121 [mobile.components.UIControlDirective-1609947134377]: 
                        directiveExpression: '''location'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent [mobile.components.UIUseShared-1609947134380]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemLocationViewer
                          ↓item [mobile.components.UIControlVariable-1609947134383]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓this [mobile.components.UIControlVariable-1609947134386]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this
                          ↓model [mobile.components.UIControlVariable-1609947134389]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1609947134392]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                  ↓Directive [mobile.components.UIControlDirective-1588846710912]: 
                    directiveExpression: '''ion-card'''
                    directiveName: SwitchCase
                    ↓Div [mobile.components.UIDynamicElement-1580402859499]: 
                      beanData: '{"ionBean":"DivTag"}'
                      tagName: div
                      ↓UseSharedComponent81111 [mobile.components.UIUseShared-1580402859676]: 
                        sharedcomponent: C8Oforms.MobileApplication.Application.itemCardViewer
                        ↓item [mobile.components.UIControlVariable-1580402859679]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:item
                        ↓model [mobile.components.UIControlVariable-1580402859682]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                        ↓redList [mobile.components.UIControlVariable-1580402859685]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:this.redList[item['name']]
                        ↓this [mobile.components.UIControlVariable-1580402859688]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:this
                      ↓Attr [mobile.components.UIAttribute-1611161117023]: 
                        attrName: '*ngIf'
                        attrValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: 'plain:item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                  ↓Directive1 [mobile.components.UIControlDirective-1620394160918]: 
                    directiveExpression: '''videoCall'''
                    directiveName: SwitchCase
                    isEnabled: false
                    ↓UseSharedComponent [mobile.components.UIUseShared-1620394228237]: 
                      sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
          ↓Directive1 [mobile.components.UIControlDirective-1592514107460]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.isThereANextPage() else ElseBlock_1592514238339
            ↓GenericItemButtonSubmit [mobile.components.UIDynamicElement-1592514301607]: 
              beanData: '{"ionBean":"GenericItem"}'
              tagName: ion-item
              ↓Style [mobile.components.UIStyle-1592514301610]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'background-color: transparent;
                        z-index: 0;
                        .item-inner{
                        	border: 0px !important;
                        }
                        
                        
                        '
              ↓Submit [mobile.components.UIDynamicElement-1592514301613]: 
                beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:right"}'
                tagName: ion-buttons
                ↓Submit [mobile.components.UIDynamicElement-1592514301616]: 
                  beanData: '{"ionBean":"Button"}'
                  isEnabled: false
                  tagName: button
                  ↓Event [mobile.components.UIControlEvent-1592514301619]: 
                    attrName: (click)
                    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1592514301622]: 
                      beanData: '{"ionBean":"InvokeAction"}'
                      stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                  ↓Text [mobile.components.UIText-1592514301625]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:'send'| translate
                ↓Directive [mobile.components.UIControlDirective-1592514910340]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.local.currentIndex > 0
                  ↓Button1 [mobile.components.UIDynamicElement-1592514849445]: 
                    beanData: '{"ionBean":"Button"}'
                    tagName: button
                    ↓Event [mobile.components.UIControlEvent-1592514849448]: 
                      attrName: (click)
                      ↓CustomAction [mobile.components.UICustomAction-1592514849451]: 
                        actionValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                		page["local"]["currentIndex"] = this.getPreviousPageIndex();
                                		resolve();
                                
                    ↓Text [mobile.components.UIText-1592514849454]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:previous
                    ↓Attr [mobile.components.UIAttribute-1592514849457]: 
                      attrName: 
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:item-start
                    ↓Attr1 [mobile.components.UIAttribute-1618498244029]: 
                      attrName: '[ngStyle]'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''color'': this.local.policyColor, ''background-color'': this.local.headerColor} : {}'
                ↓Button [mobile.components.UIDynamicElement-1592514320843]: 
                  beanData: '{"ionBean":"Button"}'
                  tagName: button
                  ↓Event [mobile.components.UIControlEvent-1592514327067]: 
                    attrName: (click)
                    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1592831695091]: 
                      beanData: '{"ionBean":"InvokeAction"}'
                      stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                      ↓indexPage [mobile.components.UIControlVariable-1592831706018]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:this.local.currentIndex
                      ↓pages [mobile.components.UIControlVariable-1592831706020]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:this.local.pages
                      ↓doAll [mobile.components.UIControlVariable-1592831706022]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:false
                      ↓CustomAction [mobile.components.UICustomAction-1592514345220]: 
                        actionValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                		if(vars.next){
                                		    page["local"]["currentIndex"] = this.getNextPageIndex();
                                		}
                                		
                                		resolve();
                                
                        ↓next [mobile.components.UIControlVariable-1592831722010]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:parent.out.nextPage
                  ↓Text [mobile.components.UIText-1592514373643]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:next
                  ↓Attr [mobile.components.UIAttribute-1618498240157]: 
                    attrName: '[ngStyle]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''color'': this.local.policyColor, ''background-color'': this.local.headerColor} : {}'
                ↓Style [mobile.components.UIStyle-1618825832744]: 
          ↓Tag [mobile.components.UIElement-1592514238339]: 
            identifier: ElseBlock_1592514238339
            tagName: ng-template
            ↓GenericItemButtonSubmit [mobile.components.UIDynamicElement-1544464002619]: 
              beanData: '{"ionBean":"GenericItem"}'
              tagName: ion-item
              ↓Style [mobile.components.UIStyle-1544464099962]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'background-color: transparent;
                        z-index: 0;
                        .item-inner{
                        	border: 0px !important;
                        }
                        
                        
                        '
              ↓Submit [mobile.components.UIDynamicElement-1543865084768]: 
                beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:right"}'
                tagName: ion-buttons
                ↓Directive [mobile.components.UIControlDirective-1592514986401]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.local.currentIndex != 0
                  ↓Button1 [mobile.components.UIDynamicElement-1592514986404]: 
                    beanData: '{"ionBean":"Button"}'
                    tagName: button
                    ↓Event [mobile.components.UIControlEvent-1592514986407]: 
                      attrName: (click)
                      ↓CustomAction [mobile.components.UICustomAction-1592514986410]: 
                        actionValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                		page["local"]["currentIndex"] = this.getPreviousPageIndex();
                                		resolve();
                                
                    ↓Text [mobile.components.UIText-1592514986413]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:previous
                    ↓Attr [mobile.components.UIAttribute-1592514986416]: 
                      attrName: 
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:item-start
                    ↓Attr1 [mobile.components.UIAttribute-1618498155652]: 
                      attrName: '[ngStyle]'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''color'': this.local.policyColor, ''background-color'': this.local.headerColor} : {}'
                ↓Submit [mobile.components.UIDynamicElement-1543865084771]: 
                  beanData: '{"ionBean":"Button"}'
                  tagName: button
                  ↓Event [mobile.components.UIControlEvent-1543865084774]: 
                    attrName: (click)
                    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1576332679592]: 
                      beanData: '{"ionBean":"InvokeAction"}'
                      stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                  ↓Text [mobile.components.UIText-1543865084789]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:'send'| translate
                  ↓Attr [mobile.components.UIAttribute-1618497885609]: 
                    attrName: '[ngStyle]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''color'': this.local.policyColor, ''background-color'': this.local.headerColor} : {}'
        ↓GridCol2 [mobile.components.UIDynamicElement-1543345640046]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
      ↓Attr [mobile.components.UIAttribute-1576600098505]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == false &&  this.local.errorViewer != true
    ↓Grid1Spinner [mobile.components.UIDynamicElement-1576600108253]: 
      beanData: '{"ionBean":"Grid"}'
      tagName: ion-grid
      ↓GridRow [mobile.components.UIDynamicElement-1576600108256]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "Height": "plain:height:100%",
           "AlignItemsCenter": "plain:align-items-center",
           "JustifyContentCenter": "plain:justify-content-center"
          }'
        tagName: ion-row
        ↓GridCol [mobile.components.UIDynamicElement-1576600108259]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "AlignItemsCenter": "plain:align-self-center",
             "Columns": "plain:12"
            }'
          tagName: ion-col
          ↓Div [mobile.components.UIDynamicElement-1576600108262]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓FragmentSpinner [mobile.components.UICustom-1576600108265]: 
              htmlTemplate: <div  class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            ↓Style [mobile.components.UIStyle-1576600108268]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      text-align:center;
                      
      ↓Attr [mobile.components.UIAttribute-1576600108271]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == true
      ↓Style [mobile.components.UIStyle-1576600108274]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                height:100%;
                
    ↓Grid1 [mobile.components.UIDynamicElement-1604349328497]: 
      beanData: '{"ionBean":"Grid"}'
      tagName: ion-grid
      ↓Attr [mobile.components.UIAttribute-1604349336574]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == false && this.local.errorViewer == true
      ↓Style [mobile.components.UIStyle-1604349364983]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                height:100%;
                
      ↓GridRow [mobile.components.UIDynamicElement-1604349368266]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "Height": "plain:height:100%",
           "AlignItemsCenter": "plain:align-items-center",
           "JustifyContentCenter": "plain:justify-content-center"
          }'
        tagName: ion-row
        ↓GridCol [mobile.components.UIDynamicElement-1604349368269]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "AlignItemsCenter": "plain:align-self-center",
             "Columns": "plain:12"
            }'
          tagName: ion-col
          ↓Div [mobile.components.UIDynamicElement-1604349368272]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Style [mobile.components.UIStyle-1604349368278]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      text-align:center;
                      
            ↓H1 [mobile.components.UIDynamicElement-1604421050869]: 
              beanData: '{"ionBean":"Heading1"}'
              tagName: h1
              ↓Text [mobile.components.UIText-1604421182001]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local.errorMsgViewer | translate
          ↓Div2 [mobile.components.UIDynamicElement-1604486086487]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Attr [mobile.components.UIAttribute-1604486086490]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'styledivnormal'
            ↓Tag [mobile.components.UIElement-1604486086493]: 
              isEnabled: false
              tagName: a
              ↓Paragraph [mobile.components.UIDynamicElement-1604486086496]: 
                beanData: '{"ionBean":"Paragraph"}'
                tagName: p
                ↓Text [mobile.components.UIText-1604486086499]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'sendAnotherResponse' | translate
              ↓Attr [mobile.components.UIAttribute-1604486086502]: 
                attrName: href
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:window.location.href
            ↓Button [mobile.components.UIDynamicElement-1604486086505]: 
              beanData: '{"ionBean":"Button","IonColor":"plain:btLight"}'
              tagName: button
              ↓TextFormat1 [mobile.components.UIDynamicElement-1604486086508]: 
                beanData: '{"ionBean":"TextFormat"}'
                isEnabled: false
                tagName: div
                ↓Text [mobile.components.UIText-1604486086511]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'sendAnotherResponse' | translate
                ↓Style [mobile.components.UIStyle-1604486086514]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '/* Mot de passe oublié: */
                          /*font-family: Helvetica !important;
                          text-decoration: underline;
                          
                          color: #048EAE !important;*/
                          }
                          .class1576511158864:hover {
                          /* Mot de passe oublié: */
                          /*cursor: pointer*/
                          '
                ↓Event [mobile.components.UIControlEvent-1604486086517]: 
                  attrName: (click)
                  isEnabled: false
                  ↓RootPage [mobile.components.UIDynamicAction-1604486086520]: 
                    beanData: |
                      '{
                       "ionBean": "RootPageAction",
                       "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                       "data": "script:{i: this[''navParams''][''get''](''i'')}"
                      }'
              ↓Event [mobile.components.UIControlEvent-1604486146246]: 
                attrName: (click)
                ↓CallSequence [mobile.components.UIDynamicAction-1604486146249]: 
                  beanData: |
                    '{
                     "ionBean": "CallSequenceAction",
                     "requestable": "plain:C8Oforms.Logout",
                     "noAutoLogin": "plain:true"
                    }'
                  ↓RootPage [mobile.components.UIDynamicAction-1604486146252]: 
                    beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
              ↓Icon [mobile.components.UIDynamicElement-1604486220540]: 
                beanData: '{"ionBean":"Icon","IconName":"plain:log-out"}'
                tagName: ion-icon
                ↓Attr [mobile.components.UIAttribute-1604486220543]: 
                  attrName: 
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:item-left
                ↓Style [mobile.components.UIStyle-1604486307452]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'margin-right: 5px;
                          '
              ↓Label [mobile.components.UIDynamicElement-1604486276111]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [mobile.components.UIText-1604486220546]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'logout' | translate
            ↓Style [mobile.components.UIStyle-1604486331510]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      text-align:center;
                      
  ↓Directive1 [mobile.components.UIControlDirective-1576510583186]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.local.finished
    ↓Grid [mobile.components.UIDynamicElement-1576510607811]: 
      beanData: '{"ionBean":"Grid","Height":"plain:height:100%"}'
      tagName: ion-grid
      ↓GridRow [mobile.components.UIDynamicElement-1576510612660]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "AlignItemsCenter": "plain:align-items-center",
           "JustifyContentCenter": "plain:justify-content-center"
          }'
        tagName: ion-row
        ↓GridCol [mobile.components.UIDynamicElement-1576510671475]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsMedium": "plain:1",
             "ColumnsLarge": "plain:2",
             "ColumnsXLarge": "plain:4"
            }'
          tagName: ion-col
        ↓GridCol1 [mobile.components.UIDynamicElement-1576510671478]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsXSmall": "plain:12",
             "ColumnsSmall": "plain:12",
             "ColumnsMedium": "plain:10",
             "ColumnsLarge": "plain:8",
             "ColumnsXLarge": "plain:4"
            }'
          tagName: ion-col
          ↓CardContainer [mobile.components.UIDynamicElement-1576510790267]: 
            beanData: '{"ionBean":"Card"}'
            tagName: ion-card
            ↓CardContent [mobile.components.UIDynamicElement-1576510820428]: 
              beanData: '{"ionBean":"CardContent"}'
              tagName: ion-card-content
              ↓Div [mobile.components.UIDynamicElement-1576510855715]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1576510855718]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓TextFormat [mobile.components.UIDynamicElement-1576510855721]: 
                  beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                  tagName: div
                  ↓Text [mobile.components.UIText-1576510855724]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.form.name
                  ↓Style [mobile.components.UIStyle-1576510855727]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            'font-size: 34px;
                            '
              ↓Div1 [mobile.components.UIDynamicElement-1576511328850]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1576511328853]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓TextFormat [mobile.components.UIDynamicElement-1576511149483]: 
                  beanData: '{"ionBean":"TextFormat"}'
                  tagName: div
                  ↓H2 [mobile.components.UIDynamicElement-1604349569841]: 
                    beanData: '{"ionBean":"Heading2"}'
                    tagName: h2
                    ↓Text [mobile.components.UIText-1576511154355]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:'responseSubmited' | translate
              ↓Div2 [mobile.components.UIDynamicElement-1576511345379]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1576511345382]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓Tag [mobile.components.UIElement-1576511489080]: 
                  isEnabled: false
                  tagName: a
                  ↓Paragraph [mobile.components.UIDynamicElement-1576511489083]: 
                    beanData: '{"ionBean":"Paragraph"}'
                    tagName: p
                    ↓Text [mobile.components.UIText-1576511489086]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:'sendAnotherResponse' | translate
                  ↓Attr [mobile.components.UIAttribute-1576511489089]: 
                    attrName: href
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:window.location.href
                ↓Button [mobile.components.UIDynamicElement-1604349588455]: 
                  beanData: '{"ionBean":"Button","IonColor":"plain:btLight"}'
                  tagName: button
                  ↓TextFormat1 [mobile.components.UIDynamicElement-1576511158864]: 
                    beanData: '{"ionBean":"TextFormat"}'
                    tagName: div
                    ↓Text [mobile.components.UIText-1576511158867]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:'sendAnotherResponse' | translate
                    ↓Style [mobile.components.UIStyle-1576511489092]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '/* Mot de passe oublié: */
                              /*font-family: Helvetica !important;
                              text-decoration: underline;
                              
                              color: #048EAE !important;*/
                              }
                              .class1576511158864:hover {
                              /* Mot de passe oublié: */
                              /*cursor: pointer*/
                              '
                    ↓Event [mobile.components.UIControlEvent-1576512340956]: 
                      attrName: (click)
                      isEnabled: false
                      ↓RootPage [mobile.components.UIDynamicAction-1576512357796]: 
                        beanData: |
                          '{
                           "ionBean": "RootPageAction",
                           "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                           "data": "script:{i: this[''navParams''][''get''](''i'')}"
                          }'
                  ↓Event [mobile.components.UIControlEvent-1604349604451]: 
                    attrName: (click)
                    ↓RootPage [mobile.components.UIDynamicAction-1604349604454]: 
                      beanData: |
                        '{
                         "ionBean": "RootPageAction",
                         "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                         "data": "script:{i: this[''navParams''][''get''](''i'') != undefined ? this[''navParams''][''get''](''i''): '':i'', formId: this[''navParams''][''get''](''formId'') != undefined ? this[''navParams''][''get''](''formId''): '':formId''}"
                        }'
            ↓Style [mobile.components.UIStyle-1604349487183]: 
        ↓GridCol2 [mobile.components.UIDynamicElement-1576510675780]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsMedium": "plain:1",
             "ColumnsLarge": "plain:2",
             "ColumnsXLarge": "plain:4"
            }'
          tagName: ion-col
  ↓Attr2 [mobile.components.UIAttribute-1586248761698]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:myContent
  ↓Div [mobile.components.UIDynamicElement-1596722220123]: 
    beanData: '{"ionBean":"DivTag"}'
    tagName: div
    ↓Style [mobile.components.UIStyle-1596722227157]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'position: absolute;
              top: 40px; right: 40px;
              width: 250px;
              height:60px;
              line-height: 25px;
              text-align: center !important;
              		border-radius: 5px !important;
              		background: color($colors, primary);
              		padding: 5px;
              '
    ↓Attr [mobile.components.UIAttribute-1596722422494]: 
      attrName: class
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:animate__animated animate__backInDown
    ↓TextFormat [mobile.components.UIDynamicElement-1596723338074]: 
      beanData: '{"ionBean":"TextFormat","TextCenter":"plain:text-center"}'
      tagName: div
      ↓Text [mobile.components.UIText-1596722282446]: 
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:gotoMsg
    ↓Attr1 [mobile.components.UIAttribute-1596723465523]: 
      attrName: '*ngIf'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:this.local.showT
  ↓Event [mobile.components.UIControlEvent-1610726723721]: 
    attrName: (click)
    ↓HideCustomSelectComponent [mobile.components.UICustomAction-1610726738541]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              		if(page.local.searchForClick == true){
              			page.local.selectSearchableC8o = {};
              		}
              		resolve();
              
  ↓Div1 [mobile.components.UIDynamicElement-1620739808730]: 
    beanData: '{"ionBean":"DivTag"}'
    isEnabled: false
    tagName: div
    ↓Directive [mobile.components.UIControlDirective-1620739808733]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
          - MobileSmartSourceType: script:!this.local.finished && this.local.spinner == false &&  this.local.errorViewer != true
      ↓Directive [mobile.components.UIControlDirective-1620739808736]: 
        directiveExpression: 'let i = index; trackBy: trackById;'
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: script:let item of this.formsList
        ↓Directive [mobile.components.UIControlDirective-1620739808739]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: script:item.cat == undefined && this.local.hideme == undefined
          ↓Directive1 [mobile.components.UIControlDirective-1620739808742]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.pages == undefined  || (this.local.pages[this.local.currentIndex]['pageTechName'] == item.config.page)
            ↓Directive [mobile.components.UIControlDirective-1620739808745]: 
              directiveName: Switch
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:item.type
              ↓Directive [mobile.components.UIControlDirective-1620739808748]: 
                directiveExpression: '''ion-card'''
                directiveName: SwitchCase
                ↓Directive [mobile.components.UIControlDirective-1620739808751]: 
                  comment: 'item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                  ↓Directive [mobile.components.UIControlDirective-1620739808754]: 
                    directiveExpression: let j = index
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:let child of item.children
                    ↓Directive6 [mobile.components.UIControlDirective-1620739808757]: 
                      directiveName: Switch
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:child.type
                      ↓Directive5631111 [mobile.components.UIControlDirective-1620739808760]: 
                        directiveExpression: '''videoCall'''
                        directiveName: SwitchCase
                        ↓Directive [mobile.components.UIControlDirective-1620739808763]: 
                          comment: 'child.conditions != undefined ? (this.eval(this.evaluateConditions(child.conditions))) : true'
                          directiveName: If
                          directiveSource: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: 'script:child.conditions != undefined ? (this.eval(this.evaluateConditions(child.conditions))) : true'
                          ↓UseSharedComponent81121 [mobile.components.UIUseShared-1620739808766]: 
                            sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
                            ↓ix [mobile.components.UIControlVariable-1620739808769]: 
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:j
                            ↓item [mobile.components.UIControlVariable-1620739808772]: 
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:child
                            ↓redList [mobile.components.UIControlVariable-1620739808775]: 
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:this.redList[child['name']]
              ↓Directive1 [mobile.components.UIControlDirective-1620739808778]: 
                directiveExpression: '''videoCall'''
                directiveName: SwitchCase
                ↓Directive [mobile.components.UIControlDirective-1620739939658]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:item.conditions != undefined ? (this.eval(this.evaluateConditions(item.conditions))) : true'
                  ↓UseSharedComponent [mobile.components.UIUseShared-1620739808781]: 
                    sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
    ↓Attr [mobile.components.UIAttribute-1620741945699]: 
      attrName: id
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:class1620739808738
↓PageEvent2 [mobile.components.UIPageEvent-1611327642638]: 
  viewEvent: onWillLeave
  ↓cancelViewLive [mobile.components.UICustomAction-1611327662306]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		page.global.anonymous = null;
            		page.global.published = null;
            		page.c8o.cancelLive("viewLiveViewerPage");
            		if(page.local.databsesTosync != undefined){
            			for(let db in page.local.databsesTosync){
            				page.c8o.callJsonObject("fs://"+db+".replicate_pull",{cancel: true});
            				page.c8o.log.debug("canceled "+db+" pull replication (before leaving page)");
            			}
            		}
            		if(page.local.liveToCancel != undefined){
            			for(let liveQuery of page.local.liveToCancel){
            				page.c8o.cancelLive(liveQuery);
            				page.c8o.log.debug("canceled "+liveQuery+" live query (before leaving page)");
            			}
            		}
            		resolve();
            '
↓Div [mobile.components.UIDynamicElement-1620404620514]: 
  beanData: '{"ionBean":"DivTag"}'
  tagName: div
  ↓Directive [mobile.components.UIControlDirective-1620397975313]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.local.finished && this.local.spinner == false &&  this.local.errorViewer != true
    ↓Directive [mobile.components.UIControlDirective-1620398021976]: 
      directiveExpression: 'let i = index; trackBy: trackById;'
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
          - MobileSmartSourceType: script:let item of this.formsList
      ↓Directive [mobile.components.UIControlDirective-1620398021979]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: script:item.cat == undefined && this.local.hideme == undefined
        ↓Directive1 [mobile.components.UIControlDirective-1620398021982]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages == undefined  || (this.local.pages[this.local.currentIndex]['pageTechName'] == item.config.page)
          ↓Directive [mobile.components.UIControlDirective-1620398021985]: 
            directiveName: Switch
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:item.type
            ↓Directive [mobile.components.UIControlDirective-1620398022288]: 
              directiveExpression: '''ion-card'''
              directiveName: SwitchCase
              ↓Directive [mobile.components.UIControlDirective-1620398083043]: 
                comment: 'item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
                ↓Directive [mobile.components.UIControlDirective-1620398117160]: 
                  directiveExpression: let j = index
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:let child of item.children
                  ↓Directive6 [mobile.components.UIControlDirective-1620398117163]: 
                    directiveName: Switch
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:child.type
                    ↓Directive5631111 [mobile.components.UIControlDirective-1620398117523]: 
                      directiveExpression: '''videoCall'''
                      directiveName: SwitchCase
                      ↓Directive [mobile.components.UIControlDirective-1620398157972]: 
                        comment: 'child.conditions != undefined ? (this.eval(this.evaluateConditions(child.conditions))) : true'
                        directiveName: If
                        directiveSource: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:true
                        ↓UseSharedComponent81121 [mobile.components.UIUseShared-1620398117526]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
                          ↓ix [mobile.components.UIControlVariable-1620398117529]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:j
                          ↓item [mobile.components.UIControlVariable-1620398117532]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:child
                          ↓redList [mobile.components.UIControlVariable-1620398117535]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[child['name']]
            ↓Directive1 [mobile.components.UIControlDirective-1620398022312]: 
              directiveExpression: '''videoCall'''
              directiveName: SwitchCase
              ↓UseSharedComponent [mobile.components.UIUseShared-1620398022315]: 
                sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
  ↓Attr [mobile.components.UIAttribute-1620742930267]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:idUniqueFabButtonC8o
  ↓Attr1 [mobile.components.UIAttribute-1620743067081]: 
    attrName: style
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: 'plain:top:0; left: 0; position: fixed; z-index: 999;'