comment: Form Visualisator
scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        import { APP_BASE_HREF } from ''@angular/common'';
        import {compressAccurately, dataURLtoFile} from ''image-conversion'';
        import { delay } from ''rxjs/operators'';
        import { of, zip, map, Observable, Subject } from ''rxjs'';
        import { Input, EventEmitter, Output } from ''@angular/core'';
        import { indexationPage } from ''../indexationPage/indexationpage'';
        
        //Used by conditional
        interface ValFieldObject{
            str: string;
            source: boolean;
            type: string;
            arr: Array<any>;
        }
        interface FieldObject {
            type: string;
            subject: string;
            operator: string;
            val1: ValFieldObject;
            val2: ValFieldObject;
        
        }
        interface FormObject {
            type: string;
            subject: string;
            operator: string;
            attribute: string;
        
        }
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
            public formsList: Array<object> = [];
            public formsSubmit = {};
        	public actions = {};
            public link;
            public enabled = false;
            public results = {};
            public form;
            public epoch: string;
            public allfield = "";
            private el: HTMLElement;
            public edit: boolean = false;
            public redList = [];
            public formSubmittedStr = "";
            public submitFormStr = "";
            public sendFormStr = ""
            public idFiles; 
            public cpt = 0;
            public cptDelete = 0;
            public loading;
            public creating;
            public functionsById = {};
        	public previousAndPostFunctions = {};
        	public functionsExecById = {};
        	public shaById = {};
        	public page = this;
        	//public imageCompression = require("browser-image-compression");
            
            
            /*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		window["vv"] =this;
        		this.local.strCacheComputeHtml = {};
        		this.local.techSelect = {};
        		this.local.cacheComputeHtml$ = {};
        		this.local.gridAndCheckboxStyleOnScroll = {}
        		window["this"] = this;
        		this.local.tagName = "div";
                this.local.tagId = "id";
        		this.local.doing = {};
        		this.local.updating = {};
        		this.local.filters_elems = {};
        		this.local.__reservedDone = {};
                this.global[''__viewindeok'']= null;
                this.global["__viewerTotal"] = 0;
                this.global["__viewerarr"] = [];
                this.global[''__C8O_TODELETE''] = [];
                this.cpt = 0;
                this.epoch = (new Date()).getTime() + "";
                translate.get(''allfield'').subscribe((res: string) => {
                 this.allfield = res;
                });
                this.idFiles = "files_" + this.epoch;
                this.global[this.idFiles] = [];
                this.local.multipleField = {radio_group: true, checkbox_group: true, checkbox: true, location: true};
                this.local.simpleField = {date: true, select: true, datetime: true, time: true, radio: true, text: true, barcode: true, slider: true, business_logic: true, grid: true};
                this.local.fileField = {file: true};
                this.local.camSignField = {img: true, signature:true};
        
                this.global[this.global.id] = [];
                
                this.local.multipleFieldGoToPage = {radio_group: true, checkbox_group: true, checkbox: true, select: true, radio: true};
                this.local.simpleFieldGoToPage = {date: true, datetime: true, time: true, text: true, barcode: true, slider: true, business_logic: true, grid: true};
                this.local.fileFieldGoToPage = {file: true};
                this.local.camSignFieldGoToPage = {img: true, signature:true};
        		this.local.pickerOptionsDelete = (params) =>{
        			return {
        				buttons: [
        					{
        						text: this.translate.instant("clear"),
        						handler: ()=> { 
        							params.model[''value''] = "";
        							this.actionBeans.CTS1596618928274(
        								this,
        								{},
        								{
        									item:params.item,
        									line: params.line,
        									child: params.child,
        									canExec:params.canExec == undefined ? true : params.canExec,
        									j: params.j
        								},
        								null
        							);
        							this.actionBeans.CTS1609767736560(
        								this,
        								{},
        								{
        									item: params.item
        								},
        								null
        							)
        						}
        					}
        				]
        			};
        		}
        		this.local.selectFilter = {};
        		if(window["document"] != undefined){
        			window["document"].addEventListener(''backbutton'', ()=>{
        				console.log("backbutton called");
        			  if(this.local.currentIndex != 0) {
        				this.local.currentIndex --;
        	   		  	return false;
        			  }
        			  else //nothing is visible, exit the app
        			  {
        			    navigator["app"].exitApp();
        			  }
        			});
        			this.local.listenerPopState = (event)=>{
        				event.preventDefault();
        				if(event.state != undefined && event.state.page != undefined){
        					if(this["local"]["currentIndex"] == 0){
        						this["local"]["currentIndex"] = 0;
        					}
        					else{
        						this["local"]["currentIndex"] = event.state.page;
        					}
        				}
        				else{
        					this["local"]["currentIndex"] = 0;
        				}
        			}
        			window.addEventListener(''popstate'', this.local.listenerPopState);
        		}
        		window["this"] = this;
        		//support RGAA
        		try{
        			document.querySelectorAll("#menubuttonviewer")[0].shadowRoot.querySelectorAll("button")[0].setAttribute("aria-expanded", "false")
        		}
        		catch(e){
        			
        		}
        		this.instanciateApi();
                /*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/	
        	
        	/**
        	 * 
        	 * @returns a string representing a color that indicates currents sources fullysunc replication status. it can be "green", "btLight", or "red" 
        	 */
        	public getSourcesFullsyncReplicationStatus() {
        		try {
        			let status;
        			//first search for all db if one is not replicated yet
        			for (let index in this.global.waitFSBaseStatus) {
        				let current = this.global.waitFSBaseStatus[index];
        				if (current.init == false) {
        					status = "red";
        					break;
        				}
        			}
        			// then if all are replicated search if some indexations are missing
        			if (status != "red") {
        				for (let index in this.global.waitFSBaseStatus) {
        					let current = this.global.waitFSBaseStatus[index];
        					for (let indexY in current.indexed) {
        						let currentY = current.indexed[indexY];
        						if (currentY == false) {
        							status = "btLight";
        							break;
        						}
        					}
        				}
        			}
        			if (status == undefined) {
        				status = "green";
        			}
        			return status;
        
        		}
        		catch (e) {
        			return "red";
        		}
        	}
        
        	/**
        	 * 
        	 * @returns an object with detailed information about currents sources fullysunc replication status.
        	 */
        	getSourcesFullsyncReplicationStatusDetail() {
        		let doing = { db: { status: "", finished: false, statusComputed: false, "dateFormatedLastUpdate": "unknown" }, indexing: { status: "", finished: false } };
        		let finished = true;
        		let total = 0;
        		let currentC = 0;
        		let totalI = 0;
        		let currentI = 0;
        		let dateFormatedLastUpdate = "";
        		for (let i in this.global.waitFSBaseStatus) {
        			let current = this.global.waitFSBaseStatus[i];
        			dateFormatedLastUpdate = current.dateFormatedLastUpdate;
        			if (current.progress != undefined) {
        				doing.db.statusComputed = true;
        				total += current.progress.total;
        				currentC += current.progress.current;
        				if (this.local.animated != true) {
        					if (this.btStatus != undefined) {
        						this.local.animated = true;
        						this.btStatus.el.classList.add("animate__animated");
        						this.btStatus.el.classList.add("animate__heartBeat");
        						this.btStatus.el.classList.add("animate__infinite");
        						this.btStatus.el.classList.add("animate__slower");
        					}
        				}
        			}
        			if (current.indexed != undefined) {
        				totalI += Object.keys(current.indexed).length;
        				currentI = Object.keys(current.indexed).filter((x) => { return current.indexed[x] == true }).length;
        			}
        
        			if (finished && !current.init) {
        				finished = false;
        			}
        		}
        
        		doing.indexing.finished = currentI == totalI;
        		if (doing.indexing.finished) {
        			doing.indexing.status = this.translate.instant("data_optim_finished");
        		}
        		else {
        			doing.indexing.status = this.translate.instant("data_optim") + "... (" + currentI + "/" + totalI + ")";
        		}
        		doing.db.status = this.translate.instant("data_download") + "... (" + currentC + "/" + total + ")";
        		doing.db.finished = finished;
        		doing.db.dateFormatedLastUpdate = dateFormatedLastUpdate;
        		if (finished && doing.indexing.finished) {
        			doing.db.status = this.translate.instant("data_download_finished");
        			if (this.btStatus != undefined) {
        				this.btStatus.el.classList.remove("animate__animated");
        				this.btStatus.el.classList.remove("animate__heartBeat");
        				this.btStatus.el.classList.remove("animate__infinite");
        				this.btStatus.el.classList.remove("animate__slower");
        			}
        		}
        		return doing;
        	}
        
        	/**
        	 * list all database that must be synchronized to allow fs view oprations
        	 * @param arrayConnector an array that holds all connectors to be synchronised
        	 * @param current object to itterate over
        	 */
        	getDatabasesToSync(arrayConnector, current = this.form.formulaire) {
        		for (let component of current) {
        			if (component.type == "ion-card") {
        				//recursive call
        				this.getDatabasesToSync(arrayConnector, component.children);
        			}
        			else if (component.sources != undefined) {
        				for (let sourceName in component.sources) {
        					var source = component.sources[sourceName];
        					if (source.enabled && source.fullsync) {
        						arrayConnector[source.connectorName] = true;
        					}
        				}
        			}
        		}
        	}
        
        	/**
        	 * start all the replication for target sources databases
        	 * @param databaseObject an array that holds all database to be synchronised
        	 */
        	startSyncDatabases(databaseObject) {
        		this.local.statDB = {};
        		for (let databaseName in databaseObject) {
        			if (databaseObject[databaseName]) {
        				this.local.statDB[databaseName] = false;
        				if (this.local.promisesFS == null) {
        					this.local.promisesFS = {};
        				}
        				if (this.global.waitFSBaseStatus == null) {
        					this.global.waitFSBaseStatus = {};
        				}
        				this.local.promisesFS[databaseName] = new Promise(async (resolveP) => {
        					this.c8o.log.debug("beforeCall " + databaseName + " status");
        					if (this.global.waitFSBaseStatus[databaseName] == undefined) {
        						this.global.waitFSBaseStatus[databaseName] = { init: false, progress: null, errored: false, indexed: {} }
        					}
        					else {
        						this.global.waitFSBaseStatus[databaseName].init = false;
        						this.global.waitFSBaseStatus[databaseName].progress = null;
        						this.global.waitFSBaseStatus[databaseName].errored = false;
        						if (this.global.waitFSBaseStatus[databaseName].indexed == null) {
        							this.global.waitFSBaseStatus[databaseName].indexed = {};
        						}
        					}
        					let localC8o = undefined;
        					try {
        						if (window.navigator.onLine == false) {
        							localC8o = await this.c8o.callJsonObject("fs://" + databaseName + ".get", { docid: "_local/c8o" }).async();
        							this.global.waitFSBaseStatus[databaseName].init = localC8o.status == "completed";
        							if (localC8o.indexed != undefined) {
        								this.global.waitFSBaseStatus[databaseName].indexed = localC8o.indexed;
        							}
        							this.global.waitFSBaseStatus[databaseName].dateFormatedLastUpdate = new Date(+localC8o.timestamp_lastUpdate).toLocaleString();
        						}
        					}
        					catch (e) {
        						this.c8o.log.debug("no _local/c8o doc for source database : " + databaseName + " ==> This is first sync, waiting for full replication before showing form");
        					}
        					this.local.syncFunc1 = () => {
        						this.c8o.callJsonObject("fs://" + databaseName + ".replicate_pull", { "continuous": true, "heartbeat": false, "timeout": false, "batch_size": 1000, "retry": true, "batches_limit": 10 })
        							.then((res, parameters) => {
        								if (window.navigator.onLine) {
        									this.global.waitFSBaseStatus[databaseName].init = true;
        									this.global.waitFSBaseStatus[databaseName].errored = false;
        									if (localC8o == undefined) {
        										resolveP();
        										let timestamp_lastUpdate = "" + new Date().getTime()
        										this.global.waitFSBaseStatus[databaseName].dateFormatedLastUpdate = new Date(+timestamp_lastUpdate).toLocaleString();
        										this.c8o.callJsonObject("fs://" + databaseName + ".post", {
        											_id: "_local/c8o",
        											status: "completed",
        											"timestamp_lastUpdate": timestamp_lastUpdate,
        											"_use_policy": "merge"
        										}).async();
        									}
        									this.c8o.log.debug("startSyncDatabases " + databaseName + " finished");
        									this.ref.detectChanges();
        									this.local.statDB[databaseName] = true;
        								}
        								else {
        									this.local.fsSourcesListenerOnline = (event) => {
        										window.removeEventListener(''online'', this.local.fsSourcesListenerOnline)
        										this.local.syncFunc1();
        										try {
        											this.btStatus.el.classList.remove("animate__animated");
        											this.btStatus.el.classList.remove("animate__heartBeat");
        											this.btStatus.el.classList.remove("animate__infinite");
        											this.btStatus.el.classList.remove("animate__slower");
        											setTimeout(() => {
        												this.btStatus.el.classList.add("animate__animated");
        												this.btStatus.el.classList.add("animate__heartBeat");
        												this.btStatus.el.classList.add("animate__infinite");
        												this.btStatus.el.classList.add("animate__slower");
        											})
        										}
        										catch (e) {
        
        										}
        									}
        									window.addEventListener(''online'', this.local.fsSourcesListenerOnline);
        								}
        								return null;
        							})
        							.progress((progress) => {
        								this.c8o.log.debug("startSyncDatabases progress " + databaseName + " progress " + progress.status);
        								this.global.waitFSBaseStatus[databaseName].progress = progress;
        								this.global.waitFSBaseStatus[databaseName].errored = false;
        								this.ref.detectChanges();
        								if (this.global.waitFSBaseStatus[databaseName].init == true) {
        									let timestamp_lastUpdate = "" + new Date().getTime()
        									this.global.waitFSBaseStatus[databaseName].dateFormatedLastUpdate = new Date(+timestamp_lastUpdate).toLocaleString();
        									this.c8o.callJsonObject("fs://" + databaseName + ".post", {
        										_id: "_local/c8o",
        										"timestamp_lastUpdate": timestamp_lastUpdate,
        										"_use_policy": "merge",
        										"_use_merge_timestamp_lastUpdate": "override"
        									}).async();
        								}
        							})
        							.fail((error) => {
        								this.global.waitFSBaseStatus[databaseName].errored = true;
        								this.c8o.log.error("error startSyncDatabases " + databaseName + " status");
        							})
        					}
        					this.local.syncFunc1();
        				})
        			}
        		}
        	}
        
        	/**
        	 * Shows a grid overlay with its given id in arg
        	 * @param id id of target grid
        	 */
        	public showGridOverlayById(id) {
        		try {
        			for (let grid of this["all_comp1608286885281"][''_results'']) {
        				if (grid.myGrid.agGrid._nativeElement.id == id + "") {
        					grid.myGrid.agGrid.api.showLoadingOverlay();
        					console.log(`Showing grid overlay (id: ${id + ""})`)
        				}
        			}
        		}
        		catch (e) {
        			this.c8o.log.error("an error occured while trying to show an overlay for grid:" + id);
        		}
        
        	}
        
        	/**
        	 * Hide a grid overlay with its given id in arg
        	 * @param id id of target grid
        	 */
        	public hideGridOverlayById(id) {
        		try {
        			for (let grid of this["all_comp1608286885281"][''_results'']) {
        				if (grid.myGrid.agGrid._nativeElement.id == id + "") {
        					grid.myGrid.agGrid.api.hideOverlay();
        					console.log(`Hiding grid overlay (id: ${id + ""})`)
        				}
        			}
        		}
        		catch (e) {
        			this.c8o.log.error("an error occured while trying to hide an overlay for grid:" + id);
        		}
        	}
        
        	/**
        	 * this function is responsible to fill the variable "formSubmit" that will hold responses with the adequate structure
        	 * @param list An array containing all elements that defines the form usally comming from form.formulaire
        	 * @param redList An array that will hold missing required responses with the adequate structure
        	 * @param formSubmit An array that will hold responses with the adequate structure
        	 * @param response if we are editing a form that has already been submited, response is given to us to let us fill the form with previous responses
        	 */
        	public fillFormSubmit(list, redList, formSubmit, response): void {
        		let page = this;
        		page.local.subKeyD = page.local.urlParams.get("_c8o_subkey");
        		page.local.subKeyD = page.local.subKeyD == null ? "," : page.local.subKeyD;
        		try {
        			for (let item of list) {
        				if (item["type"] == "ion-card") {
        					redList[item["name"]] = {};
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "children": {}, "label": item["config"]["title"]["text"], "labelHtml": item["config"]["title"]["personalized"] ? item["config"]["title"]["html"] : item["config"]["title"]["text"] };
        					let res = response != undefined && response[item["name"]] != undefined ? response[item["name"]]["children"] : null;
        					this.fillFormSubmit(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"], res);
        				}
        				else if (item["type"] == "text") {
        					let value: string = "";
        					// search if we have to set current value by response init
        					if (response != undefined && response[item["name"]] != undefined && response[item["name"]]["value"] != undefined) {
        						value = response[item["name"]]["value"];
        					}
        					// search if value has been set by url params
        					else if (page.local.urlParams.get(item["name"]) != null) {
        						value = page.local.urlParams.get(item["name"]) + "";
        					}
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["config"]["label"], "value": value, "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        				}
        				else if (item["type"] == "location") {
        					let urlParams = page.local.urlParams.get(item["name"]);
        					let value = urlParams != null ? urlParams : response != null && response[item["name"]] != undefined && response[item["name"]]["value"] != undefined ? response[item["name"]]["value"] : { "addr": {}, "gps": {} };
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["config"]["label"], "value": value, "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        				}
        				else if (item["type"] == "checkbox") {
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["config"]["label"], "children": [], "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        					let urlParams = page.local.urlParams.get(item["name"]);
        					let arrayUrlParams = urlParams != null ? urlParams.split(page.local.subKeyD) : [];
        					for (let child in item["children"]) {
        						let selected: boolean;
        						try {
        							// search if we have to set current value by response init
        							if (response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"] != undefined && response[item["name"]]["children"][child] != undefined && response[item["name"]]["children"][child]["selected"] != undefined) {
        								selected = response[item["name"]]["children"][child]["selected"];
        							}
        							// search if value has been set by url params
        							else if (arrayUrlParams.indexOf(item["children"][child].value) != -1) {
        								selected = (arrayUrlParams.indexOf(item["children"][child].value) != -1) == true
        							}
        							// in this case take default value
        							if (selected == undefined) {
        								selected = item["children"][child].selected;
        							}
        						}
        						catch (e) {
        							this.c8o.log.error("[fillFormSubmit] An error occured on checkbox (" + item.id + ")");
        							selected = false;
        						}
        						formSubmit[item["name"]]["children"].push({ "value": item["children"][child].value, "selected": selected, "other": item["children"][child].other });
        					}
        				}
        				else if (item.type == "grid") {
        					let value = response != undefined && response[item["name"]] != undefined && response[item["name"]]["value"] != undefined ? response[item["name"]]["value"] : {};
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["config"]["label"], "value": value, "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        				}
        				else if (item["type"] == "radio" || item["type"] == "select") {
        					if (response != undefined && response[item.name] != undefined) {
        
        					}
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["config"]["label"], "children": [], "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        					// search for default values in urlParams
        					let urlParams = page.local.urlParams.get(item["name"]);
        					let defaultSelected = "";
        					if (!item.config.sourceEnabled) {
        						for (let child in item["children"]) {
        							let selected: boolean = false;
        							let useResponse = response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"] != undefined && response[item["name"]]["children"][child] && response[item["name"]]["children"][child]["selected"] != undefined;
        							try {
        								selected = useResponse ? response[item["name"]]["children"][child]["selected"] : urlParams != undefined ? item["children"][child]["value"] == urlParams : item["children"][child]["value"] == item.config?.defaultValue;
        								//to preselect others
        								if(selected == false && item.children[child].other && item.config?.defaultValue == ''__c8o__unique_other''){
        									defaultSelected = ''__c8o__unique_other'';
        								}
        								if (selected) {
        									defaultSelected = item["children"][child].value;
        								}
        							}
        							catch (e) {
        								this.c8o.log.error("[fillFormSubmit] An error occured on radio/type (" + item.id + ")");
        							}
        							formSubmit[item["name"]]["children"].push({ "value": item["children"][child].value, "selected": selected });
        						}
        					}
        					else {
        						defaultSelected = response != undefined && response[item["name"]] != undefined && response[item["name"]]["value"] != undefined ? response[item["name"]]["value"] : "";
        						if (response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"] != undefined) {
        							formSubmit[item["name"]]["children"] = response[item["name"]]["children"];
        						}
        					}
        					// assign value
        					formSubmit[item["name"]]["value"] = defaultSelected;
        				}
        				else if (item["type"] == "slider" || item["type"] == "datetime" || item["type"] == "time" || item["type"] == "barcode" || item["type"] == "img" || item["type"] == "file" || item["type"] == "signature") {
        					let urlParams = page.local.urlParams.get(item["name"]);
        					let value;
        					let default_slider = null;
        					if (item["type"] == "slider") {
        						urlParams = (isNaN(+urlParams) == false && urlParams != "" && urlParams != null) ? +urlParams : null;
        						default_slider = item.config.defaultvalue;
        					}
        					value = (response != null && response[item["name"]] != null && response[item["name"]]["value"] != null) ? response[item["name"]]["value"] : urlParams != null ? urlParams : default_slider != null ? default_slider : "";
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["name"], "value": value, "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        				}
        				else if (item["type"] == "radio_group") {
        
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["config"]["label"], children: {}, children_label: item["children"], "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        					for (let line of item.lines) {
        						let urlParams = page.local.urlParams.get(item["name"] + "_" + line.title);
        						urlParams = item.children.filter(x => x.value == urlParams).length > 0 ? urlParams : null;
        						let value = urlParams != null ? urlParams : response == null ? "" : response[item["name"]]["children"][line.title];
        						formSubmit[item["name"]].children[line.title] = value;
        					}
        				}
        				else if (item["type"] == "checkbox_group") {
        					formSubmit[item["name"]] = { "name": item["name"], "type": item["type"], "label": item["config"]["label"], children: {}, "labelHtml": item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"] };
        					for (let line of item.lines) {
        						formSubmit[item["name"]].children[line.title] = [];
        						let urlParams = page.local.urlParams.get(item["name"] + "_" + line.title);
        						let arrayUrlParams = urlParams != null ? urlParams.split(page.local.subKeyD) : [];
        						for (let child in item["children"]) {
        							let selected: boolean;
        							try {
        								// search if we have to set current value by response init
        								if (response != undefined && response[item["name"]] != undefined && response[item["name"]]["children"] != undefined && response[item["name"]]["children"][line.title] != undefined && response[item["name"]]["children"][line.title][child] != undefined && response[item["name"]]["children"][line.title][child]["selected"] != undefined) {
        									selected = response[item["name"]]["children"][line.title][child]["selected"];
        								}
        								// search if value has been set by url params
        								else if (arrayUrlParams.indexOf(item["children"][child].value) != -1) {
        									selected = (arrayUrlParams.indexOf(item["children"][child].value) != -1) == true
        								}
        								// in this case take default value
        								if (selected == undefined) {
        									selected = item["children"][child].selected;
        								}
        							}
        							catch (e) {
        								this.c8o.log.error("[fillFormSubmit] An error occured on checkbox_group (" + item.id + ")");
        								selected = false;
        							}
        							formSubmit[item["name"]].children[line.title].push({ "value": item["children"][child].value, "selected": selected });
        						}
        					}
        				}
        
        			}
        		}
        		catch (e) {
        			page.c8o.log.error("[fillFormSubmit] An error occured while executing function fillFormSubmit into viewerPage", e);
        			console.error("[fillFormSubmit] An error occured while executing function fillFormSubmit into viewerPage", e);
        		}
        	}
        
        	/**
        	 * this function is responsible to handle actions from the form. It will compute them
        	 * @param list An array containing all elements that defines the actions usally comming from form.actions
        	 */
        	public async fillActions(list): Promise<any> {
        		let page = this;
        		try {
        			for (let item of list) {
        				if (item["type"] == "business_logic") {
        					let sources: any = page["searchForSources"](item, "sources", true);
        					let findVars = sources.findVars;
        					let ObjectThatHaveToCallFunc = sources.ObjectThatHaveToCallFunc;
        					let sha = sources.sha;
        					let variables = {};
        					this.functionsById[sha] = async () => {
        						await page["computeVariable"](findVars, variables, item);
        						// if value has changed update it and call functions
        						if (page["actions"][item["name"]]["value"] != variables["selfVar"]) {
        							page["actions"][item["name"]]["value"] = variables["selfVar"];
        							try {
        								if (page.local["processingDataS"] == undefined) {
        									page.local["processingDataS"] = {};
        								}
        								if (page.local.functionsToBeCalled[item.id] != undefined) {
        									if (page.local["processingDataS"][item.id] != undefined) {
        										try {
        											clearTimeout(page.local["processingDataS"][item.id]);
        										}
        										catch (e) {
        											this.c8o.log.error("[fillActions] An error occured " + JSON.stringify(e), e);
        										}
        									}
        									await new Promise((resolve_set) => {
        										page.local["processingDataS"][item.id] = setTimeout(() => {
        											page.local.functionsToBeCalled[item.id]
        												.forEach((id) => {
        													page["functionsById"][id]();
        												})
        											resolve_set();
        										}, 0)
        									});
        								}
        							}
        							catch (e) {
        								page.c8o.log.error("[fillActions] Error while trying to refresh a data source " + JSON.stringify(e), e);
        							}
        						}
        					}
        					await this.functionsById[sha]();
        					this.fillFunctionsIDToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, sha); //ToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, funcTocall);
        				}
        			}
        		}
        		catch (e) {
        			page.c8o.log.error("[fillActions] An error occured while executing function fillActions into viewerPage " + JSON.stringify(e), e);
        			console.error("[fillActions] An error occured while executing function fillActions into viewerPage", e);
        		}
        	}
        
        	/**
        	 * this function fills "page.local.functionsToBeCalled" object with the sha of a given source and ids of objects to trigger the execution of a source when objects value changes
        	 * @param ObjectThatHaveToCallFunc An array that holds id of objects that will update the function and so triggered the re-execution
        	 * @param id an sha that represent the source
        	 */
        	public fillFunctionsIDToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, id): void {
        		let page = this;
        		if (ObjectThatHaveToCallFunc != undefined && ObjectThatHaveToCallFunc.length > 0) {
        			let onlyUnique = (value, index, self) => {
        				return self.indexOf(value) === index;
        			}
        			var unique = ObjectThatHaveToCallFunc.filter(onlyUnique);
        			unique.forEach((x) => {
        				if (page.local.functionsToBeCalled[x] == undefined) {
        					page.local.functionsToBeCalled[x] = [];
        				}
        				if (page.local.functionsToBeCalled[x].indexOf(id) == -1) {
        					page.local.functionsToBeCalled[x].push(id);
        				}
        			});
        		}
        	}
        
        	/**
        	 * this functions return the design document of an offline fullsync source from the local db. It''s use when the inital replication is finished 
        	 * @param sources source definition hold by an element that rely on offline fullsync source
        	 * @param params params definition hold by an element that rely on offline fullsync source
        	 * @returns 
        	 */
        	public async getDdocFromBase(sources, params) {
        		const page = this;
        		return await page.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".get", { docid: "_design/" + params["ddoc"] }).async();
        	}
        
        	/**
        	 * this functions return the design document of an offline fullsync source over http querying remote db. It''s use when the inital replication is not finished yet 
        	 * @param sources source definition hold by an element that rely on offline fullsync source
        	 * @param params params definition hold by an element that rely on offline fullsync source
        	 * @returns 
        	 */
        	public async getDdocFromHttp(sources, params) {
        		const page = this;
        		let headersObject = { ''Accept'': ''application/json'', ''x-convertigo-sdk'': this.c8o.sdkVersion };
        		Object.assign(headersObject, this.c8o.headers);
        		let headers = this.c8o.httpInterface.getHeaders(headersObject);
        		return await page.c8o.httpPublic.get(this.c8o.endpointConvertigo + "/fullsync/" + sources.fullSyncArgs.connectorName + "/" + "_design/" + params["ddoc"], { headers: headers, withCredentials: true }).toPromise();
        	}
        
        	/**
        	 * this function compute and execute ComputeKeysFunction of fullsync offline data sources
        	 * @param sources  source definition hold by an element that rely on offline fullsync source
        	 * @param params params definition hold by an element that rely on offline fullsync source
        	 * @param variables variables definition hold by an element that rely on offline fullsync source
        	 * @returns the result of ComputeKeysFunction or an empty object if an error occured
        	 */
        	public async getAndApplyC8oformComputeKeysFunction(sources, params, variables) {
        		try {
        			let page = this;
        			var commentBegin = "/*Begin_c8oformComputeKeys_function*/";
        			var commentEnd = "/*End_c8oformComputeKeys_function*/"
        			var functionName = "var c8oformComputeKeys = function";
        			var varName = "var c8oformComputeKeys = ";
        			var functionKeyWord = "function";
        			let ready = false;
        			let allReady = false;
        			try {
        				ready = this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].init;
        			}
        			catch (e) {
        
        			}
        			try {
        				let countNotReady = Object.keys(this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed).filter((x) => { return this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[x] == false });
        				allReady = countNotReady.length == 0 && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].init;
        			}
        			catch (e) {
        
        			}
        			let doc;
        			let hasExecOnline = false;
        			try {
        				if (window.navigator.onLine && !allReady) {
        					hasExecOnline = true;
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync isn''t finished, we will get ddoc to execute offline source over http");
        					doc = await this.getDdocFromHttp(sources, params);
        				}
        				else {
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync is finished, or we are offline, we will get ddoc to execute offline source over fullsync.get");
        					doc = await this.getDdocFromBase(sources, params);
        				}
        			}
        			catch (e) {
        				try {
        					if (hasExecOnline) {
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source over http, we will try in fullsync.get");
        						doc = await this.getDdocFromBase(sources, params);
        					}
        					else {
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source in fullsync.get, we will try over http");
        						doc = await this.getDdocFromHttp(sources, params);
        					}
        				}
        				catch (e) {
        					page.c8o.log.error("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to to execute offline source over http and fullsync.get");
        				}
        			}
        			doc = doc["views"][params.view].map;
        			var functionStr = doc.substring(doc.indexOf(commentBegin) + commentBegin.length, doc.indexOf(commentEnd)).trim();
        			functionStr = functionStr.substring(functionStr.indexOf(varName) + varName.length);
        			var str = functionStr.substring(functionStr.indexOf(functionKeyWord) + functionKeyWord.length);
        			// get the next "{" char
        			str = str.substring(0, str.indexOf("{"));
        			// remove spaces and ()
        			str = str.trim().replace(/\s/g, '''');
        			str = str.substring(1, str.length - 1);
        			var varsOrdered = str.split(",");
        			let args = [];
        			for (let vars of varsOrdered) {
        				vars = vars.trim();
        				args.push(variables[vars]);
        			}
        			//@ts-ignore
        			return await eval("( " + functionStr + ").apply({...this, ...{ready: ready,allReady:allReady }},args)");
        		}
        		catch (e) {
        			return {};
        		}
        
        	}
        
        	/**
        	 * this function compute and execute PostQueryFunction of fullsync offline data sources
        	 * @param sources  source definition hold by an element that rely on offline fullsync source
        	 * @param params params definition hold by an element that rely on offline fullsync source
        	 * @param response response of view execution
        	 * @param type type of the component that holds this offline fullsync source
        	 * @param variables variables definition hold by an element that rely on offline fullsync source
        	 * @returns the result of ComputeKeysFunction or an empty object if an error occured 
        	 */
        	public async getAndApplyC8oformPostQueryFunction(sources, params, response, type, variables) {
        		try {
        			let page = this;
        			var commentBegin = "/*Begin_c8oformPostQuery_function*/";
        			var commentEnd = "/*End_c8oformPostQuery_function*/"
        			var functionName = "var c8oformPostQuery = function";
        			var varName = "var c8oformPostQuery = ";
        			let doc;
        			let hasExecOnline = false;
        			let ready = false;
        
        			try {
        				ready = this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].init;
        			}
        			catch (e) {
        
        			}
        			try {
        				if (window.navigator.onLine && !ready) {
        					hasExecOnline = true;
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync isn''t finished, we will get ddoc to execute offline source over http");
        					doc = await this.getDdocFromHttp(sources, params);
        				}
        				else {
        					page.c8o.log.debug("getAndApplyC8oformComputeKeysFunction, we are online and sync is finished, or we are offline, we will get ddoc to execute offline source over fullsync.get");
        					doc = await this.getDdocFromBase(sources, params);
        				}
        			}
        			catch (e) {
        				try {
        					if (hasExecOnline) {
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source over http, we will try in fullsync.get");
        						doc = await this.getDdocFromBase(sources, params);
        					}
        					else {
        						page.c8o.log.warn("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to execute offline source in fullsync.get, we will try over http");
        						doc = await this.getDdocFromHttp(sources, params);
        					}
        				}
        				catch (e) {
        					page.c8o.log.error("getAndApplyC8oformComputeKeysFunction, we failed to get ddoc to to execute offline source over http and fullsync.get");
        				}
        			}
        			doc = doc["views"][params.view].map;
        			var functionStr = doc.substring(doc.indexOf(commentBegin) + commentBegin.length, doc.indexOf(commentEnd)).trim();
        			functionStr = functionStr.substring(functionStr.indexOf(varName) + varName.length);
        			var args = [response, type, variables, params];
        			return eval("(" + functionStr + ").apply(this,args)");
        		}
        		catch (e) {
        			return null;
        		}
        	}
        
        	/**
        	 * this function is responsible to identify all offline fullsync data sources and determine if they have to reset or not. It''s also setup global objects to watch each sources status (dbs and view indexes)
        	 * @param list An array containing all elements that defines the form usally comming from form.formulaire
        	 * @returns 
        	 */
        	public async getFullsyncSources(list) {
        		let page = this;
        		let resetObject = {};
        		try {
        			for (let item of list) {
        				if (item["type"] == "ion-card") {
        					this.getFullsyncSources(item["children"]);
        				}
        				else if (item["config"]["sourceEnabled"] == true || item.sources) {
        					let sources: any = this["searchForSources"](item, "sources", true, true);
        					let findName = sources.findName;
        					if (findName != "" && sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync) {
        						if (this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] == null) {
        							this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] = {};
        						}
        						let localC8o = undefined;
        						try {
        							if (resetObject[sources.fullSyncArgs.connectorName] == undefined) {
        								//check for reset
        								try {
        									localC8o = await this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".get", { docid: "_local/c8o" }).async();
        									//set max listener
        									page.c8o.c8oFullSync["fullSyncDatabases"][page.c8o.database.localName(sources.fullSyncArgs.connectorName) + "_device"].database.setMaxListeners(100);
        									let has_reset = await page.c8o.c8oFullSync["fullSyncDatabases"][page.c8o.database.localName(sources.fullSyncArgs.connectorName) + "_device"].checkResetBase();
        									if (has_reset) {
        										page.c8o.log.debug("A fs:// source database has been reset we will reload app");
        
        										let toastController = this.getInstance(ToastController);
        										let toast = await toastController.create({
        											message: page["translate"].instant("db_reset"),
        											duration: 10000,
        											position: ''bottom'',
        											cssClass: "changeToast",
        											"buttons": [
        												{
        													text: page["translate"].instant("restart_app_update"),
        													role: ''cancel'',
        													side: ''end''
        												}
        											]
        										});
        										toast.onDidDismiss().then(() => {
        											window.location.reload();
        										});
        										toast.present();
        										return { restart: true };
        									}
        								}
        								catch (e) {
        
        								}
        								resetObject[sources.fullSyncArgs.connectorName] = true;
        							}
        							localC8o = await this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".get", { docid: "_local/c8o" }).async();
        							if (localC8o.indexed != undefined && localC8o.indexed[sources.sha] == true) {
        								if (this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed == undefined) {
        									this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed = {};
        								}
        								this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] = false;
        								this.c8o.log.debug("Got a _local/c8o doc for source database : " + sources.fullSyncArgs.connectorName + " and view " + sources.fullSyncArgs["ddoc"] + "/" + sources.fullSyncArgs["view"] + " ==> Do not display loader for this base");
        							}
        							else {
        								throw new Error();
        							}
        						}
        						catch (e) {
        							if (this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed == null) {
        								this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed = {};
        							}
        							this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[sources.sha] = false;
        							this.c8o.log.debug("no _local/c8o doc for source database : " + sources.fullSyncArgs.connectorName + " and view " + sources.fullSyncArgs["ddoc"] + "/" + sources.fullSyncArgs["view"] + " ==> This is first sync, waiting for full replication before showing form");
        						}
        					}
        				}
        			}
        		}
        		catch (e) {
        			this.c8o.log.error("[getFullsyncSources] an error occured " + JSON.stringify(e));
        		}
        	}
        
        	/**
        	 * this function is responsible to handle any source of the form and compute and execute it
        	 * @param list An array containing all elements that defines the form usally comming from form.formulaire
        	 * @param redList An array that will hold missing required responses with the adequate structure
        	 * @param formSubmit An array that will hold responses with the adequate structure 
        	 * @returns functions id to be called at init
        	 */
        	public fillSources(list, redList, formSubmit): Array<string> {
        		let page = this;
        		let idsToCall: Array<string> = [];
        		try {
        			// Iterating over each item if list
        			for (let item of list) {
        				// if item is a card, recursively call
        				if (item["type"] == "ion-card") {
        					let interIDs = this.fillSources(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"]);
        					idsToCall = idsToCall.concat(interIDs);
        				}
        				// only watch for enabled grid or select sources
        				else if ((item["config"]["sourceEnabled"] == true && item["type"] == "select") || (item.sources && item["type"] == "grid") || (item.sources && item["type"] == "chart") || (item.sources && item["type"] == "map")) {
        					//search source name and params
        					let sources: any = page["searchForSources"](item, "sources", true);
        					let findName = sources.findName;
        					// if there is a sequence found
        					if (findName != "") {
        						let findVars = sources.findVars;
        						// find objects that have to call this functions
        						let ObjectThatHaveToCallFunc = sources.ObjectThatHaveToCallFunc;
        						// unique hash for this sequence with thoses parameters
        						let sha = sources.sha;
        						let Osha = "" + sha;
        						sha += item.id;
        						this.shaById[item.id] = sha;
        						let postFunc, failFunc, prevFunc: any;
        						if (this.functionsExecById[sha] == undefined) {
        							this.functionsExecById[sha] = {};
        						}
        						// if this sequence withn thoses parameters has not been founded yet add it
        						if (this.functionsById[sha] == undefined) {
        							idsToCall.push(sha);
        							this.functionsById[sha] = async () => {
        								// cancel all others executions for the same component
        								for (let key in this.functionsById[sha]) {
        									this.functionsById[sha][key] = false;
        								}
        								// register myself as executing
        								let idExec = new Date().getTime() + "_" + (Math.random() + "").substring(2);
        								this.functionsExecById[sha][idExec] = true;
        
        								// check for cancel order
        								if (this.functionsExecById[sha][idExec] == false) {
        									page.c8o.log.debug("Canceling execution of " + item.name + " source (" + idExec + ") because a newer was launched");
        									return;
        								}
        								// call preload functions
        								//...
        								this.previousAndPostFunctions[sha].previous.forEach((func) => {
        									func();
        								})
        								if (this.functionsExecById[sha][idExec] == false) {
        									page.c8o.log.debug("Canceling execution of " + item.name + " source (" + idExec + ") because a newer was launched");
        									return;
        								}
        								let variables = {};
        								page["computeVariable"](findVars, variables, item);
        								/*
        								let params = {[C8oLocalCache.PARAM]: new C8oLocalCache(Priority.LOCAL, 3.154e+10)}
        								page.c8o.callJsonObject(findName, {...variables, ...params})
        								*/
        								let hadAPrepare = false;
        								// create empty object for params
        								let params = {};
        								// enable execution by default
        								let canExec = true;
        								// set default requestable
        								let requestable = "" + findName;
        								// if this is a fullsync / hybrid source
        								if (sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync) {
        									// set default params
        									let defaults = {};
        									defaults["ddoc"] = sources.fullSyncArgs.ddoc;
        									defaults["view"] = sources.fullSyncArgs.view;
        									defaults["__live"] = sources.fullSyncArgs.__live;
        									if (this.functionsExecById[sha][idExec] == false) {
        										page.c8o.log.debug("Canceling execution of " + item.name + " source (" + idExec + ") because a newer was launched");
        										return;
        									}
        									// compute parameters for exec
        									let computedParams = await page.getAndApplyC8oformComputeKeysFunction(sources, defaults, variables);
        									// override defaults parameters with computed ones
        									params = { ...defaults, ...computedParams }
        									// if disable __live is asked
        									if (params["__live"] == false) {
        										delete params["__live"];
        									}
        									else {
        										// push live request to an array to be able to stop them when leaving the form
        										if (this.local.liveToCancel == null) {
        											this.local.liveToCancel = []
        										}
        										this.local.liveToCancel.push(params["__live"]);
        									}
        									// override requestable
        									if (params["__requestable"] != undefined && params["requestable"] != "") {
        										requestable = "" + params["__requestable"];
        									}
        									// or set default value if no override where asked
        									else {
        										requestable = "" + findName;
        									}
        									// if ts an hybird request ( fs + callJSON)
        									if (params["__prepare"] != undefined) {
        										// if view is not indexed
        										if (this.local.alreadyDoing == undefined) {
        											this.local.alreadyDoing = {};
        										}
        										if (this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] != undefined && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] != true && this.local.alreadyDoing[Osha] != true) {
        											this.local.alreadyDoing[Osha] = true;
        											var params2 = { ...defaults, ...params["__prepare"]["__params"] };
        											// we wont launch this request as live since its only for indexing
        											delete params2["__live"];
        											// if requestable is set use it if not use default one
        											let requestable2 = params["__prepare"]["__requestable"] != undefined ? params["__prepare"]["__requestable"] : ("" + findName);
        											this.local.promisesFS[sources.fullSyncArgs.connectorName]
        												.then((res) => {
        													// call fs request to index
        													page.c8o.callJsonObject(requestable2, params2)
        														.then((res) => {
        															// store result
        															this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] = true;
        															let indexed = { [Osha]: true };
        															this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        																_id: "_local/c8o",
        																"_use_policy": "merge",
        																"indexed": indexed
        															})
        															return null;
        														})
        														.fail((err) => {
        															console.log("NEW FAIL", err);
        														})
        												})
        										}
        									}
        									// check if requestable must be executed
        									if (params["__execute"] != undefined && params["__execute"] == false) {
        										canExec = false;
        									}
        									else {
        										canExec = true;
        									}
        									if (params["__prepare"] != undefined) {
        										hadAPrepare = true;
        									}
        									delete params["__prepare"];
        								}
        								// if this is a "classic" source
        								else {
        									params = variables;
        								}
        								try {
        									let followingCode = async () => {
        										//if fullsync
        										if (sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync) {
        											if (this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] != undefined && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] == false && requestable.indexOf("fs://") == 0 && hadAPrepare == false) {
        												this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] = true;
        												let indexed = { [Osha]: true };
        												this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        													_id: "_local/c8o",
        													"_use_policy": "merge",
        													"indexed": indexed
        												})
        											}
        											try {
        												if (this.functionsExecById[sha][idExec] == false) {
        													page.c8o.log.debug("Canceling execution of " + item.name + " source (" + idExec + ") because a newer was launched");
        													return;
        												}
        												res = await page.getAndApplyC8oformPostQueryFunction(sources, params, res, item["type"], variables)
        											}
        											catch (e) {
        
        											}
        										}
        										if (this.functionsExecById[sha][idExec] == false) {
        											page.c8o.log.debug("Canceling execution of " + item.name + " source (" + idExec + ") because a newer was launched");
        											return;
        										}
        										// call post load functions
        										//...
        										if (res._c8o_update != false) {
        											console.log("we will update", { res: res, requestable: requestable, params: params });
        											this.previousAndPostFunctions[sha].post.forEach((func) => {
        												let res2 = { ...res };
        												func(res2);
        											})
        										}
        										else {
        											console.log("we won''t update", { res: res, requestable: requestable, params: params });
        										}
        										if (res._c8o_forceLoader != undefined && res._c8o_forceLoader != false) {
        											console.log("we will force loader status to " + res._c8o_forceLoader);
        											try {
        												res._c8o_forceLoader = +res._c8o_forceLoader;
        												if (res._c8o_forceLoader != "NaN") {
        													// do
        													switch (res._c8o_forceLoader) {
        														case 0:
        															page.c8o.log.debug("Forcing loader to display");
        															if (item.type == "grid") {
        																page.c8o.log.debug("grid loader detected, showing it");
        																page.local.updating[item.id] = 0;
        																setTimeout(() => {
        																	this.showGridOverlayById(item.id);
        																	page.ref.detectChanges();
        																})
        																page.ref.detectChanges();
        															}
        															else if (item.type == "select") {
        																page.c8o.log.debug("select loader detected, showing it");
        																page.local.updating[item.id] = 0;
        																page.ref.detectChanges();
        															}
        															break;
        														case 1:
        															page.c8o.log.debug("Forcing loader dismiss");
        															if (item.type == "grid") {
        																page.c8o.log.debug("grid loader detected, dismiss it");
        																page.local.updating[item.id] = 1;
        																setTimeout(() => {
        																	this.hideGridOverlayById(item.id);
        																	page.ref.detectChanges();
        																})
        																page.ref.detectChanges();
        															}
        															else if (item.type == "select") {
        																page.c8o.log.debug("select loader detected, dismiss it");
        																page.local.updating[item.id] = 1;
        																page.ref.detectChanges();
        															}
        															break;
        														case 1:
        															page.c8o.log.debug("Forcing loader dismiss due to error");
        															if (item.type == "grid") {
        																page.c8o.log.debug("grid loader detected, dismiss it and display error message");
        																page.local.updating[item.id] = 2;
        																setTimeout(() => {
        																	this.hideGridOverlayById(item.id);
        																	page.ref.detectChanges();
        																})
        																page.ref.detectChanges();
        															}
        															else if (item.type == "select") {
        																page.c8o.log.debug("select loader detected, dismiss it and display error message");
        																page.local.updating[item.id] = 2;
        																page.ref.detectChanges();
        															}
        															break;
        													}
        												}
        												else {
        													page.c8o.log.debug("_c8o_forceLoader has an invalid value: " + res._c8o_forceLoader);
        												}
        											}
        											catch (e) {
        												page.c8o.log.error("An error occured while running _c8o_forceLoader" + e);
        											}
        										}
        										page.ref.detectChanges();
        									}
        									let res;
        									if (canExec) {
        										if (this.functionsExecById[sha][idExec] == false) {
        											page.c8o.log.debug("Canceling execution of " + item.name + " source (" + idExec + ") because a newer was launched");
        											return;
        										}
        										try {
        											res = await page.c8o.callJsonObject(requestable, params).async();
        											await followingCode();
        										}
        										catch (e) {
        											this.c8o.log.error("An error occured while running data source\n" + JSON.stringify(e));
        										}
        									}
        									else {
        										await followingCode();
        									}
        								}
        								catch (err) {
        									if (sources.fullSyncArgs != undefined && sources.fullSyncArgs.isFullsync) {
        										if (this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName] != undefined && this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] == false) {
        											this.global.waitFSBaseStatus[sources.fullSyncArgs.connectorName].indexed[Osha] = true;
        											let indexed = { [Osha]: true };
        											this.c8o.callJsonObject("fs://" + sources.fullSyncArgs.connectorName + ".post", {
        												_id: "_local/c8o",
        												"_use_policy": "merge",
        												"indexed": indexed
        											})
        										}
        									}
        									if (this.functionsExecById[sha][idExec] == false) {
        										page.c8o.log.debug("Canceling execution of " + item.name + " source (" + idExec + ") because a newer was launched");
        										return;
        									}
        									// call fail functions
        									//...
        									this.previousAndPostFunctions[sha].fail.forEach((func) => {
        										let err2 = { ...err };
        										func(err2);
        									})
        								}
        							}
        							// has we know parameters, we not each object that have to call this sequence do it once
        							this.fillFunctionsIDToBeCalledFromObjectThatHaveToCallFunc(ObjectThatHaveToCallFunc, sha);
        						}
        						
        						if (item.type == "chart") {
        							// preload function for chart
        							prevFunc = () => {
        							}
        							
        							// postload function for chart
        							postFunc = (res) => {
        								let model = { labels:[],  xaxis: {categories:[]}, series: [] };
        								let series = {}
        								let round = item.config.round != undefined ? item.config.round : 2;
        								res.data.forEach((row) => {
        									let i = 0;
        									if (item.config?.firstColAsXAxis == true) {
        										//build Xaxis and labels using the first col
        										Object.keys(row).forEach((col) => {
        											// check if the col is hidden if yes skip it
        											if (row[col].hidden == true) {
        												return;
        											}
        											// only the first col is in the xaxis
        											
        											if (i == 0) {
        												let val
        												if (Array.isArray(row[col].value)) 
        													val = row[col].value[0].value;
        												else 
        													val = row[col].value;
        												
        												model.xaxis.categories.push(val)
        												
        												if (item.config.type == "pie") {
        													model.labels.push(val)
        												}
        											} 
        											i++
        										})
        									}
        									// now build the series using all the array
        									
        									switch (item.config.type) {
        										case ''bar'':
        										case ''line'':
        										case ''area'':
        										case ''treemap'':
        											i = 0;
        											Object.keys(row).forEach((col) => {
        												// check if the col is hidden if yes skip it
        												if (row[col].hidden == true) {
        													return;
        												}
        												// Skip the first col
        												if (i == 0) {
        													i++
        													return
        												}
        												if (series[col] == undefined) {
        													series[col] = { name: col , data: [] };
        												}
        												
        												let val
        												if (Array.isArray(row[col].value)) {
        													// Round the value to 2 decimal
        													val = Math.round(row[col].value[0].value * 10 ** round) / 10 ** round;
        												} else {
        													val = Math.round(row[col].value * 10 ** round) / 10 ** round;
        												}
        												// test if val is a number and push it to the series only if it is
        												if (!isNaN(val)) {
        													series[col].data.push(val);
        												}
        												i++
        												// for each key in series add the data to the series array
        											})
                                                    break;
        										case ''pie'':
        										case ''donut'':
        										case ''radar'':
        											i = 0
        											let colFound = false
        											Object.keys(row).forEach((col) => {
        												// check if the col is hidden if yes skip it
        												if (row[col].hidden == true) {
        													return;
        												}
        												if (i == 0) { // Skip first non hidden column		
        													i++
        													return
        												}
        												
        												
        												if (colFound)
        													return;
        												
        												let val
        												if (Array.isArray(row[col].value)) {
        													// Round the value to 2 decimal
        													val = Math.round(row[col].value[0].value * 10 ** round) / 10 ** round;
        												} else {
        													val = Math.round(row[col].value * 10 ** round) / 10 ** round;
        												}
        												// test if val is a number and push it to the series only if it is
        												if (!isNaN(val)) {
        													model.series.push(val)
        													colFound = true
        												}
        												i++
        											})
        											break;
        										default:
        											break
        									}
        								})
        								
        								Object.keys(series).forEach((key) => {
        									model.series.push(series[key]);
        								})
        								page.local.sourceValue[item.name] = model
        							}
        						}
        						
        						if (item.type == "grid") {
        							if (page.local.sourceValue[item.name] == undefined) {
        								page.local.sourceValue[item.name] = { colDef: [], data: [] };
        							}
        							// preload function for grid
        							prevFunc = () => {
        								page.local.sourceValue[item.name]["data"] = [];
        
        								setTimeout(() => {
        									this.showGridOverlayById(item.id);
        								})
        								page.local.updating[item.id] = 0;
        								//page.local.sourceValue[item.name]["data"] = [];
        							}
        							// postload function for grid
        							postFunc = (res) => {
        								// find Colomn definitions
        								if (res.data != undefined && res.data.length > 0) {
        									let colDef =
        										Object.keys(res.data[0]).map((y) => {
        											let current = res.data[0];
        											let obj = { "editable": false };
        											if (y != "__rowValue" && !(res.data[0][y]["hidden"] == true)) {
        												// if cell is a simple string
        												if (typeof (res.data[0][y]) === "string") {
        													obj["field"] = y;
        													return obj;
        												}
        												// if it''s a more complex object
        												else {
        													// if cell has a specified name then take it
        													if (current[y].displayName != undefined) {
        														obj["field"] = current[y].displayName;
        													}
        													// else take key name
        													else {
        														obj["field"] = y;
        													}
        													// if cell has an html type 
        													if (current[y].type == "html") {
        														// create a cell renderer to have innerHTML
        														let HTMLCellRenderer = function HTMLCellRenderer() { };
        														HTMLCellRenderer.prototype.init = function (params) {
        															try {
        																this.eGui = document.createElement(''div'');
        																// if displayValue field exists display it, if not display field value																		
        																this.eGui.innerHTML = params.value.displayValue != undefined ? params.value.displayValue : params.value.value;
        															}
        															catch (e) {
        																this.eGui.innerHTML = "<p>ko<p>"
        															}
        														}
        														HTMLCellRenderer.prototype.getGui = function () {
        															return this.eGui;
        														};
        														HTMLCellRenderer.prototype.refresh = function (params) {
        															this.eGui.innerHTML = params.valueFormatted ? params.valueFormatted : params.value;
        															return true;
        														}
        														obj["cellRenderer"] = HTMLCellRenderer;
        													}
        													// if cell has a text type or no type
        													else {
        														let TextCellRenderer = function TextCellRenderer() { };
        														TextCellRenderer.prototype.init = function (params) {
        															try {
        																this.eGui = document.createElement(''div'');
        																let p = document.createElement(''p'');
        																p.textContent = params.value.displayValue != undefined ? params.value.displayValue : params.value.value;
        																p.style.whiteSpace = "normal"
        																this.eGui.appendChild(p);
        																// if displayValue field exists display it, if not display field value																		
        																//this.eGui.innerHTML = params.value.displayValue != undefined ? params.value.displayValue : params.value.value;
        															}
        															catch (e) {
        																this.eGui.innerHTML = "<p>ko<p>"
        															}
        														}
        														TextCellRenderer.prototype.getGui = function () {
        															return this.eGui;
        														};
        														TextCellRenderer.prototype.refresh = function (params) {
        															this.eGui.innerHTML = params.valueFormatted ? params.valueFormatted : params.value;
        															return true;
        														}
        														obj["cellRenderer"] = TextCellRenderer;
        													}
        													// define default sorting field
        													let sortingField = "displayValue";
        													if (current[y].sortingField == "displayValue" || current[y].sortingField == "" || current[y].sortingField == undefined) {
        														sortingField = "displayValue";
        													}
        													else {
        														sortingField = current[y].sortingField;
        													}
        													if (current[y].sortingType == "text" || current[y].sortingType == "string" || current[y].sortingType == "default" || current[y].sortingType == "" || current[y].sortingType == undefined) {
        														obj["comparator"] = (valueA, valueB, nodeA, nodeB, isInverted) => ("" + (valueA[sortingField])).localeCompare("" + (valueB[sortingField]))
        													}
        													else if (current[y].sortingType == "number") {
        														obj["comparator"] = (valueA, valueB, nodeA, nodeB, isInverted) => (+valueA[sortingField]) - (+valueB[sortingField])
        													}
        													return obj;
        												}
        											}
        											// hide __rowValue
        											else {
        												obj["hide"] = true;
        												obj["field"] = y;
        												return obj;
        											}
        										});
        									// foreach row
        									let data = res.data.map((x) => {
        										var row = { ...x };
        										// foreach col
        										Object.keys(row).forEach((col) => {
        											// if col is not a simple string
        											if (typeof (row[col]) === "object") {
        												// if there is a displayColName
        												if (row[col].displayName != undefined) {
        													// rename the col name
        													row[row[col].displayName] = row[col];
        													// save the technical name
        													row[row[col].displayName].technicalName = col;
        													// delete the usless col if name is diffrent from displayName see #625;
        													if (col != row[col].displayName) {
        														delete row[col];
        													}
        												}
        												else {
        													// save the technical name (same as its name)
        													row[col].technicalName = col;
        												}
        											}
        										});
        										return row;
        									})
        									page.local.updating[item.id] = 1;
        									setTimeout(() => {
        										this.hideGridOverlayById(item.id);
        									})
        									page.local.sourceValue[item.name]["colDef"] = colDef;
        									page.local.sourceValue[item.name]["data"] = data;
        									// in case of user wants all data to be returned to response
        									if (item.config.returned_value === "all_the_data") {
        										formSubmit[item.name]["value"] = res.data;
        									}
        									page.ref.detectChanges();
        								}
        								else {
        									setTimeout(() => {
        										this.hideGridOverlayById(item.id);
        									})
        									page.local.sourceValue[item.name]["data"] = [];
        								}
        							}
        							// fail function for grid
        							failFunc = (err) => {
        								setTimeout(() => {
        									this.hideGridOverlayById(item.id);
        								})
        								page.c8o.log.error("an error occured while trying to laod source for a grid", err);
        								page.local.updating[item.id] = 2;
        							}
        						}
        						else if (item["type"] == "select") {
        							// preload function for select
        							prevFunc = () => {
        								page.local.updating[item.id] = 0;
        							}
        							// postload function for select
        							postFunc = (res) => {
        								let defaultSelected = "";
        								let defaultBinded = "";
        								// find Colomn definitions
        								let urlParams = page.local.urlParams.get(item["name"]);
        								if (formSubmit[item.name] != undefined && formSubmit[item.name].children != undefined && formSubmit[item.name].children.length > 0) {
        									const tmp = formSubmit[item.name].children.filter(x => x.selected == true);
        									if (tmp != undefined && tmp.length > 0) {
        										urlParams = tmp[0].value
        									}
        								}
        								formSubmit[item["name"]]["children"] = [];
        								let array = [];
        								if (!(res["value"] == undefined)) {
        									if (typeof (res["value"]) == "string") {
        										array.push(res["value"]);
        									}
        									else {
        										if (res.value instanceof Array) {
        											for (let child of res["value"]) {
        												array.push(child);
        											}
        										}
        										else {
        											array.push(res["value"]);
        										}
        									}
        								}
        								for (let child of array) {
        									let selected2 = false;
        									if (child == urlParams) {
        										defaultSelected = child;
        										defaultBinded = child;
        										selected2 = true;
        									}
        									else if (child != undefined && urlParams != undefined && child.value != undefined && JSON.stringify(child.value) == JSON.stringify(urlParams)) {
        										defaultSelected = child.value;
        										defaultBinded = child;
        										selected2 = true;
        									}
        									let objectToPush = { selected: selected2 };
        									if (typeof (child) == "string") {
        										// simple value mode
        										objectToPush["value"] = child;
        									}
        									else {
        										if (child.displayValue != undefined) {
        											objectToPush["displayValue"] = child.displayValue;
        										}
        										if (child.value != undefined) {
        											objectToPush["value"] = child.value;
        										}
        									}
        									formSubmit[item["name"]]["children"].push(objectToPush);
        								}
        								// fill helper to get select value
        								try {
        									this.local.techSelect[item["name"]] = defaultBinded;
        								}
        								catch (e) {
        
        								}
        								formSubmit[item["name"]]["value"] = defaultSelected;
        								page.local.sourceValue[item.name] = array;
        								page.local.updating[item.id] = 1;
        								formSubmit[item["name"]]["value"] = defaultSelected;
        							}
        							// fail function for grid
        							failFunc = (err) => {
        								page.c8o.log.error("an error occured while trying to laod source for a select", err);
        								page.local.updating[item.id] = 2;
        							}
        						}
        						// register previous and post functions for this sequence
        						if (this.previousAndPostFunctions[sha] == undefined) {
        							this.previousAndPostFunctions[sha] = { previous: [], post: [], fail: [] }
        						}
        						this.previousAndPostFunctions[sha].previous.push(prevFunc);
        						this.previousAndPostFunctions[sha].post.push(postFunc);
        						this.previousAndPostFunctions[sha].fail.push(failFunc);
        					}
        				}
        			}
        		}
        		catch (e) {
        			page.c8o.log.error("An error occured while executing function fillFormSubmit into vieworPage", e);
        		}
        		return idsToCall;
        	}
        
        	/**
        	 * walk a given item to find enabled sources within it 
        	 * 
        	 * @param item item of the form for which we are searching for sources
        	 * @param path the path to find sources within item
        	 * @param isSource define if its a source or an action
        	 * @param noEval define weither this source should be evaluated at the end
        	 * @returns {findVars: Object, findName: string, ObjectThatHaveToCallFunc: Array, sha: string, fullSyncArgs: Object } findVars are the computed variables found, findName is the source name, ObjectThatHaveToCallFunc holds objects id that will update value of current source, sha make a unique reference for this source : a sha of its name and arguments, fullSyncArgs if it''s a fullsync source, then holds fullsync arguments
        	 */
        	public searchForSources(item: any, path: string, isSource: boolean = true, noEval: boolean = false): Object {
        		// name of the source to be find
        		let sourceName = "";
        		// vars of the source to be find
        		let vars = {};
        		// fullsync arguments of the source to be find
        		let fullSyncArgs = {};
        		// an array that holds objects id that will update value of current source
        		let ObjectThatHaveToCallFunc = [];
        
        		// itterates over current items sources to find which one is enabled
        		for (let w in item[path]) {
        			// if current source is enabled
        			if (item[path][w].enabled === true) {
        				// iterrate over each vars of the source to find theirs value and store them
        				for (const [key, value] of (<any>Object).entries(item[path][w]["vars"])) {
        					vars[key] = value;
        				}
        				// if it''s a fullsync source, then fill fullsync arguments
        				if (item[path][w]["fullsync"] == true) {
        					fullSyncArgs["isFullsync"] = true;
        					sourceName = "fs://" + item[path][w]["connectorName"] + ".view";
        					let viewName = item[path][w]["viewName"].split("/");
        					fullSyncArgs["ddoc"] = viewName[0];
        					fullSyncArgs["view"] = viewName[1];
        					fullSyncArgs["__live"] = w;
        					fullSyncArgs["connectorName"] = item[path][w]["connectorName"]
        					fullSyncArgs["viewName"] = item[path][w]["viewName"];
        				}
        				// if it''s a standard source, just save its name
        				else {
        					sourceName = w;
        				}
        			}
        		}
        
        		// make a unique reference for this source : a sha of its name and arguments
        		const sha = sha256(JSON.stringify(sourceName) + JSON.stringify(vars));
        
        		// if this source should no be evaluated then set its vars to empty
        		if (noEval) {
        			for (let va in vars) {
        				vars[va] = "";
        			}
        		}
        		// if this source should be evaluated
        		else {
        			// itterate over each vars
        			for (let va in vars) {
        				// if current var is the native select filter
        				if (isSource && va == "forms_filter") {
        					// add a ternary which evaluates the native select filter
        					vars[va] = "page.local.filters_elems[''" + item.id + "''] == undefined ? '''': page.local.filters_elems[''" + item.id + "'']";
        					// indicate that item has to be update when its value change
        					ObjectThatHaveToCallFunc.push(item.id);
        				}
        				else {
        					// if current var is an attachment there is nothing to be evaluated
        					if (vars[va].from_attachment != undefined && vars[va].from_attachment == true) { }
        					// otherwise
        					else {
        						//let regex = /\$\$(?:START)?(\d+)(.*?)(?:END)?(?:\d+)?\$\$/;
        						let regex = /\$\$START(\d+)(.*?)(END\d+)\$\$/;
        						// if its a convertigo x baserow builtin compatible var, then formate it  
        						if (vars[va]["type"] == "filter") {
        							// prepare the expected format
        							let res = { filters: [], mode: null };
        							// evaluate if its a "AND" or a "OR" filter
        							res.mode = vars[va].condVisible.toUpperCase();
        							// foreach var add an entry
        							for (let cond of vars[va].conds) {
        								if(cond.val1.name != "" && cond.operator != ""){
        									res.filters.push({
        										"field": cond.val1.name,
        										"op": cond.operator,
        										"value": this.stringOf$$ToCode(cond.val2.str, cond.val2.type, ObjectThatHaveToCallFunc, regex)
        									})
        								}
        							}
        							// store the result
        							vars[va] = res;
        						}
        						else {
        							// otherwise
        							let str = this.stringOf$$ToCode(vars[va].str, vars[va].type, ObjectThatHaveToCallFunc, regex);
        							vars[va] = str;
        						}
        					}
        				}
        			}
        		}
        		return { findVars: vars, findName: sourceName, ObjectThatHaveToCallFunc: ObjectThatHaveToCallFunc, sha: sha, fullSyncArgs: fullSyncArgs }
        	}
        
        	/**
         * transforms a string of $$ to a c8oforms code compatible expression
         * 
         * @param str entry string of $$ to be computed to code
         * @param type type of entry string "Aa" or "ts"
         * @param ObjectThatHaveToCallFunc holds objects id that will update value of current source
         * @param regex regex to find $$ expressions:  support both $$standalone and $$start$$end expressions
         * @returns string
         */
        	public stringOf$$ToCode(stringOf$$: string, type: string, ObjectThatHaveToCallFunc: Array<any>, regex) {
        		// if stringOf$$ is null undefined or an empty string there is nothing to transform
        		if (stringOf$$ == undefined || stringOf$$ == "") {
        			return "";
        		}
        		// if it''s a "ts" expression escape backquotes
        		if (!(type != undefined && type == "ts")) {
        			stringOf$$ = "`" + stringOf$$.replace(/`/g, "\\`") + "`";
        		}
        
        		let match;
        		while ((match = regex.exec(stringOf$$)) != null) {
        			// start index of current match - we have to save it to be able to replace actual $$ expression by it''s computed value at the end
        			let iStart = match.index;
        			// end index of current match - we have to save it to be able to replace actual $$ expression by it''s computed value at the end
        			let iEnd = match.index + match[0].length;
        			// if it''s a simple $$ expression, with no args (legacy support) such as $$123456789$$
        			if (match[2] == undefined) {
        				// get target id
        				let id = match[1];
        				// indicate that parent item has to be update when its value change
        				ObjectThatHaveToCallFunc.push(id);
        				// get raw path of the target 
        				let path = this.getPathById(+id);
        				// current value will be stored there
        				let currentVal;
        				// if it''s a "ts" expression
        				if (type != undefined && type == "ts") {
        					currentVal = path;
        				}
        				// if it''s an "Aa" expression
        				else {
        					currentVal = "`+(" + path + " instanceof Object ? JSON.stringify(" + path + ") : " + path + ")+`"
        				}
        				// replace the match string by computed value
        				stringOf$$ = stringOf$$.substring(0, iStart) + currentVal + stringOf$$.substring(iEnd);
        			}
        			// if it''s a modern $$ expression, with args such as $$START{args: args}END$$
        			else {
        				// get target id
        				let id = match[1];
        				// indicate that parent item has to be update when its value change
        				ObjectThatHaveToCallFunc.push(id);
        				// get the definition of this element (base structure)
        				let defElem = this.getItemById(id);
        				// get the runtime value of this element (value)
        				let valElem = this.getPathById(+id);
        				// get metadata 
        				let meta = JSON.parse(match[2].replace(/\\/g, ""));
        				let computedMeta = {};
        				if(meta.nested != null){
        					for(let nestIndex in meta.nested){
        						let currentNested = meta.nested[nestIndex];
        						computedMeta[nestIndex] = this.$$toVal(this.getItemById(currentNested.id),currentNested, "", 0, this.getPathById(+currentNested.id), 0, +currentNested.id, true);
        					}
        				}
        				
        				
        				let tmpStr = "";
        				// if it''s a "ts" expression
        				if (type != undefined && type == "ts") {
        					tmpStr = this.$$toVal(defElem, meta, stringOf$$, iStart, valElem, iEnd, id, true, false)
        				}
        				// if it''s an "Aa" expression
        				else {
        					tmpStr = this.$$toVal(defElem, meta, stringOf$$, iStart, valElem, iEnd, id, false, false)
        				}
        				for(let nestIndex in computedMeta){
        					let strToReplace = ".$$START_SUB"+ nestIndex+ "END_SUB$$";
        					tmpStr = tmpStr.replace(strToReplace, "?.["+computedMeta[nestIndex] + "]");
        				}
        				
        				stringOf$$ = stringOf$$.substring(0, iStart) + tmpStr + stringOf$$.substring(iEnd);
        			}
        		}
        		console.log("computed stringOf$$: ", stringOf$$);
        		return stringOf$$;
        	}
        
        	/**
        	 * compute a given $$ expresion to it''s value code
        	 * @param defElem the definition of target element (base structure)
        	 * @param meta metadata arround the current expression
        	 * @param str expression to be evaluated
        	 * @param iStart start index of current match - we have to save it to be able to replace actual $$ expression by it''s computed value at the end
        	 * @param valElem 
        	 * @param iEnd end index of current match - we have to save it to be able to replace actual $$ expression by it''s computed value at the end
        	 * @param id the id of target element
        	 * @param ts if its a "ts" expression
        	 * @returns string 
        	 */
        	public $$toVal(defElem: any, meta: any, str: string, iStart: number, valElem: any, iEnd: number, id: any, ts: boolean, replaceInstr = true): string {
        		// if defElem is null or undefined there is nothing to compute
        		if (defElem == null) {
        			return "";
        		}
        		// if it''s not a path expression or it''s a graphic formatting expression then generate adequate expression
        		if ((defElem != null && meta.c8otype != "path") || (meta.c8obuiltin && meta.c8opath.split(".")[1] == "graphic_formatting")) {
        			let s = "`+this.getBadge(" + id + ", " + JSON.stringify(defElem) + ", " + valElem + ", " + JSON.stringify(meta) + ", false, ''html'')+`" ;
        			if(replaceInstr){
        				str = str.substring(0, iStart) + s + str.substring(iEnd);
        				return str;
        			}
        			else{
        				return s;
        			}
        			
        		}
        		// for any other kind of expression
        		else {
        			// current value will be stored there
        			let currentVal = "";
        			// get raw path of the target 
        			let path = this.getPathById(+id);
        			// switch type of target
        			switch (defElem.type) {
        				case "grid":
        				case "checkbox":
        				case "radio_group":
        				case "checkbox_group":
        				case "radio":
        				case "slider":
        				case "select":
        				case "datetime":
        				case "time":
        					// if no path is specified and it''s not "ts" expression
        					if (meta.c8opath == "" && !ts) {
        						currentVal = "`+" + this.selected_data_c8o_separated_by_coma(path, defElem.type, "TEXT_format", ts) + "+`";
        					}
        					// if path is specified or if it''s "ts" expression
        					else {
        						// split path
        						let splitted = meta.c8opath.split(".");
        						let diffUndefined = " != undefined";
        						// if it''s a grid or a path
        						if (defElem.type == "grid" && meta.c8otype == "path") {
        							// default base path is :
        							let basePath = "page.local.techGrid";
        							let indexBased = false;
        							// if returned value is either all_the_data or nothing, we will use local source value
        							if (defElem.config.returned_value == "all_the_data" || defElem.config.returned_value == "nothing") {
        								basePath = "page.local.sourceValue";
        								indexBased = true;
        							}
        							
        //							let st = "(" + ("" + basePath) + diffUndefined + " && ";
        							let splittedLen = splitted.length - 1;
        							splitted.forEach((value, index) => {
        								// ensure name of grid has not changed
        								if(index == 0){
        									value = this.getNameById(+id);
        								}
        								// if user first configured it''s grid returned_value to all_the_data or nothing and then changed it, ignore index key
        								if (index == 1 && !isNaN(+value) && !indexBased) {
        									// do nothing and ignore first value key index
        								}
        								// if user first configured it''s grid returned_value to cell_selected or row_selected and then changed it, include index key
        								else if (index == 1 && isNaN(+value) && indexBased) {
        									// add default 0 index key
        									basePath += "?.[''" + 0 + "'']";
        //									st += ("" + basePath) + diffUndefined + (splittedLen != index ? " && " : " ");
        									// then add the current key value
        									basePath += "?.[''" + value + "'']";
        //									st += ("" + basePath) + diffUndefined + (splittedLen != index ? " && " : " ");
        								}
        								else if(index == 1 && !indexBased){
        									basePath += "?.[page.getIndexGridAtRunTime(''"+value+"'', ''"+defElem.name+"'')]";
        //									st += ("" + basePath) + diffUndefined + (splittedLen != index ? " && " : " ");
        								}
        								// nominal case everything has been confired correctly
        								else {
        									basePath += "?.[''" + value + "'']";
        //									st += ("" + basePath) + diffUndefined + (splittedLen != index ? " && " : " ");
        									// if experssion is not indexed based, we need to search into data key
        									if (index == 0) {
        										basePath += "?.[''data'']";
        //										st += ("" + basePath) + diffUndefined + (splittedLen != index ? " && " : " ");
        									}
        								}
        							})
        							let st = "(" + ("" + basePath) + diffUndefined + " ? " + basePath + " : ''''" + ")";
        							if (ts) {
        								currentVal = st //+ .then(()=>{page.ref.markForcheck});
        							}
        							else {
        								currentVal = "`+" + st + "+`";
        							}
        						}
        						// if it''s a builtin expression
        						else if (meta.c8obuiltin == "true") {
        							//{c8otype: ''path'', c8opath: ''select1.value'', c8oPrettyPath: '''', c8obuiltin: ''false''}
        							//{c8otype: ''path'', c8opath: ''select1.TEXT_format'', c8oPrettyPath: '''', c8obuiltin: ''true''}
        							let typeTargeted = splitted[1];
        							let verb = splitted[2];
        							if (verb == null) {
        								verb = typeTargeted;
        							}
        							if(ts){
        								currentVal = this[verb](path, defElem.type, typeTargeted, ts);
        							}
        							else{
        								currentVal = "`+" + this[verb](path, defElem.type, typeTargeted, ts) + "+`";
        							}
        							
        						}
        						else if(defElem.type == "select" && Object.values(defElem.sources).find((x: any)=>{return x.enabled == true}) && splitted?.[1] == "displayValue"){
        							let basePath = "page.local.techSelect";
        							splitted.forEach((value, index) => {
        								// ensure name of grid has not changed
        								if(index == 0){
        									value = this.getNameById(+id);
        								}
        								// if user first configured it''s grid returned_value to all_the_data or nothing and then changed it, ignore index key
        //								if (index == 1) {
        //									// do nothing and ignore first value key index
        ////									basePath += `?.[${path}]?.${value}`;
        //									basePath += `?.[${path}]?.${value}`;
        //								}
        								// nominal case everything has been confired correctly
        //								else {
        									basePath += "?.[''" + value + "'']";
        //									st += ("" + basePath) + diffUndefined + (splittedLen != index ? " && " : " ");
        //								}
        							});
        							let st = "(" + ("" + basePath) + diffUndefined + " ? " + basePath + " : ''''" + ")";
        							if (ts) {
        								currentVal = st //+ .then(()=>{page.ref.markForcheck});
        							}
        							else {
        								currentVal = "`+" + st + "+`";
        							}
        							
        						}
        						// in any other case
        						else {
        							/**
        							// default base path is :
        							let basePath = "page.local.techSelect";
        							let diffUndefined = " != undefined";
        							let st = "(" + ("" + basePath) + diffUndefined + " && ";
        							let splittedLen = splitted.length - 1;
        							splitted.forEach((value, index) => {
        								basePath += "[''" + value + "'']";
        								st += ("" + basePath) + diffUndefined + (splittedLen != index ? " && " : " ");
        
        							})
        							st += "? " + basePath + " : ''''" + ")";
        							if (ts) {
        								currentVal = st;
        							}
        							else {
        								currentVal = "`+" + st + "+`";
        							}*/
        							if (ts) {
        								currentVal = path;
        							}
        							else {
        								//currentVal = "`+(eval("+ path +"))+`"
        								currentVal = "`+" + path + "+`";
        							}
        						}
        					}
        
        					break;
        				case "location":
        					// default for str checkbox_grp
        					if (meta.c8opath == "") {
        						currentVal = "`+" + this.selected_data_c8o_separated_by_coma(path, defElem.type, "TEXT_format", ts) + "+`";
        					}
        					else {
        						let splitted = meta.c8opath.split(".");
        						if (meta.c8obuiltin == "true" || meta.c8obuiltin == true) {
        							let typeTargeted = splitted[1];
        							let verb = splitted[2];
        							if (verb == null) {
        								verb = typeTargeted;
        							}
        							let sliced3 = splitted.slice(3);
        							let strThen = sliced3.length > 0 ? "." +sliced3.join(".") :"";
        							if (ts) {
        								currentVal = this[typeTargeted](path, defElem.type, verb, ts) + strThen;
        							}
        							else {
        								currentVal = "`+" + this[typeTargeted](path, defElem.type, verb, ts) + "." + strThen + "+`";
        							}
        						}
        					}
        					break;
        				default:
        					if (ts) {
        						currentVal = path;
        					}
        					else {
        						let page = this;
        						let e = eval(path);
        						//currentVal = "`+(eval("+ path +"))+`"
        						if(e && e.then != undefined){
        							currentVal = "`+ (await (" + path + "))+`";
        						}
        						else{
        							currentVal = "`+" + path + "+`";
        						}
        						
        					}
        					break;
        			}
        			if(replaceInstr){
        				str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
        				return str;
        			}
        			else{
        				return currentVal;
        			}
        			
        		}
        	}
        
        	/**
        	 * this function computes and store html$ lang to executable code
        	 * @param str string $html entry variariable to be computed
        	 * @returns 
        	 */
        	public computeHtml$(str) {
        		
        		if(this.local.strCacheComputeHtml[str] !== undefined){
        			let page = this;
        			return eval(this.local.strCacheComputeHtml[str]);
        		}
        		else{
        			let oStr = "" + str;
        			const regex = /\$\$(?:START)?(\d+)(.*?)(?:END)?(?:\d+)?\$\$/
        			str = "`" + str.replace(/`/g, "\\`") + "`";
        			let match;
        			let cpt = 0;
        			while ((match = regex.exec(str)) != null) {
        				cpt++;
        				let elem = match[0];
        				let iStart = match.index;
        				let iEnd = match.index + match[0].length;
        				// if its a non preview $$
        				if (match[2] == undefined || match[2] == ''false'') {
        					let id = match[1];
        					let path = this.getPathById(+id);
        					let currentVal = "";
        					currentVal = "`+(" + path + " instanceof Object ? JSON.stringify(" + path + ") : " + path + ")+`"
        					str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
        				}
        				// if its a preview $$START END$$
        				else {
        					let id = match[1];
        					let defElem: any = this.getItemById(id);
        					let valElem = this.getPathById(+id)
        					let meta = JSON.parse(match[2].replace(/\\/g, ""));
        					str = this.$$toVal(defElem, meta, str, iStart, valElem, iEnd, id, false)
        				}
        			}
        			str = str.replace(/\\`/g, "`");
        			this.local.strCacheComputeHtml[oStr] = str;
        			let page = this;
        			return eval(this.local.strCacheComputeHtml[oStr]);
        		}
        	}
        
        	/**
        	 * Generates expressions that can extract data from a given target in a given format
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type can only be "TEXT_format"
        	 * @returns 
        	 */
        	public selected_data_c8o_separated_by_coma(path, targeType, type, ts) {
        		if (type == "TEXT_format") {
        			if (targeType == "checkbox_group") {
        				return "Object.keys(" + path + ").filter(((x)=>{return Object.keys(" + path + "[x]).filter((y)=>{ return " + path + "[x][y].selected }).length > 0})).map((z)=>{ return " + path + "[z].filter((b)=>{return b.selected}).map((a, i)=>{var prefix = ''''; if(i == 0){prefix = z + '' :'' } return prefix + a.value}).join('', '') }).join(''; '')";
        			}
        			else if (targeType == "radio_group") {
        				return "Object.keys(" + path + ").filter((x)=>{return " + path + "[x] != ''''}).map((y)=>{return y + '': '' +" + path + "[y]}).join('' ;'')"
        			}
        			else if (targeType == "checkbox") {
        				return path + ".filter((x)=>{return x.selected}).map((y)=>{return y.value}).join('', '')"
        			}
        			else if (targeType == "radio" || targeType == "slider" || targeType == "select" || targeType == "datetime" || targeType == "time") {
        				return path;
        			}
        			else if (targeType == "location") {
        				return "(" + path + ".addr != undefined && " + path + ".addr.FormattedAddress != undefined ? " + path + ".addr.FormattedAddress : '''')";
        			}
        		}
        	}
        	
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type can only be "TEXT_format" or "JSON_format"
        	 * @returns all_data
        	 */
        	public all_data(path, targeType, type, ts){
        		if (type == "JSON_format") {
        			if (targeType == "checkbox") {
        				const strToReturn = path;
        				if(ts){
        					return strToReturn
        				}
        				else{
        					return "JSON.stringify("+strToReturn+")";
        				}
        				
        			}
        			else if (targeType == "checkbox_group") {
        				if(ts){
        					return path;
        				}
        				else{
        					return "JSON.stringify("+path+")";
        				}
        			}
        			else if (targeType == "radio") {
        				return path;
        			}
        			else{
        				console.error("TO BE DONE");
        			}
        		}
        		else{
        			console.error("TO BE DONE");
        		}
        	}
        	
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type can only be "TEXT_format" or "JSON_format"
        	 * @returns selected_data
        	 */
        	public selected_data(path, targeType, type, ts){
        		if (type == "JSON_format") {
        			if (targeType == "checkbox") {
        				const strToReturn = path + ".filter((x)=>{return x.selected}).map((y)=>{return y.value})";
        				if(ts){
        					return strToReturn
        				}
        				else{
        					return "JSON.stringify("+strToReturn+")";
        				}
        				return 
        			}
        			else if (targeType == "checkbox_group") {
        				const strToReturn = "Object.keys(" + path + ").filter(((x)=>{return Object.keys(" + path + "[x]).filter((y)=>{ return " + path + "[x][y].selected }).length > 0})).map((z)=>{ let res = " + path + "[z].filter((b)=>{return b.selected}); if(res.length > 0){return {[z]: res};} })";
        				if(ts){
        					return strToReturn;
        				}
        				else{
        					return "JSON.stringify("+strToReturn+")";
        				}
        			}
        			else if (targeType == "radio") {
        				return path;
        			}
        			else if (targeType == "radio_group") {
        				const strToReturn = "Object.keys(" + path + ").filter((x)=>{return " + path + "[x] != ''''}).map((y)=>{ return {[y]: " + path + "[y]}})";
        				if(ts){
        					return strToReturn;
        				}
        				else{
        					return "JSON.stringify("+strToReturn+")";
        				}
        			}
        			else{
        				console.error("TO BE DONE");
        			}
        		}
        		else{
        			console.error("TO BE DONE");
        		}
        		
        	}
        	
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type can only be "TEXT_format" or "JSON_format"
        	 * @returns selected_data
        	 */
        	public not_selected_data(path, targeType, type, ts){
        		if (type == "JSON_format") {
        			if (targeType == "checkbox") {
        				const strToReturn = path + ".filter((x)=>{return !x.selected}).map((y)=>{return y.value})";
        				if(ts){
        					return strToReturn
        				}
        				else{
        					return "JSON.stringify("+strToReturn+")";
        				}
        				return 
        			}
        			else if (targeType == "checkbox_group") {
        				const strToReturn = "Object.keys(" + path + ").filter(((x)=>{return Object.keys(" + path + "[x]).filter((y)=>{ return " + path + "[x][y].selected == false}).length > 0})).map((z)=>{ let res = " + path + "[z].filter((b)=>{return b.selected === false}); if(res.length > 0){return {[z]: res};} })";
        				if(ts){
        					return strToReturn;
        				}
        				else{
        					return "JSON.stringify("+strToReturn+")";
        				}
        			}
        			else{
        				console.error("TO BE DONE");
        			}
        		}
        		else{
        			console.error("TO BE DONE");
        		}
        	}
        
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type can only be "TEXT_format"
        	 * @returns not selected data separated by coma
        	 */
        	public not_selected_data_c8o_separated_by_coma(path, targeType, type, ts) {
        		if (type == "TEXT_format") {
        			if (targeType == "checkbox_group") {
        				return "Object.keys(" + path + ").filter(((x)=>{return Object.keys(" + path + "[x]).filter((y)=>{ return " + path + "[x][y].selected == false }).length > 0})).map((z)=>{ return " + path + "[z].filter((b)=>{return b.selected == false}).map((a, i)=>{var prefix = ''''; if(i == 0){prefix = z + '' :'' } return prefix + a.value}).join('', '') }).join(''; '')";
        			}
        			else if (targeType == "checkbox") {
        				return path + ".filter((x)=>{return !x.selected}).map((y)=>{return y.value}).join('', '')"
        			}
        		}
        	}
        	
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns text format 
        	 */
        	public TEXT_format(path, targeType, type, ts) {
        		if (targeType == "radio" || targeType == "slider" || targeType == "select") {
        			return path;
        		}
        		else if (targeType == "location") {
        			let obj = "null";
        			switch (type) {
        				case "AddressLine":
        				case "AdminDistrict":
        				case "AdminDistrict2":
        				case "CountryRegion":
        				case "FormattedAddress":
        				case "Locality":
        				case "PostalCode":
        					obj = "addr";
        					break;
        				case "latitude":
        				case "longitude":
        				case "altitude":
        				case "accuracy":
        				case "altitudeAccuracy":
        					obj = "gps";
        					break;
        			}
        			if (obj != "null") {
        				return "(" + path + "." + obj + " != undefined && " + path + "." + obj + "." + type + " != undefined ? " + path + "." + obj + "." + type + " : '''')";
        			}
        			else {
        				return "(" + path + ".addr != undefined && " + path + ".addr.FormattedAddress != undefined ? " + path + ".addr.FormattedAddress : '''')";
        			}
        		}
        		return path;
        	}
        	
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns text format 
        	 */
        	public JSON_format(path, targeType, type, ts) {
        		if (targeType == "radio" || targeType == "slider" || targeType == "select") {
        			return path;
        		}
        		else if (targeType == "location") {
        			let obj = "null";
        			switch (type) {
        				case "AddressLine":
        				case "AdminDistrict":
        				case "AdminDistrict2":
        				case "CountryRegion":
        				case "FormattedAddress":
        				case "Locality":
        				case "PostalCode":
        					obj = "addr";
        					break;
        				case "latitude":
        				case "longitude":
        				case "altitude":
        				case "accuracy":
        				case "altitudeAccuracy":
        					obj = "gps";
        					break;
        			}
        			if (obj != "null") {
        				return "(" + path + "." + obj + " != undefined && " + path + "." + obj + "." + type + " != undefined ? " + path + "." + obj + "." + type + " : '''')";
        			}
        			else {
        				if(type == "gps"){
        					return path + "?.gps";
        				}
        				else if(type == "addr"){
        					return path + "?.addr";
        				}
        				return "(" + path + ".addr != undefined && " + path + ".addr.FormattedAddress != undefined ? " + path + ".addr.FormattedAddress : '''')";
        			}
        		}
        		return path;
        	}
        
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns number format 
        	 */
        	public Number_format(path, targeType, type, ts) {
        		if (targeType == "slider") {
        			return "(+" + path + ")";
        		}
        	}
        
        	/**
        	* Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns string fulldate format
        	 */
        	public fulldate(path, targeType, type, ts) {
        		if (targeType == "datetime") {
        			return path;
        		}
        	}
        
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns string day format such as 01
        	 */
        	public day(path, targeType, type, ts) {
        		if (targeType == "datetime") {
        			return "(" + path + ".length > 0 ? " + path + ".split(''-'')[2] : ''''" + ")";
        		}
        	}
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns string month format such as 01
        	 */
        	public month(path, targeType, type, ts) {
        		if (targeType == "datetime") {
        			return "(" + path + ".length > 0 ? " + path + ".split(''-'')[1] : ''''" + ")";
        		}
        	}
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns string year format such as 01
        	 */
        	public year(path, targeType, type, ts) {
        		if (targeType == "datetime") {
        			return "(" + path + ".length > 0 ? " + path + ".split(''-'')[0] : ''''" + ")";
        		}
        	}
        
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns string full hours and mins format
        	 */
        	public fullhours(path, targeType, type, ts) {
        		if (targeType == "time") {
        			return path;
        		}
        	}
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns string hours format
        	 */
        	public hours(path, targeType, type, ts) {
        		if (targeType == "time") {
        			return "(" + path + ".length > 0 ? " + path + ".split('':'')[0] : ''''" + ")";
        		}
        	}
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns string mins format
        	 */
        	public mins(path, targeType, type, ts) {
        		if (targeType == "time") {
        			return "(" + path + ".length > 0 ? " + path + ".split('':'')[1] : ''''" + ")";
        		}
        	}
        	/**
        	 * Generates expressions that can extract data from a given target
        	 * @param path raw path of the target
        	 * @param targeType type of target
        	 * @param type 
        	 * @returns 
        	 */
        	public location(path, targeType, type, ts) {
        
        	}
        	e
        	/**
        	 * generate an expression to build a graphic formatting expression (html)
        	 * @param id target id
        	 * @param defElem the definition of target element (base structure)
        	 * @param meta metadata arround the current expression
        	 * @param valElem value of elem
        	 * @param newBadge 
        	 * @param targeType type of target
        	 * @returns html string
        	 */
        	public getBadge(id, defElem, valElem, meta = null, newBadge = false, targetType) {
        		let elem: any = defElem;
        		let str = "";
        		if (meta == null) {
        			meta = {};
        		}
        		if (((elem != null && targetType == "html" && meta.c8otype != "path") || (meta.c8obuiltin && meta.c8opath.split(".")[1] == "graphic_formatting")) && (elem.type == "radio_group" || elem.type == "checkbox_group" || elem.type == "select" || elem.type == "checkbox" || elem.type == "radio" || elem.type == "grid")) {
        			if (meta["c8ostyles"] == undefined) {
        				newBadge = true;
        			}
        			// Create header of table
        			let defaultStyles = { style: "border-collapse: collapse; width: 99.1426%; height: 72px;", border: "1", class: "mceNonEditable" };
        			// get meta and c8ostyles, Converts from old syntax to new one if needed.
        			let result = this.extractMetaAndStyles(meta, newBadge, defaultStyles);
        			meta = result.meta;
        			let style = result.c8ostyles;
        
        			str += `<${this.local.tagName} ${this.local.tagId}="${id}" class="tooltip mceNonEditable"  contenteditable="false">`;
        			// apply c8ostyles to table
        			str += `<table`;
        			if (style != null) {
        				for (let elem in style) {
        					str += ` ${elem}="${style[elem]}"`;
        				}
        			}
        			str += `>`;
        			switch (elem.type) {
        				case "radio_group":
        				case "checkbox_group":
        					let cptOpts = 0;
        					let childrenLength = elem.children.length;
        					let linesLength = elem.lines.length;
        					let colwidth = 100 / (childrenLength + 1);
        
        					str += `
        						<tbody>
        						<tr style="height: 18px;">
        						<th style="text-align: center; height: 18px; width: 99.2498%;" colspan="${childrenLength + 1}"><span id="1234"><!--START1123-->${elem.config.html}<!--END1123--></span></th>
        						</tr>
        						<tr style="height: 18px;">
        						<td style="width: ${colwidth}%; height: 18px;">
        						&nbsp;
        						</td>
        						`;
        					for (let i = 0; i < childrenLength; i++) {
        						str += `
        						<td style="width: ${colwidth}%; height: 18px; text-align: center;">
        						${elem.children[i].value}
        						</td>
        						`
        
        					}
        					str += `</tr>`;
        
        					for (let line of elem.lines) {
        						str += `<tr style="height: 18px;">
        								<td style="width: ${colwidth}%; height: 18px; text-align: center; "><span>${line.title}</span></td>`
        						for (let i = 0; i < childrenLength; i++) {
        							str += `<td style="width: ${colwidth}%; height: 18px; text-align: center;"><span>${elem.type == "checkbox_group" ? valElem[line.title][i].selected ? "✔️" : "&nbsp;" : valElem[line.title] == elem.children[i].value ? "✔️" : "&nbsp;"}</span></td>`
        						}
        						str += `</tr>`;
        						cptOpts++;
        
        					}
        					break;
        				case "radio":
        				case "checkbox":
        				case "select":
        					let childrenLength2 = elem.children.length;
        					str += `<tbody>
        						<tr style="height: 18px;">
        						<th style="text-align: center; height: 18px; width: 99.2498%;" colspan="2"><span id="1234"><!--START1123-->${elem.config.html}<!--END1123--></span></th>
        						</tr>`;
        					for (let index in elem.children) {
        						let child = elem.children[index];
        						str += `<tr style="height: 18px;">
        						<td style="width: 50%; height: 18px; text-align: center;">
        						${child.value}
        						</td>
        						<td style="width: 50%; height: 18px; text-align: center;">
        						${elem.type == "checkbox" ? valElem[index].selected ? "✔️" : "&nbsp;" : child.value == valElem ? "✔️" : "&nbsp;"}
        						</td>
        						</tr>
        						`;
        					}
        					break;
        				case "grid":
        					try {
        						for (let el of this.local.sourceValue[elem.name].colDef) {
        							if (el.hide != true) {
        								length++;
        							}
        						}
        						str += `
        							<tbody>
        							<tr style="height: 18px;">
        							<th style="text-align: center; height: 18px; width: 99.2498%;" colspan="${length}"><span id="1234"><!--START1123-->${elem.config.html}<!--END1123--></span></th>
        							</tr>
        							<tr style="height: 18px;">`;
        						let colsName = [];
        						switch (elem.config.returned_value) {
        							case "nothing":
        							case "":
        								for (let el of this.local.sourceValue[elem.name].colDef) {
        									if (el.hide != true) {
        										colsName.push(el.field);
        									}
        								}
        
        								let width = 100 / (colsName.length != 0 ? colsName.length : 1);
        								colsName.forEach((field) => {
        									str += `
        											<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        											${field}
        											</td>`
        								})
        								str += `</tr>`;
        								break;
        							case "all_the_data":
        								for (let el of this.local.sourceValue[elem.name].colDef) {
        									if (el.hide != true) {
        										colsName.push(el.field);
        									}
        								}
        
        								width = 100 / (colsName.length != 0 ? colsName.length : 1);
        								colsName.forEach((field) => {
        									str += `<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        											${field}
        											</td>`
        								})
        								str += `</tr>`;
        								for (let el of this.local.sourceValue[elem.name].data) {
        									str += `<tr style="height: 18px;">`;
        									for (let st of colsName) {
        										let current = el[st];
        										let display = "";
        										if (current == undefined) {
        											display = "";
        										}
        										else if (current.displayValue != undefined) {
        											display = current.displayValue;
        										}
        										else if (current.display != undefined) {
        											display = current.value;
        										}
        										else {
        											display = current;
        										}
        										str += `<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        											${display}
        											</td>`
        									}
        									str += `</tr>`;
        								}
        								break;
        							case "row_selected":
        								for (let el of this.local.sourceValue[elem.name].colDef) {
        									if (el.hide != true) {
        										colsName.push(el.field);
        										str += `
        												<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        												${el.field}
        												</td>`
        									}
        								}
        								width = 100 / (colsName.length != 0 ? colsName.length : 1);
        								str += `</tr>`;
        								if (this.formsSubmit[elem.name].value != null || this.formsSubmit[elem.name].length > 0) {
        									if (typeof (this.formsSubmit[elem.name].value) === "string") {
        										str += `<tr style="height: 18px;"><td colspan="${length} style="width: 100%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">${this.formsSubmit[elem.name].value}</td></tr>`;
        									}
        									else if (this.local.sourceValue[elem.name].data[0] != undefined && this.local.sourceValue[elem.name].data[0].__rowValue == undefined) {
        										let prettyForUgly = {};
        										try {
        											for (let i in this.local.sourceValue[elem.name].data[0]) {
        												try {
        													let sub = this.local.sourceValue[elem.name].data[0][i];
        													prettyForUgly[sub.displayName] = sub.technicalName;
        												}
        												catch (e) {
        
        												}
        											}
        										}
        										catch (e) {
        
        										}
        										str += `<tr style="height: 18px;">`;
        										for (let st of colsName) {
        											let current = undefined;
        											if (this.local.techGrid != undefined && this.local.techGrid[elem.name] != undefined && this.local.techGrid[elem.name].data != undefined && this.local.techGrid[elem.name].data[st] != undefined) {
        												if (this.local.techGrid[elem.name].data[st].displayValue != undefined) {
        													current = this.local.techGrid[elem.name].data[st].displayValue;
        												}
        												else if (this.local.techGrid[elem.name].data[st].value != undefined) {
        													current = this.local.techGrid[elem.name].data[st].value;
        												}
        											}
        											if (current == undefined) {
        												current = this.formsSubmit[elem.name].value[st];
        												if (current == undefined) {
        													current = this.formsSubmit[elem.name].value[prettyForUgly[st]];
        												}
        											}
        											let display = "";
        											if (current != undefined) {
        												if (current.displayValue != undefined) {
        													display = current.displayValue;
        												}
        												else if (current.display != undefined) {
        													display = current.value;
        												}
        												else {
        													display = current;
        												}
        											}
        											str += `
        												<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        												${display}
        												</td>`
        										}
        										str += `</tr>`;
        									}
        									else {
        										str += `<tr style="height: 18px;"><td colspan="${length} style="width: 100%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">${JSON.stringify(this.formsSubmit[elem.name].value)}</td></tr>`;
        									}
        								}
        								else {
        									str += `<tr style="height: 18px;"><td colspan="${length} style="width: 100%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">&nbsp;</td></tr>`;
        								}
        								break;
        							case "cell_selected":
        								for (let el of this.local.sourceValue[elem.name].colDef) {
        									if (el.hide != true) {
        										colsName.push(el.field);
        										str += `
        												<td style="width: ${width}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        												${el.field}
        												</td>`
        									}
        								}
        								width = 100 / (colsName.length != 0 ? colsName.length : 1);
        								str += `</tr>`;
        								str += `<tr style="height: 18px;">`;
        								str += `
        												<td colspan="${length} style="width: ${100}%; height: 18px; text-align: center; color: rgba(0, 0, 0, 0.54);font-family: "Open Sans";">
        												${this.formsSubmit[elem.name].value}
        												</td>`;
        								str += `</tr>`;
        								break;
        						}
        					}
        					catch (e) {
        						str = " ";
        					}
        					break;
        			}
        			// in any case add end of table
        			str += `</tbody>
        					</table>
        					</${this.local.localTagName}>`;
        			if (newBadge) {
        				str += `<p>&nbsp;</p>`;
        			}
        		}
        		if (str != "") {
        			return str;
        		}
        		else {
        			return ''<'' + this.local.tagName + '' '' + this.local.tagId + ''="'' + id + ''" class="styleBadge badge badge-md badge-md-convertigo" color="convertigo" contenteditable="false" style="display: inline-block;">'' + name + ''</'' + this.local.tagName + ''>'';
        		}
        	}
        	
        	/**
        	 * get meta and c8ostyles, Converts from old syntax to new one if needed - mainly used in getBadge function. Converts from old syntax to new one if needed 
        	 * @param meta input metas extracted from target expression
        	 * @param newBadge 
        	 * @param defaultStyles default style to be applied if no one were
        	 * @returns meta and c8ostyles
        	 */
        	public extractMetaAndStyles(meta, newBadge, defaultStyles): any {
        		// deep copy c8ostyles key if exists or create it
        		let style = meta.c8ostyles != undefined ? JSON.parse(JSON.stringify(meta.c8ostyles)) : null;
        		// convert to new syntax (c8otype, c8opath, c8oPrettyPath, c8obuiltin, c8oisobject, c8ostyles) etc...
        		if (meta.c8otype == undefined && Object.keys(meta).length > 0) {
        			style = JSON.parse(JSON.stringify(meta));
        		}
        		// if newBadge
        		else if (style == null || newBadge) {
        			style = defaultStyles;
        		}
        		// delete c8ostyle from meta 
        		delete meta.c8ostyles;
        		return { meta: meta, c8ostyles: style };
        	}	
        	
        	/**
        	 * this function extracts business_logic in order to be able to execute them later
        	 * @param list An array containing all elements that defines the form usally comming from form.actions
        	 */
        	public fillActionsVars(list): void {
        		let page = this;
        		for(let elem of list){
        			if(elem["type"] == "business_logic"){
        				 page["actions"][elem["name"]] = {"name":elem["name"], "type": elem["type"], "value":""};
        
        			}
        		}
        	}
        
        	/**
        	 * computes variables ...
        	 * @param findVars the computed variables found
        	 * @param variables variables to be filled
        	 * @param item target item
        	 * @param findName 
        	 */
        	public async computeVariable(findVars, variables, item, findName = null) : Promise<any> {
        		let page = this;
                let names = {};
        		for(let va in findVars){
        			try{
        				if(typeof findVars[va] == ''string''){
        					/*let resol = null;
        					let r = new Promise((resolve)=>{
        						resol = resolve;
        					})
        					eval("(async ()=> { return "+findVars[va]+" })().then((r)=>{if(this.local.cacheComputeHtml$[va] != undefined){this.local.cacheComputeHtml$[va].next(r);};variables[va] = r;})");
        					*/
        					variables[va] = eval(findVars[va]);
        					if(variables[va] == undefined || variables[va] == "undefined"){
        						delete variables[va];
        					}
        					else if(variables[va].then){
        						variables[va] = await variables[va];
        						page.ref.markForCheck();
        					}
        					if(variables[va] == undefined || variables[va] == "undefined"){
        						delete variables[va];
        					}
        				}
        				// assume its filter
        				else{
        					let res = JSON.parse(JSON.stringify(findVars[va]));
        					res.filters = res.filters.map((x)=>{
        						x.value = eval(x.value);
        						return x;
        					})
        					variables[va] = JSON.stringify(res);
        				}
        			}
        			catch(e){
        				this.c8o.log.warn("An error occured while computing variables for "+item.name+" data sources, maybe the source has still not been created");
        				delete variables[va];
        			}
        		}
        	}
            
            /**
        	 * Retrieves the translation for a given message.
        	 * @param {string} msgTosearch - The message to search for translation.
        	 * @returns {Promise<any>} - A promise that resolves to the translation.
        	 */
        	public getTranslate(msgTosearch: string): Promise<any> {
        	    return new Promise((resolve, reject) => {
        	        let translate = this.getInstance(TranslateService); // Get an instance of the TranslateService
        	        translate.get(msgTosearch).subscribe((res: string) => {
        	            resolve(res); // Resolve the promise with the translation result
        	        });
        	    });
        	}
            
            /**
        	 * Flattens an array and counts the number of non-deleted files.
        	 * @returns {any[]} - An array containing the flattened array and the count of non-deleted files.
        	 */
        	public flatArray(): any[] {
        	    let arr = []; // Initialize an empty array to store the flattened elements
        	    let cpt = 0; // Initialize a counter for non-deleted files
        	
        	    // Iterate over each bean in the global object
        	    for (let bean in this.global[this.idFiles]) {
        	        // Iterate over each file in the current bean
        	        for (let file of this.global[this.idFiles][bean]) {
        	            if (file.deleted === undefined) {
        	                // If the ''deleted'' property is undefined, it means the file is not deleted
        	                arr.push({ file: file, bean: bean }); // Push the file and bean into the array
        	                cpt = cpt + 1; // Increment the counter for non-deleted files
        	            }
        	        }
        	    }
        	
        	    return [arr, cpt]; // Return the array and the count as an array
        	}
        
        	/**
        	 * TrackBy function for ngFor directive using the index as the tracking value.
        	 * @param {number} index - The index of the item in the iterable.
        	 * @param {any} item - The item in the iterable.
        	 * @returns {number} - The index as the tracking value.
        	 */
        	public trackByFn(index: number, item: any): number {
        	    return index;
        	}
        	
        	/**
        	 * TrackBy function for ngFor directive using the item''s id property as the tracking value.
        	 * @param {number} index - The index of the item in the iterable.
        	 * @param {any} item - The item in the iterable.
        	 * @returns {any} - The item''s id as the tracking value.
        	 */
        	public trackById(index: number, item: any): any {
        	    return item.id;
        	}
            
            /**
        	 * Browse conditions and generate JavaScript expressions for visibility.
        	 * @param {object} conditions - The conditions object (defined in Fullsync doc).
        	 * @param {boolean} bool - Optional boolean value to indicate if it is for "goToPageIf" condition.
        	 * @returns {string} - The generated JavaScript expression string.
        	 */
        	public evaluateConditions(conditions: object, bool: boolean = null): string {
        	    let jsString: string = "";
        	    // Iterate over each condition key
        	    for (let conds of Object.keys(conditions)) {
        	        switch (conds) {
        	            case "visibleIf":
        	                jsString += this.detectSubjectAndComplete(conditions[conds]["conds"], conditions[conds]["condVisible"]);
        	                break;
        	            case "goToPageIf":
        	                if (bool) {
        	                    let abc = this.detectSubjectAndComplete(conditions[conds]["conds"], conditions[conds]["cond"], true);
        	                }
        	                break;
        	        }
        	    }
        	    return jsString;
        	}
            
            /**
        	 * Compute navigation conditions by detecting the type of conditions.
        	 * @param {Array<any>} conds - An array of conditions.
        	 * @param {string} operatorStr - The string operator.
        	 * @param {any} line - The line.
        	 * @param {any} child - The child.
        	 */
        	private detectTypeAndComplete(conds: Array<any>, item = null): void {
        	    // Iterating over conditions
        	    for (let cond of conds) {
        	        if (
        	            cond.val1.type == "radio_group" ||
        	            cond.val1.type == "checkbox_group" ||
        	            cond.val1.type == "radio" ||
        	            cond.val1.type == "checkbox" ||
        	            cond.val1.type == "select"
        	        ) {
        	            if (cond.val2.vals != undefined) {
        	                if (
        	                    cond.val1.type == "radio_group" ||
        	                    cond.val1.type == "checkbox_group"
        	                ) {
        	                    try {
        	                        let indexes = this.getElementByNameIntoFormSubmit(
        	                            item.name
        	                        );
        	                        for (let lin of item.lines) {
        	                            let cpt = 0;
        	                            for (let child of item.children) {
        	                                try {
        	                                    // Get page to go
        	                                    let action =
        	                                        cond.val2.vals[lin.id].filter(
        	                                            (x) => x.value == child.id
        	                                        )[0].action;
        	                                    // If there is a defined page to go
        	                                    if (
        	                                        action != "" &&
        	                                        action != undefined
        	                                    ) {
        	                                        //detect verb goTo
        	                                        let goTo = action.indexOf("goTo_") == 0;
        	                                        if (goTo) {
        	                                            action = action.substring(5);
        	                                        }
        	                                        // get Index of page to go
        	                                        let indexToGo = this.findIndexOfPageByPageTechName(
        	                                            action
        	                                        );
        	                                        // if verb is allowPage
        	                                        if (!goTo) {
        	                                            // Create enabled object if does not exist yet
        	                                            if (
        	                                                this.local.pages[
        	                                                    indexToGo
        	                                                ].enabled == undefined ||
        	                                                typeof this.local.pages[
        	                                                    indexToGo
        	                                                ].enabled ==
        	                                                    "boolean"
        	                                            ) {
        	                                                this.local.pages[
        	                                                    indexToGo
        	                                                ].enabled = {};
        	                                            }
        	                                            // update value of accessible page
        	                                            let selected;
        	                                            if (
        	                                                item.type ==
        	                                                "radio_group"
        	                                            ) {
        	                                                selected =
        	                                                    indexes.length > 1
        	                                                        ? this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              indexes[1]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ] ==
        	                                                              child.value
        	                                                        : this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ] == child.value;
        	                                            } else {
        	                                                selected =
        	                                                    indexes.length > 1
        	                                                        ? this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              indexes[1]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ][cpt].selected
        	                                                        : this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ][cpt].selected;
        	                                            }
        	                                            this.local.pages[
        	                                                indexToGo
        	                                            ].enabled[
        	                                                lin.id + "_" + child.id
        	                                            ] = selected;
        	                                        }
        	                                        // if verb is goTo
        	                                        else {
        	                                            // update value of accessible page
        	                                            let selected;
        	                                            if (
        	                                                item.type ==
        	                                                "radio_group"
        	                                            ) {
        	                                                selected =
        	                                                    indexes.length > 1
        	                                                        ? this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              indexes[1]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ] ==
        	                                                              child.value
        	                                                        : this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ] == child.value;
        	                                            } else {
        	                                                selected =
        	                                                    indexes.length > 1
        	                                                        ? this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              indexes[1]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ][cpt].selected
        	                                                        : this.formsSubmit[
        	                                                              indexes[0]
        	                                                          ].children[
        	                                                              lin.title
        	                                                          ][cpt].selected;
        	                                            }
        	                                            if (selected) {
        	                                                this.local.currentIndex =
        	                                                    indexToGo;
        	                                                this.ref.detectChanges();
        	                                            }
        	                                        }
        	                                    }
        	                                } catch (e) {}
        	                                cpt++;
        	                            }
        	                        }
        	                    } catch (e) {
        	                        this.c8o.log.error(
        	                            "An error occurred while computing navigation conditions and detecting the type of conditions",
        	                            e
        	                        );
        	                    }
        	                } else {
        	                    try {
        	                        let cpt = 0;
        	                        let indexes = this.getElementByNameIntoFormSubmit(
        	                            item.name
        	                        );
        	                        // Foreach element of current item
        	                        for (let elem of item.children) {
        	                            // Get page to go
        	                            let action = cond.val2.vals[elem.id];
        	                            // If there is a defined page to go
        	                            if (action != "" && action != undefined) {
        	                                //detect verb goTo
        	                                let goTo = action.indexOf("goTo_") == 0;
        	                                if (goTo) {
        	                                    action = action.substring(5);
        	                                }
        	                                // get Index of page to go
        	                                let indexToGo = this.findIndexOfPageByPageTechName(
        	                                    action
        	                                );
        	                                // if verb is allowPage
        	                                if (!goTo) {
        	                                    // Create enabled object if does not exist yet
        	                                    if (
        	                                        this.local.pages[indexToGo]
        	                                            .enabled == undefined ||
        	                                        typeof this.local.pages[
        	                                            indexToGo
        	                                        ].enabled == "boolean"
        	                                    ) {
        	                                        this.local.pages[
        	                                            indexToGo
        	                                        ].enabled = {};
        	                                    }
        	                                    // update value of accessible page
        	                                    let selected =
        	                                        indexes.length > 1
        	                                            ? this.formsSubmit[
        	                                                  indexes[0]
        	                                              ].children[
        	                                                  indexes[1]
        	                                              ].children[cpt].selected
        	                                            : this.formsSubmit[
        	                                                  indexes[0]
        	                                              ].children[cpt].selected;
        	                                    this.local.pages[indexToGo].enabled[
        	                                        elem.id
        	                                    ] = selected;
        	                                }
        	                                // if verb is goTo
        	                                else {
        	                                    if (
        	                                        indexes.length > 1
        	                                            ? this.formsSubmit[
        	                                                  indexes[0]
        	                                              ].children[
        	                                                  indexes[1]
        	                                              ].children[cpt].selected
        	                                            : this.formsSubmit[
        	                                                  indexes[0]
        	                                              ].children[cpt].selected
        	                                    ) {
        	                                        this.local.currentIndex =
        	                                            indexToGo;
        	                                        this.ref.detectChanges();
        	                                    }
        	                                }
        	                            }
        	                            cpt++;
        	                        }
        	                    } catch (e) {
        	                        this.c8o.log.error(
        	                            "An error occurred while computing navigation conditions and detecting the type of conditions",
        	                            e
        	                        );
        	                    }
        	                }
        	            }
        	        } else if (
        	            this.isAfieldSimpleOrMultipleGo(cond) ||
        	            this.isACamSign(cond)
        	        ) {
        	            try {
        	                let action = cond.page;
        	                if (action != "" && action != undefined) {
        	                    // get Index of page to go
        	                    let indexToGo = this.findIndexOfPageByPageTechName(
        	                        action
        	                    );
        	                    // if verb is allowPage
        	                    if (
        	                        cond.verb == undefined ||
        	                        cond.verb == "authorize"
        	                    ) {
        	                        // Create enabled object if does not exist yet
        	                        if (
        	                            this.local.pages[indexToGo].enabled ==
        	                                undefined ||
        	                            typeof this.local.pages[
        	                                indexToGo
        	                            ].enabled == "boolean"
        	                        ) {
        	                            this.local.pages[indexToGo].enabled = {};
        	                        }
        	                        // update value of accessible page
        	                        this.local.pages[indexToGo].enabled[item.id] =
        	                            this.compute(cond);
        	                    }
        	                    // if verb is goTo
        	                    else if (cond.verb == "goTo") {
        	                        if (this.compute(cond)) {
        	                            this.local.currentIndex = indexToGo;
        	                            this.ref.detectChanges();
        	                        }
        	                    }
        	                }
        	            } catch (e) {
        	                this.c8o.log.error(
        	                    "An error occurred while computing navigation conditions and detecting the type of conditions",
        	                    e
        	                );
        	            }
        	        } else if (this.isACamSign(cond)) {
        	            // Code for handling "isACamSign" condition
        	        }
        	    }
        	}
        
            
            /**
        	 * Find the index of a page in the local pages array based on the page''s technical name.
        	 * @param {string} pageTechName - The technical name of the page.
        	 * @returns {number} - The index of the page in the local pages array, or -1 if not found.
        	 */
        	private findIndexOfPageByPageTechName(pageTechName: string): number {
        	    let cpt = 0;
        	
        	    // Iterate over each page in the local pages array
        	    for (let page of this.local.pages) {
        	        if (page.pageTechName == pageTechName) {
        	            return cpt; // Return the index if the page''s technical name matches
        	        }
        	        cpt++;
        	    }
        	
        	    return -1; // Return -1 if the page is not found
        	}
            
            /**
        	 * Compute visibility conditions by detecting the type of conditions.
        	 * @param {Array<any>} conds - An array of conditions.
        	 * @param {string} operatorStr - The string operator.
        	 * @param {boolean} goToPage - Optional boolean value to indicate if it is for "goToPage" condition.
        	 * @returns {string} - The computed JavaScript string for visibility conditions.
        	 */
        	public detectSubjectAndComplete(
        	    conds: Array<any>,
        	    operatorStr: string,
        	    goToPage = null
        	): string {
        	    let jsString = ""; // JavaScript string to be built
        	    const operator = this.getCondVisibleToSign(operatorStr); // Operator between each condition
        	    let cpt = 0;
        	
        	    // Iterating over conditions
        	    for (let cond of conds) {
        	        let status = "";
        	        try {
        	            // If the subject of the current condition is a field
        	            if (this.isAfieldSimpleOrMultiple(cond)) {
        	                status = "field";
        	                jsString += cpt > 0 ? operator + " " + this.compute(cond) : this.compute(cond);
        	                cpt++;
        	            }
        	            // If the subject of the current condition is the form
        	            else if (this.isAform(cond)) {
        	                status = "form";
        	                // If it''s the first condition, don''t prefix by operator, then call generateJsVisibleIfForm
        	                jsString += cpt > 0 ? operator + " " + this.generateJsVisibleIfForm(cond) : this.generateJsVisibleIfForm(cond);
        	                cpt++;
        	            }
        	            // If the subject of the current condition is a file
        	            else if (this.isAFile(cond)) {
        	                status = "field";
        	                jsString += cpt > 0 ? operator + " " + this.compute(cond) : this.compute(cond);
        	                cpt++;
        	            }
        	            // If the subject of the current condition is a CamSign
        	            else if (this.isACamSign(cond)) {
        	                status = "field";
        	                jsString += cpt > 0 ? operator + " " + this.compute(cond) : this.compute(cond);
        	                cpt++;
        	            }
        	            // If the condition is never visible
        	            else if (this.isANeverVisible(cond)) {
        	                status = "never_visible";
        	                jsString += cpt > 0 ? operator + " false" : "false";
        	            }
        	            else {
        	                status = "error";
        	            }
        	        }
        	        catch (e) {
        	            // Handle any exceptions or errors
        	        }
        	    }
        	
        	    if (jsString == "" && goToPage == null) {
        	        jsString = "true";
        	    }
        	
        	    return jsString;
        	}
        
            
            /**
        	 * Check if an object is an instance of a field.
        	 * @param {any} object - The object to be checked.
        	 * @returns {boolean} - A boolean value indicating whether the object is an instance of a field.
        	 */
        	private instanceOfField(object: any): boolean {
        	    return ''val1'' in object; // Check if the ''val1'' property exists in the object
        	}
            
            /**
        	 * Check if the provided condition is a valid field (simple or multiple).
        	 * @param {FieldObject} cond - The condition object to be checked.
        	 * @returns {boolean} - A boolean value indicating whether the condition is a valid field.
        	 */
        	private isAfieldSimpleOrMultiple(cond: FieldObject): boolean {
        	    try {
        	        return (
        	            cond.subject != undefined &&
        	            cond.subject == "field" &&
        	            cond.val1 != undefined &&
        	            (cond.val1.str != "" || cond.val1.arr.length > 0) &&
        	            cond.val2 != undefined &&
        	            (cond.val2.str != "" || cond.val2.arr.length > 0) &&
        	            cond.operator != undefined &&
        	            cond.operator != ""
        	        );
        	    } catch (e) {
        	        return (
        	            cond.subject != undefined &&
        	            cond.subject == "field" &&
        	            cond.val1 != undefined &&
        	            (cond.val1.str != "" || cond.val1.arr.length > 0) &&
        	            cond.operator != undefined &&
        	            cond.operator != "" &&
        	            (cond.operator == "is_filled" || cond.operator == "is_empty")
        	        );
        	    }
        	}
        	
        	/**
        	 * Check if the provided condition is a valid field (simple or multiple) for "goToPageIf" type.
        	 * @param {FieldObject} cond - The condition object to be checked.
        	 * @returns {boolean} - A boolean value indicating whether the condition is a valid field for "goToPageIf".
        	 */
        	private isAfieldSimpleOrMultipleGo(cond: FieldObject): boolean {
        	    try {
        	        return (
        	            cond.val1 != undefined &&
        	            (cond.val1.str != "" || cond.val1.arr.length > 0) &&
        	            cond.val2 != undefined &&
        	            (cond.val2.str != "" || cond.val2.arr.length > 0) &&
        	            cond.operator != undefined &&
        	            cond.operator != "" &&
        	            cond.type == "goToPageIf"
        	        );
        	    } catch (e) {
        	        return (
        	            cond.val1 != undefined &&
        	            (cond.val1.str != "" || cond.val1.arr.length > 0) &&
        	            cond.operator != undefined &&
        	            cond.operator != "" &&
        	            (cond.operator == "is_filled" || cond.operator == "is_empty") &&
        	            cond.type == "goToPageIf"
        	        );
        	    }
        	}
        	
        	/**
        	 * Check if the provided condition is a valid form.
        	 * @param {FormObject} cond - The condition object to be checked.
        	 * @returns {boolean} - A boolean value indicating whether the condition is a valid form.
        	 */
        	private isAform(cond: FormObject): boolean {
        	    try {
        	        return (
        	            cond.subject != undefined &&
        	            cond.subject == "form" &&
        	            cond.attribute != undefined &&
        	            cond.attribute != "" &&
        	            cond.operator != undefined &&
        	            cond.operator != ""
        	        );
        	    } catch (e) {
        	        return false;
        	    }
        	}
        	
        	/**
        	 * Check if the provided condition represents a "never_visible" condition.
        	 * @param {FormObject} cond - The condition object to be checked.
        	 * @returns {boolean} - A boolean value indicating whether the condition is a "never_visible" condition.
        	 */
        	private isANeverVisible(cond: FormObject): boolean {
        	    try {
        	        return cond.subject == "never_visible";
        	    } catch (e) {
        	        return false;
        	    }
        	}
        	
        	/**
        	 * Check if the provided condition is a valid file.
        	 * @param {FieldObject} cond - The condition object to be checked.
        	 * @returns {boolean} - A boolean value indicating whether the condition is a valid file.
        	 */
        	private isAFile(cond: FieldObject): boolean {
        	    try {
        	        return (
        	            cond.subject != undefined &&
        	            cond.subject == "field" &&
        	            cond.val1 != undefined &&
        	            cond.val1.str != undefined &&
        	            cond.operator != "" &&
        	            cond.val1.type == "file"
        	        );
        	    } catch (e) {
        	        return false;
        	    }
        	}
        	
        	/**
        	 * Check if the provided condition is a valid CamSign.
        	 * @param {FieldObject} cond - The condition object to be checked.
        	 * @returns {boolean} - A boolean value indicating whether the condition is a valid CamSign.
        	 */
        	private isACamSign(cond: FieldObject): boolean {
        	    try {
        	        return (
        	            cond.subject != undefined &&
        	            cond.subject == "field" &&
        	            cond.val1 != undefined &&
        	            cond.val1.str != undefined &&
        	            cond.operator != "" &&
        	            (cond.val1.type == "signature" || cond.val1.type == "img")
        	        );
        	    } catch (e) {
        	        return false;
        	    }
        	}
        
            
            /**
        	 * Performs a computation based on the condition.
        	 * @param cond - FieldObject or FormObject condition
        	 * @returns The result of the computation
        	 */
        	private compute(cond: FieldObject | FormObject): boolean {
        	    let result = true;
        	    if (this.instanceOfField(cond)) {
        	        const field = <FieldObject>cond;
        	        const type1: string = this.getType(field.val1.type);
        	        const operator: string = field.operator;
        	        result = this[operator](field, type1);
        	    }
        	    return result;
        	}
        	
        	/**
        	 * Retrieves the value of a simple field.
        	 * @param val - ValFieldObject representing a simple field
        	 * @returns The value of the simple field
        	 */
        	private getValSimple(val: ValFieldObject): any {
        	    return val.source ? this.getSimple(val) : val.str;
        	}
        	
        	/**
        	 * Retrieves the value of a multiple field.
        	 * @param val - ValFieldObject representing a multiple field
        	 * @returns An array of values of the multiple field
        	 */
        	private getValMultiple(val: ValFieldObject): Array<any> {
        	    let ret;
        	    let str;
        	    if (val.source) {
        	        switch (val.type) {
        	            case "checkbox":
        	                str = this.getNameById(val.arr != undefined ? val.arr[0].value : val.str);
        	                ret = val.source ? this.getFormCheckboxValueByName(str) : val.arr;
        	                break;
        	            case "radio_group":
        	                str = this.getNameById(val.arr != undefined ? val.arr[0].value : val.str);
        	                ret = val.source ? this.getFormRadioGroupValueByName(str) : val.arr;
        	                break;
        	            case "checkbox_group":
        	                str = this.getNameById(val.arr != undefined ? val.arr[0].value : val.str);
        	                ret = val.source ? this.getFormCheckboxGroupValueByName(str) : val.arr;
        	                break;
        	        }
        	    } else {
        	        ret = val.arr.map((e) => { return e.value; });
        	    }
        	    return ret;
        	}
        	
        	/**
        	 * Performs the equals comparison operation.
        	 * @param field - FieldObject representing the comparison
        	 * @param type - Type of the field (simple or multiple)
        	 * @returns The result of the equals comparison
        	 */
        	private equals(field: FieldObject, type: string): boolean {
        	    if (type === "simple") {
        	        return this.getValSimple(field.val1) == this.getValSimple(field.val2);
        	    } else if (type === "multiple") {
        	        let arr1 = this.getValMultiple(field.val1);
        	        let arr2 = this.getValMultiple(field.val2);
        	        return arr1.length != arr2.length ? false : arr1.sort().every((value, index) => { return value == arr2[index]; });
        	    }
        	}
        	
        	/**
             * different operator
             * @param field
             * @param type
             */
            private different(field: FieldObject, type: string){
                if(type == "simple"){
                    return this.getValSimple(field.val1) != this.getValSimple(field.val2);
                }
                else if(type == "multiple"){
                    let arr1 = this.getValMultiple(field.val1);
                    let arr2 = this.getValMultiple(field.val2)
                    return !(arr1.length != arr2.length ? false : arr1.sort().every((value, index) => { return value ==  arr2[index]}));
                }
            }
        	/**
             * greater operator
             * @param field
             * @param type
             */
            private greater(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = this.getValSimple(field.val1);
                        let v2 = this.getValSimple(field.val2);
                        let nv1 = +v1;
                        let nv2 = +v2;
                        if(isNaN(nv1) || isNaN(nv2)){
                            return v1 > v2;
                        }
                        else{
                            return nv1 > nv2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) > this.getValSimple(field.val2);
                    }
                }
            }
            
        	/**
             * greaterequals operator
             * @param field
             * @param type
             */
            private greaterequals(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = this.getValSimple(field.val1);
                        let v2 = this.getValSimple(field.val2);
                        let nv1 = +v1;
                        let nv2 = +v2;
                        if(isNaN(nv1) || isNaN(nv2)){
                            return v1 >= v2;
                        }
                        else{
                            return nv1 >= nv2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) >= this.getValSimple(field.val2);
                    }
        
                    
                }
            }
            /**
             * greater minus
             * @param field
             * @param type
             */
            private minus(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = this.getValSimple(field.val1);
                        let v2 = this.getValSimple(field.val2);
                        let nv1 = +v1;
                        let nv2 = +v2;
                        if(isNaN(nv1) || isNaN(nv2)){
                            return v1 < v2;
                        }
                        else{
                            return nv1 < nv2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) < this.getValSimple(field.val2);
                    }
                }
            }
            
        	/**
             * minusequals operator
             * @param field
             * @param type
             */
            private minusequals(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = this.getValSimple(field.val1);
                        let v2 = this.getValSimple(field.val2);
                        let nv1 = +v1;
                        let nv2 = +v2;
                        if(isNaN(nv1) || isNaN(nv2)){
                            return v1 <= v2;
                        }
                        else{
                            return nv1 <= nv2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) <= this.getValSimple(field.val2);
                    }
        
                    
                }
            }
        	
        	// Repeat the pattern for other comparison operators...
        	
        	/**
        	 * Checks if a simple value is among the following multiple values.
        	 * @param field - FieldObject representing the comparison
        	 * @param type - Type of the field (simple or multiple)
        	 * @returns True if the value is found among the following values, false otherwise
        	 */
        	private among_following(field: FieldObject, type: string): boolean {
        	    if (type === "simple") {
        	        let v1 = this.getValSimple(field.val1);
        	        let v2 = this.getValMultiple(field.val2);
        	        return (v2.filter(w => w == v1)).length > 0;
        	    } else if (type === "multiple") {
        	        let v1 = this.getValMultiple(field.val1);
        	        let v2 = this.getValMultiple(field.val2);
        	        return v2.filter(Set.prototype.has, new Set(v1)).length > 0;
        	    }
        	}
        	
        	/**
             * out_following operator
             * @param field
             * @param type
             */
            private out_following(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValMultiple(field.val2);
                    return (v2.filter(w => w == v1)).length == 0;
                }
                else if(type == "multiple"){
                    let v1 = this.getValMultiple(field.val1);
                    let v2 = this.getValMultiple(field.val2) 
                    return v2.filter(Set.prototype.has, new Set(v1)).length == 0;
                }
            }
            
            /**
             * contains operator
             * @param field
             * @param type
             */
            private contains(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValSimple(field.val2);
                    return v1.indexOf(v2) != -1;
                }
            }
            
            /**
             * not_contains operator
             * @param field
             * @param type
             */
            private not_contains(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValSimple(field.val2);
                    return v1.indexOf(v2) == -1;
                }
            }
        	
        	// Repeat the pattern for other comparison operators...
        	
        	/**
        	 * Checks if a file contains multiple files.
        	 * @param field - FieldObject representing the file
        	 * @returns True if the file contains multiple files, false otherwise
        	 */
        	private contains_multiple_files(field: FieldObject): boolean {
        	    let v1 = field.val1.str;
        	    let id = this.global.id;
        	    return this.global[id] != undefined && this.global[id][v1] != undefined && this.global[id][v1].length > 1;
        	}
        	/**
             * contains_a_file operator
             * @param field
             */
            private contains_a_file(field: FieldObject, type: string){
                let v1 = field.val1.str;
                let id = this.global.id;
                return this.global[id] != undefined && this.global[id][v1] != undefined && this.global[id][v1].length == 1;
            }
            
            /**
             * does_not_contain_file operator
             * @param field
             */
            private does_not_contain_file(field: FieldObject, type: string){
                let v1 = field.val1.str;
                let id = this.global.id;
                return this.global[id] == undefined || this.global[id][v1] == undefined || this.global[id][v1].length == 0;
            }
        	// Repeat the pattern for other file-related operators...
        	
        	/**
        	 * Checks if a field is filled.
        	 * @param field - FieldObject representing the field
        	 * @returns True if the field is filled, false otherwise
        	 */
        	private is_filled(field: FieldObject): boolean {
        	    const val = this.getValSimple(field.val1);
        	    if (field.val1.type == "grid") {
        	        return val != "" && JSON.stringify(val) != JSON.stringify({});
        	    } else {
        	        return val != "";
        	    }
        	}
        	
        	/**
        	 * Checks if a field is empty.
        	 * @param field - FieldObject representing the field
        	 * @returns True if the field is empty, false otherwise
        	 */
        	private is_empty(field: FieldObject): boolean {
        	    const val = this.getValSimple(field.val1);
        	    if (field.val1.type == "grid") {
        	        return val == "" || JSON.stringify(val) == JSON.stringify({});
        	    } else {
        	        return val == "";
        	    }
        	}
        
            
            /**
        	 * Generate JavaScript expression for a given FormObject.
        	 * @param form - The FormObject representing a field.
        	 * @returns The generated JavaScript expression.
        	 */
        	private generateJsVisibleIfForm(form: FormObject): string {
        	    // JavaScript string to be built
        	    let jsString = "";
        	    jsString += this.strOperatorToAssert(form.operator) + this.getAttributeForm(form.attribute);
        	    return jsString;
        	}
        	
        	/**
        	 * Get the attribute form based on the given string.
        	 * @param str - The input string.
        	 * @returns The attribute form string.
        	 */
        	public getAttributeForm(str: string): string {
        	    let attributeForm = "";
        	    switch (str) {
        	        case "anonymous":
        	            attributeForm = "this.local.anonymous";
        	            break;
        	    }
        	    return attributeForm;
        	}
        	
        	/**
        	 * Convert the string operator to the corresponding assertion symbol.
        	 * @param str - The input string operator.
        	 * @returns The assertion symbol string.
        	 */
        	public strOperatorToAssert(str: string): string {
        	    let assertionSymbol = "";
        	    switch (str) {
        	        case "equals":
        	            assertionSymbol = "";
        	            break;
        	        case "different":
        	            assertionSymbol = "!";
        	            break;
        	    }
        	    return assertionSymbol;
        	}
        	
        	/**
        	 * Get the conditional visibility sign based on the given string.
        	 * @param str - The input string.
        	 * @returns The conditional visibility sign string.
        	 */
        	public getCondVisibleToSign(str: string): string {
        	    let visibilitySign = "";
        	    switch (str) {
        	        case "and":
        	            visibilitySign = "&&";
        	            break;
        	        case "or":
        	            visibilitySign = "||";
        	            break;
        	    }
        	    return visibilitySign;
        	}
        	
            /**
        	 * Get the value of a form element by its name.
        	 * @param name - The name of the form element.
        	 * @returns The value of the form element.
        	 */
        	public getFormElementValueByName(name: string): string {
        	    // Combine formsSubmit and actions objects into a single search array
        	    var searchArray = { ...this.formsSubmit, ...this.actions };
        	
        	    // Iterate through the search array
        	    for (let key of Object.keys(searchArray)) {
        	        if (key === name) {
        	            // Return the value if the key matches the name
        	            return searchArray[key].value;
        	        } else if (searchArray[key].type === "ion-card") {
        	            // Iterate through the children of the ion-card type
        	            for (let keyChild of Object.keys(searchArray[key].children)) {
        	                if (keyChild === name) {
        	                    let val = searchArray[key].children[keyChild].value;
        	                    if (val === undefined) {
        	                        val = "";
        	                    }
        	                    return val;
        	                }
        	            }
        	        }
        	    }
        	
        	    // Return an empty string if no matching form element is found
        	    return "";
        	}
        
        	/**
           * return a raw path to any element value from it''s id 
           * @param id id of the current target
           * @param fromComp executed from a component or not
           * @param formsSubmit formSubmit object
           * @param actions actions object
           * @returns 
           */
          public getPathById(id: any, fromComp: boolean = false): string {
            // default value for prefix page
            let prefixPage = "page.";
            // if its called from a component then update its prefix to pageOwner
            if (fromComp) {
              prefixPage += "pageOwner."
            }
            // get target name by it''s id
            let name = this.getNameById(id);
            // iterrate over each key of formsSubmit object to find target comparing by key
            for (let key of Object.keys(this.formsSubmit)) {
              // if key equals name
              if (key == name) {
                // return path
                return prefixPage + "formsSubmit[\"" + name.replace(/"/g, ''\\\"'') + "\"][\"" + this.getKeyByType(this.formsSubmit[key].type) + "\"]";
              }
              // if it''s a card then search into
              else if (this.formsSubmit[key].type == "ion-card") {
                // iterrate over each key of card object to find target comparing by key
                for (let keyChild of Object.keys(this.formsSubmit[key]["children"])) {
                  // if key equals name
                  if (keyChild == name) {
                    // return path
                    return prefixPage + "formsSubmit[\"" + key + "\"].children[\"" + name + "\"][\"" + this.getKeyByType(this.formsSubmit[key]["children"][keyChild].type) + "\"]";
                  }
                }
              }
            }
            // iterrate over each key of actions object to find target comparing by key
            for (let key of Object.keys(this.actions)) {
              // if key equals name
              if (key == name) {
                // return path
                return prefixPage + "actions[\"" + name + "\"][\"" + this.getKeyByType(this.actions[key].type) + "\"]";;
              }
            }
            // if we di not found object in formsubmit or acctions, it may be a description
            for (var index = 0; index < this.form.formulaire.length; index++) {
        		if (this.form.formulaire[index].id === +id){
        			return `${prefixPage}form.formulaire[${index}].config.html`;
        		}
        		else if(this.form.formulaire[index].type == "ion-card"){
        			for (var index2 = 0; index2 < this.form.formulaire[index]["children"].length; index2++) {
        				if (this.form.formulaire[index]["children"][index2].id === +id){
        					return `${prefixPage}form.formulaire[${index}]["children"][${index2}].config.html`;
        				}
        			}
        		}
        	}
            return "";
          }
        
        	/**
        	 * Get the subkey of an object based on its type.
        	 * @param type - The type of the target.
        	 * @returns The subkey as a string.
        	 */
        	public getKeyByType(type: string): string {
        	    // For checkbox, checkbox_group, and radio_group, the subkey is ''children'' (legacy)
        	    if (type === "checkbox" || type === "checkbox_group" || type === "radio_group") {
        	        return ''children'';
        	    }
        	    // Otherwise, the subkey is always ''value''
        	    else {
        	        return ''value'';
        	    }
        	}
        
            
            /**
        	 * Get the ID by name from the given search array.
        	 * @param name - The name to search for.
        	 * @param search - The array to search in. Default is formsList.
        	 * @returns The ID corresponding to the name, or null if not found.
        	 */
        	public getIdByName(name: string, search: any[] = this.formsList): string | null {
        	    for (let obj of search) {
        	        let current: any = obj;
        	
        	        // Check if the name matches the current object''s name
        	        if (name === current.name) {
        	            return current.id;
        	        }
        	        // If it''s an ion-card type, recursively search within its children
        	        else if (current.type === "ion-card") {
        	            let val = this.getIdByName(name, current.children);
        	            if (val !== null) {
        	                return val;
        	            }
        	        }
        	    }
        	
        	    // Return null if the ID is not found
        	    return null;
        	}
        
        	/**
        	 * Search for an element by its ID in the given object.
        	 * @param id - The ID of the current target.
        	 * @param search - The object to browse. Default is page.formsList.
        	 * @returns The found element, or null if not found.
        	 */
        	public getItemById(id: any, search: any[] = this.formsList): object | null {
        	    // Cast id to number
        	    id = +id;
        	
        	    // Concatenate the search object and form actions to browse through it
        	    const searchArray = search.concat(this.form.actions);
        	
        	    // Iterate over each object in the searchArray to find the target by comparing IDs
        	    for (let obj of searchArray) {
        	        // If the IDs are equal
        	        if (id === obj.id) {
        	            // Return the element
        	            return obj;
        	        }
        	        // If it''s a card, then search within its children
        	        else if (obj.type === "ion-card") {
        	            // Recursive call to search within children
        	            const val = this.getItemById(id, obj.children);
        	            // If found
        	            if (val !== null) {
        	                // Return the element
        	                return val;
        	            }
        	        }
        	    }
        	
        	    // Return null if the element is not found
        	    return null;
        	}
        
            /**
        	 * Get the values of a form checkbox by its name.
        	 * @param name - The name of the form checkbox.
        	 * @returns An array of string values for the selected checkboxes.
        	 */
        	public getFormCheckboxValueByName(name: string): string[] {
        	    const arrayStr: string[] = [];
        	
        	    for (let key of Object.keys(this.formsSubmit)) {
        	        if (key === name) {
        	            for (let i in this.formsSubmit[key].children) {
        	                if (this.formsSubmit[key].children[i]["selected"]) {
        	                    arrayStr.push(this.formsSubmit[key].children[i].value);
        	                }
        	            }
        	        } else if (this.formsSubmit[key].type === "ion-card") {
        	            for (let keyChild of Object.keys(this.formsSubmit[key]["children"])) {
        	                if (keyChild === name) {
        	                    for (let i in this.formsSubmit[key]["children"][keyChild].children) {
        	                        if (this.formsSubmit[key]["children"][keyChild].children[i]["selected"]) {
        	                            arrayStr.push(this.formsSubmit[key]["children"][keyChild].children[i].value);
        	                        }
        	                    }
        	                }
        	            }
        	        }
        	    }
        	
        	    return arrayStr;
        	}
        	
        	/**
        	 * Get the value of a form radio group by its name.
        	 * @param name - The name of the form radio group.
        	 * @returns An array of string values for the selected radio options.
        	 */
        	public getFormRadioGroupValueByName(name: string): string[] {
        	    const arrayStr: string[] = [];
        	
        	    for (let key of Object.keys(this.formsSubmit)) {
        	        if (key === name) {
        	            for (let i in this.formsSubmit[key].children) {
        	                if (this.formsSubmit[key].children[i] !== "") {
        	                    arrayStr.push(i + "_" + this.formsSubmit[key].children[i]);
        	                }
        	            }
        	        } else if (this.formsSubmit[key].type === "ion-card") {
        	            for (let keyChild of Object.keys(this.formsSubmit[key]["children"])) {
        	                if (keyChild === name) {
        	                    for (let i in this.formsSubmit[key]["children"][keyChild].children) {
        	                        if (this.formsSubmit[key]["children"][keyChild].children[i] !== "") {
        	                            arrayStr.push(i + "_" + this.formsSubmit[key]["children"][keyChild].children[i]);
        	                        }
        	                    }
        	                }
        	            }
        	        }
        	    }
        	
        	    return arrayStr;
        	}
        	
        	/**
        	 * Get the values of a form checkbox group by its name.
        	 * @param name - The name of the form checkbox group.
        	 * @returns An array of string values for the selected checkboxes in the group.
        	 */
        	public getFormCheckboxGroupValueByName(name: string): string[] {
        	    const arrayStr: string[] = [];
        	
        	    for (let key of Object.keys(this.formsSubmit)) {
        	        if (key === name) {
        	            for (let i in this.formsSubmit[key].children) {
        	                for (let j in this.formsSubmit[key].children[i]) {
        	                    if (this.formsSubmit[key].children[i][j]["selected"]) {
        	                        arrayStr.push(i + "_" + this.formsSubmit[key].children[i][j].value);
        	                    }
        	                }
        	            }
        	        } else if (this.formsSubmit[key].type === "ion-card") {
        	            for (let keyChild of Object.keys(this.formsSubmit[key]["children"])) {
        	                if (keyChild === name) {
        	                    for (let i in this.formsSubmit[key]["children"][keyChild].children) {
        	                        for (let j in this.formsSubmit[key]["children"][keyChild].children[i]) {
        	                            if (this.formsSubmit[key]["children"][keyChild].children[i][j]["selected"]) {
        	                                arrayStr.push(i + "_" + this.formsSubmit[key]["children"][keyChild].children[i][j].value);
        	                            }
        	                        }
        	                    }
        	                }
        	            }
        	        }
        	    }
        	
        	    return arrayStr;
        	}
        	 /**
        	 * Get the value of a simple field based on the provided ValFieldObject.
        	 * @param val - The ValFieldObject representing a field.
        	 * @returns The value of the field.
        	 */
        	private getSimple(val: ValFieldObject): string {
        	    const name = this.getNameById(val);
        	    return this.getFormElementValueByName(name);
        	}
        	
        	/**
        	 * Get the name by ID from the provided ValFieldObject or number.
        	 * @param val - The ValFieldObject or number representing an ID.
        	 * @returns The name corresponding to the ID, or an empty string if not found.
        	 */
        	private getNameById(val: ValFieldObject | number): string {
        	    const searchArray = this.form.formulaire.concat(this.form.actions);
        	
        	    if (typeof val === ''number'') {
        	        for (let elem of searchArray) {
        	            if (elem.id === val) {
        	                return elem.name;
        	            } else if (elem.type === "ion-card") {
        	                for (let child of elem["children"]) {
        	                    if (child.id === val) {
        	                        return child.name;
        	                    }
        	                }
        	            }
        	        }
        	    } else {
        	        for (let elem of searchArray) {
        	            if (elem.id === val.str) {
        	                return elem.name;
        	            } else if (elem.type === "ion-card") {
        	                for (let child of elem["children"]) {
        	                    if (child.id === val.str) {
        	                        return child.name;
        	                    }
        	                }
        	            }
        	        }
        	    }
        	
        	    return "";
        	}
        	
        	/**
        	 * Bind the eval function.
        	 * @param str - The string to evaluate.
        	 * @returns The result of the eval function.
        	 */
        	public eval(str: string) {
        	    return eval(str);
        	}
        	
        	/**
        	 * Get the type of a field (simple, multiple, file, or camSign) based on the provided type string.
        	 * @param type - The type string of the field.
        	 * @returns The type of the field.
        	 */
        	public getType(type: string): string {
        	    if (this.local.multipleField[type]) {
        	        return "multiple";
        	    } else if (this.local.simpleField[type]) {
        	        return "simple";
        	    } else if (this.local.fileField[type]) {
        	        return "file";
        	    } else if (this.local.camSignField[type]) {
        	        return "camSign";
        	    } else {
        	        return "";
        	    }
        	}
        
            
            /**
        	 * Returns the index of the next available page.
        	 * @returns The index of the next available page.
        	 */
        	public getNextPageIndex(): number | undefined {
        	    const currentIndex = this.local.currentIndex;
        	    const pages = this.local.pages;
        	
        	    for (let i = currentIndex + 1; i < pages.length; i++) {
        	        try {
        	            if (
        	                pages[i].enabled !== undefined &&
        	                ((pages[i].enabled === true) ||
        	                    (pages[i].enabled instanceof Object &&
        	                        Object.keys(pages[i].enabled)
        	                            .map((e) => this.local.pages[i].enabled[e])
        	                            .includes(true)))
        	            ) {
        	                return i;
        	            }
        	        } catch (e) {
        	            if (pages[i].enabled === true) {
        	                return i;
        	            }
        	        }
        	    }
        	}
        	
        	public checkcurrentPageIndex(): boolean {
        		const currentIndex = this.local.currentIndex;
        		const pages = this.local.pages;
        		try {
        			if (
        				pages[currentIndex].enabled !== undefined &&
        				((pages[currentIndex].enabled === true) ||
        					(pages[currentIndex].enabled instanceof Object &&
        						Object.keys(pages[currentIndex].enabled)
        							.map((e) => this.local.pages[currentIndex].enabled[e])
        							.includes(true)))
        			) {
        				return true;
        			}
        		} catch (e) {
        			if (pages[currentIndex].enabled === true) {
        				return true;
        			}
        			return false;
        
        		}
        		return false;
        	}
        	
        	/**
        	 * Returns the index of the previous available page.
        	 * @returns The index of the previous available page.
        	 */
        	public getPreviousPageIndex(): number {
        	    const currentIndex = this.local.currentIndex;
        	    const pages = this.local.pages;
        	
        	    for (let i = currentIndex - 1; i >= 0; i--) {
        	        try {
        	            if (
        	                pages[i].enabled !== undefined &&
        	                ((pages[i].enabled === true) ||
        	                    (pages[i].enabled instanceof Object &&
        	                        Object.keys(pages[i].enabled)
        	                            .map((e) => this.local.pages[i].enabled[e])
        	                            .includes(true)))
        	            ) {
        	                return i;
        	            }
        	        } catch (e) {
        	            if (pages[i].enabled === true) {
        	                return i;
        	            }
        	        }
        	    }
        	
        	    return 0;
        	}
        	
        	/**
        	 * Checks if there is a next page available.
        	 * @returns A boolean indicating whether there is a next page available.
        	 */
        	public isThereANextPage(): boolean {
        	    const pages = this.local.pages;
        	    const currentIndex = this.local.currentIndex;
        	
        	    if (pages !== undefined && currentIndex < pages.length - 1) {
        	        for (let i = currentIndex + 1; i < pages.length; i++) {
        	            if (
        	                pages[i].enabled !== undefined &&
        	                ((pages[i].enabled === true) ||
        	                    (pages[i].enabled instanceof Object &&
        	                        Object.keys(pages[i].enabled)
        	                            .map((e) => this.local.pages[i].enabled[e])
        	                            .includes(true)))
        	            ) {
        	                return true;
        	            }
        	        }
        	    }
        	
        	    return false;
        	}
        	public isThereAPreviousPage(): boolean {
        	    try {
        	        const pages = this.local.pages;
        	        const currentIndex = this.local.currentIndex;
        	
        	        if (pages !== undefined && currentIndex > 0) {
        	            for (let i = 0; i < currentIndex; i++) {
        	                if (pages[i].enabled !== undefined && ((pages[i].enabled === true) || (pages[i].enabled instanceof Object &&  Object.keys(pages[i].enabled).map((e) => this.local.pages[i].enabled[e]).includes(true)))) {
        	                    return true;
        	                }
        	            }
        	        }
        	        return false;
        	    }
        	    catch (e) {
        	        return true;
        	    }
        	
        	}
        	
        	/**
        	 * Checks for any existing condition and initializes the value of some objects.
        	 * @param formList - The form list to check for conditions and initialize values. Default is formsList.
        	 */
        	public checkForAnyCondition(formList = this.formsList): void {
        	    if (this.local.initDone === undefined) {
        	        this.local.initDone = {};
        	    }
        	
        	    for (let e of formList) {
        	        let elem: any = e;
        	
        	        try {
        	            if (
        	                elem.conditions !== undefined &&
        	                elem.conditions.goToPageIf !== undefined &&
        	                elem.conditions.goToPageIf.conds !== undefined
        	            ) {
        	                if (this.local.initDone[elem.id] == null) {
                                this.detectTypeAndComplete(elem.conditions.goToPageIf.conds, elem);
                                this.local.initDone[elem.id] = true;
                            }
        	            }
        	
        	            if (elem.type === "ion-card") {
        	                this.checkForAnyCondition(elem.children);
        	            }
        	        } catch (e) {
        	            console.log(e);
        	        }
        	    }
        	    if(!this.checkcurrentPageIndex()){
        			this.local.currentIndex = this.getNextPageIndex();
        		}
        	}
        	
        	/**
        	 * Returns the path to an element by its name.
        	 * @param name - The name of the element to search for.
        	 * @param index - The current index (used internally).
        	 * @param formsSubmit - The formsSubmit object to search within. Default is this.formsSubmit.
        	 * @returns The path to the element, or null if not found.
        	 */
        	public getElementByNameIntoFormSubmit(name: string, index = null, formsSubmit = this.formsSubmit): any[] | null {
        	    for (let i in formsSubmit) {
        	        if (formsSubmit[i].name === name) {
        	            if (index === null) {
        	                return [i];
        	            } else {
        	                return [index, i];
        	            }
        	        } else if (formsSubmit[i].type === "ion-card") {
        	            let idx = this.getElementByNameIntoFormSubmit(name, i, formsSubmit[i]["children"]);
        	            if (idx !== null) {
        	                return idx;
        	            }
        	        }
        	    }
        	
        	    return null;
        	}
        	
        	/**
        	 * Get the selected option from a select element.
        	 * @param arr - The array of options to search within.
        	 * @param val - The value to match against.
        	 * @returns The selected option value, or an empty string if not found.
        	 */
        	public getSelectSelectedOne(arr: any[], val: any): string {
        	    const filt = arr.filter((x) => {
        	        return typeof x === "string" ? x == val : x.value != undefined ? x.value == val : x.displayValue == val;
        	    });
        	
        	    return filt.length > 0 ? (filt[0].displayValue != undefined ? filt[0].displayValue : filt[0]) : "";
        	}
        
        
        	/**
        	 * Define colors for the header.
        	 */
        	public defineColorsForHeader(): void {
        	    this.local.headerColor = "#ffffff";
        	    this.local.policyColor = "black";
        	    const btLightColor = "#ff8206";
        	    const btLightColor2 = "#ffc906";
        	    const secondaryColor = "#32db64";
        	    const secondaryColor2 = "#0cbbe7";
        	    const dangerColor = "#f53d3d";
        	    const dangerColor2 = "#950000";
        	    this.local.policyBtLightColor = "btLight";
        	    this.local.policySecondaryColor = "secondary";
        	    this.local.policyDangerColor = "danger";
        	
        	    try {
        	        const indexPWA = window.location.pathname.indexOf("pwas");
        	        const indexMobile = window.location.pathname.indexOf("mobile");
        	        // If we started in standalone PWA mode
        	        if (indexPWA !== -1 && indexMobile === -1) {
        	            // Get URL base
        	            const baseUrl = window.location.origin + this.getInstance(APP_BASE_HREF);
        	            this.global.pwaGet = this.c8o.httpPublic.get(baseUrl + "manifest.webmanifest");
        	            this.global.pwaGet.subscribe(
        	                response => {
        	                    if (response["theme_color"] !== undefined) {
        	                        this.local.headerColor = response["theme_color"];
        	                        // Color asked for theme
        	                        const color1 = new TinyColor(this.local.headerColor);
        	                        // Background color
        	                        const color2 = new TinyColor("#ffffff");
        	                        // Get ALPHA
        	                        let amount = color1.getAlpha() * 100;
        	                        const visibleColor = color2.mix(color1, amount);
        	                        let readabilitBlack = readability(visibleColor, "black");
        	                        let readabilitWhite = readability(visibleColor, "white");
        	                        if (readabilitWhite > readabilitBlack) {
        	                            this.local.policyColor = "white";
        	                            this.local.hooverPolicyColor = new TinyColor(visibleColor).tint(50).toString();
        	                        } else {
        	                            this.local.hooverPolicyColor = new TinyColor(visibleColor).shade(50).toString();
        	                        }
        	                        try {
        	                            const stylesheet = document.styleSheets[0];
        	                            stylesheet.insertRule(".tab-selected { color: " + this.local.policyColor + " !important;}");
        	                        } catch (e) {
        	                            // do nothing
        	                        }
        	                        // Checking for other icons
        	                        let readabilitBtLight = readability(visibleColor, btLightColor);
        	                        let readabilitBtLight2 = readability(visibleColor, btLightColor2);
        	                        if (readabilitBtLight2 > readabilitBtLight) {
        	                            this.local.policyBtLightColor = "otherBtLight";
        	                        }
        	                        let readabilitSecondary = readability(visibleColor, secondaryColor);
        	                        let readabilitSecondary2 = readability(visibleColor, secondaryColor2);
        	                        if (readabilitSecondary2 > readabilitSecondary) {
        	                            this.local.policySecondaryColor = "convertigo";
        	                        }
        	                        let readabilitDanger = readability(visibleColor, dangerColor);
        	                        let readabilitDanger2 = readability(visibleColor, dangerColor2);
        	                        if (readabilitDanger2 > readabilitDanger) {
        	                            this.local.policyDangerColor = "otherDanger";
        	                        }
        	                    }
        	                },
        	                error => {
        	                    // Do nothing
        	                }
        	            );
        	        }
        	    } catch (e) {
        	        // Do nothing
        	    }
        	}
        	
        	/**
        	 * Remove HTML tags from a string.
        	 * @param str - The input string containing HTML tags.
        	 * @returns The string without HTML tags.
        	 */
        	public removeHTML(str: string): string {
        	    const tmp = document.createElement("DIV");
        	    tmp.innerHTML = str;
        	    return tmp.textContent || tmp.innerText || "";
        	}
        	
        	/**
        	 * Get the focus element type based on the input type.
        	 * @param type - The input type.
        	 * @returns An object containing the DOM element and the shadow DOM element if applicable.
        	 */
        	public getFocusElement(type: string): { dom: string, shadowDom: string } {
        	    switch (type) {
        	        case "text":
        	            return { dom: "input", shadowDom: null };
        	        case "img":
        	            return { dom: "ion-button", shadowDom: "button" };
        	        case "checkbox":
        	            return { dom: "ion-item", shadowDom: null };
        	        case "checkbox_group":
        	            return { dom: "ion-item", shadowDom: null };
        	        case "radio":
        	            return { dom: "ion-radio", shadowDom: null };
        	        case "radio_group":
        	            return { dom: "ion-radio", shadowDom: null };
        	        case "datetime":
        	            return { dom: "input", shadowDom: null };
        	        case "time":
        	            return { dom: "input", shadowDom: null };
        	        case "textarea":
        	            break;
        	        case "signature":
        	            break;
        	        case "barcode":
        	            return { dom: "input", shadowDom: null };
        	        case "slider":
        	            return { dom: "mat-slider", shadowDom: null };
        	        case "select":
        	            return { dom: "ion-item", shadowDom: null };
        	        case "file":
        	            return { dom: "ion-button", shadowDom: "button" };
        	        case "grid":
        	            return { dom: "div.ag-header-cell", shadowDom: null };
        	        case "location":
        	            return { dom: "input", shadowDom: null };
        	        default:
        	            return null;
        	    }
        	}
        	
        	/**
        	 * Move the focus to the next focusable element.
        	 */
        	public moveFocus(): void {
        	    setTimeout(() => {
        	        try {
        	            let elem = null;
        	            for (let elems of this.form.formulaire.filter(x => {
        	                return x.config.page === this.local.pages[this.local.currentIndex].pageTechName;
        	            }).map(x => {
        	                if (x.type === "ion-card") {
        	                    return x.children;
        	                } else {
        	                    return x;
        	                }
        	            }).flat()) {
        	                const focusElement = this.getFocusElement(elems.type);
        	                if (focusElement !== null && focusElement.dom !== null) {
        	                    elem = elems;
        	                    break;
        	                }
        	            }
        	            if (elem !== null) {
        	                const item: any = document.getElementById("" + elem.name);
        	                const focusElement = this.getFocusElement(elem.type);
        	                if (focusElement.dom !== undefined) {
        	                    if (focusElement.shadowDom !== undefined) {
        	                        item.querySelectorAll(focusElement.dom)[0].shadowRoot.querySelector(focusElement.shadowDom).focus();
        	                    } else {
        	                        item.querySelectorAll(focusElement.dom)[0].focus();
        	                    }
        	                }
        	            }
        	        } catch (e) {
        	            // Do nothing
        	        }
        	    });
        	}
        	
        	/**
        	 * Set the title for RGAA compliance.
        	 */
        	public setTitleRGAA(): void {
        	    if (this.local.originalTitle === undefined) {
        	        this.local.originalTitle = "" + document.head.getElementsByTagName("title")[0].textContent;
        	    }
        	    document.head.getElementsByTagName("title")[0].textContent =
        	        this.local.originalTitle + ": " + this.form.pages[this.local.currentIndex].name;
        	}
        	
        	/**
        	 * Restore the original title.
        	 */
        	public restaureTitleRGAA(): void {
        	    document.head.getElementsByTagName("title")[0].textContent = this.local.originalTitle;
        	}
        	
        	/**
        	 * Transform a value to an HTML string.
        	 * @param v - The value to transform.
        	 * @returns The HTML string representation of the value.
        	 */
        	public transform$toHtml(v: any): string {
        	    return "";
        	}
        
        	private instanciateApi(){
        		window["api"] = {
        			router: {
        				// more definitions below in Object.defineProperty section
        				/**
        				 * Navigate to next page
        				 * @param force boolean, if true we force navigation to next page, even if condtions are not met. Default is false
        				 * @returns boolean success
        				 */
        				nextPage: async (force?: boolean) => {
        					let nextPageIndex = this.getNextPageIndex();
        					// if we are at last page: fail
        					if(nextPageIndex == undefined || nextPageIndex == this.local.currentIndex){
        						return false;
        					}
        					else{
        						let res = await this.actionBeans.STS1576328658272(this, {}, {indexPage: this.local.currentIndex, pages: this.local.pages, doAll: false}, event);
        						let next = false;
        						if(res.nextPage){
        							next = true;
        						}
        						else if(force == true){
        							next = true;
        						}
        						if(next){
        							this.local.currentIndex = nextPageIndex;
        						    this.myContent1.scrollToTop();
        						    let i = this["navParams"].get("i") != undefined ? this["navParams"].get("i") : ":i";
        							let edit = this["navParams"].get("edit") != undefined ? this["navParams"].get("edit") : ":edit";
        							let formId = this["navParams"].get("formId") != undefined ? this["navParams"].get("formId") : ":formId";
        							history.pushState({page: this["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
        							this.moveFocus();
        							this.setTitleRGAA();
        							return true;
        						}
        						else{
        							return false;
        						}
        					}
        				},
        				/**
        				 * Navigate to previous page
        				 * @param force boolean, if true we force navigation to previous page, even if condtions are not met. Default is false
        				 * @returns boolean success
        				 */
        				previousPage: async (force?: boolean) => {
        					let previousPageIndex = this.getPreviousPageIndex();
        					// if we are at first page: fail
        					if(previousPageIndex  == undefined || previousPageIndex == this.local.currentIndex){
        						return false;
        					}
        					else{
        						this.local.currentIndex = previousPageIndex;
        					    let i = this["navParams"].get("i") != undefined ? this["navParams"].get("i") : ":i";
        						let edit = this["navParams"].get("edit") != undefined ? this["navParams"].get("edit") : ":edit";
        						let formId = this["navParams"].get("formId") != undefined ? this["navParams"].get("formId") : ":formId";
        						history.pushState({page: this["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
        						this.setTitleRGAA();
        						return true;
        					}
        				},
        				/**
        				 * Navigate to a given index
        				 * @param index number, the index page to navigate
        				 * @param force boolean, if true we force navigation given index page, even if condtions are not met. Default is false
        				 * @returns boolean success
        				 */
        				navigateAtIndex: async (index: number, force?: boolean) => {
        					let count = window["api"].router.count() -1;
        					if(index >= 0 && index <= count){
        						let res = await this.actionBeans.STS1576328658272(this, {}, {indexPage: this.local.currentIndex, pages: this.local.pages, doAll: false}, event);
        						let next = false;
        						if(res.nextPage){
        							next = true;
        						}
        						else if(force == true){
        							next = true;
        						}
        						if(next){
        							this.local.currentIndex = index;
        						    this.myContent1.scrollToTop();
        						    let i = this["navParams"].get("i") != undefined ? this["navParams"].get("i") : ":i";
        							let edit = this["navParams"].get("edit") != undefined ? this["navParams"].get("edit") : ":edit";
        							let formId = this["navParams"].get("formId") != undefined ? this["navParams"].get("formId") : ":formId";
        							history.pushState({page: this["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
        							this.moveFocus();
        							this.setTitleRGAA();
        							return true;
        						}
        					}
        					else{
        						return false;
        					}
        				},
        				/**
        				 * Submit the form
        				 * @returns Promise<void>
        				 */
        				submit: async () => {
        					let r = await this.actionBeans.STS1576328658272(this, {}, {}, event);
        					if(r){
        						let i = this["navParams"].get("i") != undefined ? this["navParams"].get("i") : ":i"; 
        						let edit = this["navParams"].get("edit") != undefined ? this["navParams"].get("edit") : ":edit";
        						let formId = this["navParams"].get("formId") != undefined ? this["navParams"].get("formId") : ":formId";
        						history.pushState({page: 0, formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
        						return true;
        					}
        					else{
        						return false;
        					}
        					
        				},
        				/**
        				 * Reload the form
        				 * @returns void
        				 */
        				reload: () => {
        					window.location.reload();
        				}
        			},
        			c8o: this.c8o,
        			translate:window["__c8o__translate"],
        			app: {
        				state: async()=>{
        					await this.global._appPromise();
        					return this.global.app.state;
        				},
        				currentVersion: async()=>{
        					await this.global._appPromise();
        					return this.global.app.currentVersion;
        				},
        				latestVersion: async()=>{
        					await this.global._appPromise();
        					return this.global.app.latestVersion;
        				}
        			},
        			form:{
        				// definitions below in Object.defineProperty section
        			},
        			user:{
        				// definitions below in Object.defineProperty section
        			}
        		}
        		Object.defineProperty(window["api"]["router"], ''currentIndex'', {
        			/**
        			 * Get current index page
        			 * @returns number current index page
        			 */
        			get: function() {
        			  return this.local.currentIndex;
        			}.bind(this),
        			/**
        			 * set current index page
        			 * @returns void
        			 */
        			set: function(val){
        			  this.local.currentIndex = val;
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["router"], ''count'', {
        			/**
        			 * Count pages
        			 * @returns number count pages
        			 */
        		  	get: function() {
        			  return this.local.pages.filter(x=> x.enabled).length;
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["user"], ''authenticated'', {
        		  	get: function() {
        			  return this.c8o.session.user.authenticated;
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["user"], ''groups'', {
        		  	get: function() {
        			  return this.c8o.session.user.groups;
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["user"], ''maxInactive'', {
        		  	get: function() {
        			  return this.c8o.session.user.maxInactive;
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["user"], ''name'', {
        		  	get: function() {
        			  return this.c8o.session.user.name;
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["user"], ''sessionId'', {
        		  	get: function() {
        			  return this.c8o.session.user.sessionId;
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["form"], ''version'', {
        		  	get: function() {
        			  return this.form?.version != undefined ? this.form?.version :"test_version"
        			}.bind(this)
        		});
        		Object.defineProperty(window["api"]["form"], ''published'', {
        		  	get: function() {
        			  return this.form?.c8o_view_type_published_form === true
        			}.bind(this)
        		});
        	}
        	
        	public getIndexGridAtRunTime(indexName, objectName){
        		try{ 
        			if(this.local.techGrid[objectName][''data''][indexName] == null){
        				for(let x in this.local.techGrid[objectName][''data'']){
        					let item = this.local.techGrid[objectName][''data''][x]
        					if(item["technicalName"] == indexName){
        						return x;
        					}
        				}
        				return indexName;
        			}
        			else{
        				return indexName;
        			}
        		}
        		catch(e){
        			return indexName
        		}
        	}
        	
        	public replicatePushResponse(): Promise<any> {
        		return new Promise((resolve, reject)=>{
        		try {
        			this.local.response_sub = {
        			complete: false,
        			total: 0			
        		}
        		this.c8o.promiseFinInit.then((r)=>{
        			this.c8o.callJsonObject("fs://c8oforms_response_fs.replicate_push", {retry: true})
        			.then((res)=>{
        				console.log(''res'', res);
        				resolve();
        				return null;
        			})
        			.progress((progress)=>{
        				this.local.response_sub.total = progress.total;
        				if(progress.status == "complete"){
        					this.local.response_sub.complete = true;
        					
        				}
        				else{
        					this.local.response_sub.complete = false;
        				}
        			})
        		})
        		
        			} catch (e) {
        				reject();
        			}
        		})
        	}
        	
        	public cancelReplicatePushResponse(): any{
        		return this.c8o.callJsonObject("fs://c8oforms_response_fs.replicate_push", {cancel: true}).async();
        	}
            /*End_c8o_PageFunction*/
        '
segment: viewer/:formId/:edit/:i
title: Visualisateur
↓PageEvent [ngx.components.UIPageEvent-1537364954559]: 
  viewEvent: onWillEnter
  ↓Error_Handler [ngx.components.UIActionErrorEvent-1576602133134]: 
    ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1586424644097]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms.MobileApplication.Application.removeSpinner
  ↓setSomeLocalsVariables [ngx.components.UICustomAsyncAction-1646739156587]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		try {
            			page.defineColorsForHeader();
            			page.local.p = "viewer";
            		    page.local.errorViewer = false;
            		    page.local.formId = page.navParams.get('formId');
            		    page.local.published = page.global.published;
            		    page.local.user = page.navParams.get('i');
            		    // if we are in anonymous mode
            		    if(page.local.user != undefined && page.local.user != ":i"){ 	        
            		        page.local.grp = {};
                            page.local.anonymous = true;
            				page.global.anonymous = page.local.anonymous;
                        }
                        else{
            				page.local.user = page.global.user;
            			}
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            
    package_dependencies: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'
              - java.lang.String: 
                - ↑value: 3.4.0
    page_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: readability
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: mostReadable
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: TinyColor
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'
    ↓If [ngx.components.UIDynamicAction-1628003483159]: 
      beanData: '{"ionBean":"IfAction","condition":"script:this.local.hash == undefined"}'
      ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1586254439607]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.setSpinner
      ↓getUrlParameters [ngx.components.UICustomAction-1570712319541]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                		    this.global.debug = {};
                		    let formId = this.navParams.get('formId');
                		    let edit = this.navParams.get('edit');
                		    if(edit != undefined && edit != ":edit"){
                		        this.local.edit = edit;
                		    }
                		    this.local.formId = formId;
                		    // get predefined values
                		    this.local.urlParams = new URLSearchParams(window.location.search);
                		    
                		    // end get predefined values
                		    
                		    if(formId != null && formId != ":formId"){
                		        
                		        resolve(true);
                		    }
                		    else{
                		        resolve(false);
                		    }		
                
        package_dependencies: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                - com.twinsoft.convertigo.beans.common.XMLVector: 
                  - java.lang.String: 
                    - ↑value: js-sha256
                  - java.lang.String: 
                    - ↑value: 0.9.0
        page_ts_imports: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                - com.twinsoft.convertigo.beans.common.XMLVector: 
                  - java.lang.String: 
                    - ↑value: Priority
                  - java.lang.String: 
                    - ↑value: c8osdkangular
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                - com.twinsoft.convertigo.beans.common.XMLVector: 
                  - java.lang.String: 
                    - ↑value: C8oLocalCache
                  - java.lang.String: 
                    - ↑value: c8osdkangular
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                - com.twinsoft.convertigo.beans.common.XMLVector: 
                  - java.lang.String: 
                    - ↑value: sha256
                  - java.lang.String: 
                    - ↑value: js-sha256
        ↓ifFormIdIsDefined [ngx.components.UIDynamicIf-1570701884872]: 
          beanData: '{"ionBean":"IfElseAction"}'
          ↓IfEditingAResponse [ngx.components.UIDynamicIf-1572271164680]: 
            beanData: '{"ionBean":"IfElseAction","condition":"script:this.local.edit != undefined"}'
            ↓SyncFsResponses [ngx.components.UIDynamicAction-1576601220792]: 
              beanData: '{"ionBean":"FullSyncSyncAction","requestable":"plain:C8Oforms.c8oforms_response_fs"}'
              isEnabled: false
              ↓GetResponseToEdit [ngx.components.UIDynamicAction-1576601220795]: 
                beanData: |
                  '{
                   "ionBean": "FullSyncGetAction",
                   "requestable": "plain:C8Oforms.c8oforms_response_fs",
                   "_id": "script:this.local?.edit"
                  }'
                ↓setLocal [ngx.components.UICustomAction-1576601220798]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		page.local.respInit = props.out.resp;
                          		resolve();
                          
                  ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1586254658439]: 
                    beanData: '{"ionBean":"InvokeAction"}'
                    stack: C8Oforms.MobileApplication.Application.syncAndInvokeViewer
              ↓PublishEventInitalSyncFinished [ngx.components.UIDynamicAction-1601369388218]: 
                beanData: |
                  '{
                   "ionBean": "PublishEventAction",
                   "topic": "plain:anyInitalSyncFinished",
                   "data": "script"
                  }'
            ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1697472752213]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.callViewLiveAndFillFormListViewer
              ↓fs [ngx.components.UIControlVariable-1697472752216]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
              ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1697472752219]: 
                beanData: '{"ionBean":"InvokeAction"}'
                stack: C8Oforms.MobileApplication.Application.removeSpinner
              ↓fromId [ngx.components.UIControlVariable-1697472779183]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local.edit
            ↓Else_Handler [ngx.components.UIActionElseEvent-1572271179176]: 
              ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1697458993389]: 
                beanData: '{"ionBean":"InvokeAction"}'
                stack: C8Oforms.MobileApplication.Application.callViewLiveAndFillFormListViewer
                ↓fs [ngx.components.UIControlVariable-1697458993392]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:true
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1697458993395]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.removeSpinner
          ↓Else_Handler [ngx.components.UIActionElseEvent-1570701884980]: 
            ↓IfElse [ngx.components.UIDynamicIf-1593622945986]: 
              beanData: '{"ionBean":"IfElseAction","condition":"script:this.local.user != undefined || this.local.user != \":i\""}'
              ↓LoadFormanonymous [ngx.components.UICustomAction-1593622986245]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		    this.global.errorViewer = false; 
                        		    page.local.user = this.navParams.get(''i'');
                        		    page.c8o.callJson(".getAnonymousForm", "login", page.local.user,"__disableAutologin", true)
                                    .then((res: any)=>{
                                        page.local.sourceValue = {};
                                        let respInit = null;
                                        if(res.transaction != undefined && res.transaction.document != undefined && res.transaction.document.couchdb_output != undefined && res.transaction.document.couchdb_output.rows != undefined && res.transaction.document.couchdb_output.rows[0] != undefined){
                                            let response = res.transaction.document.couchdb_output;
                                             if(response.rows != undefined){
                                                if(response.rows[0] != undefined){
                                                    page["local"]["_rev"] = response.rows[0].value.doc[''_rev''];
                                                    page["form"] = response.rows[0].value.doc;
                                                    page["formsList"] = response.rows[0].value.doc.formulaire;
                                                    page["link"] = response.rows[0].value.doc["wallpaper"]["link"];
                                                    try{
                                                        page["local"]["pages"] =  response.rows[0].value.doc["pages"]  
                                                        for(let i in page.local.pages){
                                                            page["local"]["pages"][i]["enabled"] = true;
                                                        }
                                                        page["local"]["currentIndex"] = 0;
                                                    }
                                                    catch(e){
                                                        page["local"]["pages"] = undefined;
                                                        page["local"]["currentIndex"] = 0;
                                                    }
                                                    
                                                    
                                                    page.c8o.log.debug("CallViewLiveAndFillFormList: formsList object has been updated from live view");
                                                    
                                                    // load background image if we are in new support mode image
                                                    if(response.rows[0].value.doc["wallpaper"]["enabled"] && page["form"]["wallpaper"]["type"] != undefined && page["form"]["wallpaper"]["type"] != ''color''){
                                                        page.c8o.get_attachment(page["form"]["_id"], "wallpaper", "c8oforms_fs")
                                                        .then((res) => {
                                                            var urlCreator = window["URL"] || window["webkitURL"];
                                                            page.local.url = urlCreator.createObjectURL(res);
                                                            page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                                            page.tick();
                                                        }).catch((err) => {
                                                            page.c8o.log.error("Error loading wallpaper from local base", err);
                                                        }); 
                                                    }
                                                    else{
                                                        page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                                    }
                                                
                                                    const checkAuthorizedPages = (item: any) => {
                                                        if(item.config.page != undefined && item.config.page != ""){
                                                            if(item.conditions != undefined && item.conditions.goToPageIf != undefined){
                                                                for(let el of item.conditions.goToPageIf.conds){
                                                                    if((el.val2.source == false && (el.val2.str != "" || Object.keys(el.val2.vals).length > 0)) && el.operator != undefined && el.operator != "" && el.page != undefined && el.page != ""){
                                                                        //this is a valid goToPage condition so enable it 
                                                                        for(let i in page.local.pages){
                                                                            if(+i == page.local.currentIndex){
                                                                                page.local.pages[+i].enabled = true;
                                                                            }
                                                                            else{
                                                                                page.local.pages[+i].enabled = false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                
                                                            }
                                                        }
                                                    };
                        							page.local.functionsToBeCalled = {};
                                                    
                                                    let fillFormSubmit = (list, redList, formSubmit, response) => {
                                                        page.local.subKeyD = page.local.urlParams.get("_c8o_subkey");
                                                        page.local.subKeyD = page.local.subKeyD == null ? "," : page.local.subKeyD;
                                                        try  {
                                                            for(let item of list){
                                                                //checkAuthorizedPages(item);
                                                                if(item["type"] == "ion-card"){
                                                                    redList[item["name"]] = {};
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "children":{}, "label":item["config"]["title"]["text"], "labelHtml":item["config"]["title"]["personalized"] ? item["config"]["title"]["html"] : item["config"]["title"]["text"]};
                                                                    //redList[item["name"]]["children"] = [];
                                                                    
                                                                    let res = response != undefined ? response[item["name"]]["children"] : null;
                                                                    fillFormSubmit(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"], res);
                                                                }
                                                                else if(item["type"] == "text"){
                                                                    let urlParams = page.local.urlParams.get(item["name"]);
                                                                    let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                }
                        										else if(item["type"] == "location"){
                                                                    let urlParams = page.local.urlParams.get(item["name"]);
                                                                    let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":{"addr":{}, "gps":{}}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                }
                                                                else if(item["type"] == "checkbox"){
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                    let urlParams = page.local.urlParams.get(item["name"]);
                                                                    let array = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                                                                    for(let child in item["children"]){
                                                                        let selected;
                                                                        try {
                                                                            let s = array.indexOf(item["children"][child].value) != -1;
                                                                            selected = s == true ? s : respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                                        }
                                                                        catch(e){
                                                                            
                                                                        }
                                                                        
                                                                        formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected, "other": item["children"][child].other});
                                                                    }
                                                                }
                        										else if(item.type == "grid"){
                        											let findName = "";
                                                                    let findVars = {};
                        											let ObjectThatHaveToCallFunc = [];
                                                                        for(let w in item["sources"]){
                                                                            if(item["sources"][w].enabled == true){
                                                                              for (const [key, value] of (<any>Object).entries(item["sources"][w]["vars"])) {
                                                                                  findVars[key] = value["str"];
                                                                              }
                                                                              findName = w;
                                                                            }
                                                                        }
                        
                        												const regex = /[$$]{2}\w+[$$]{2}/gm
                        												for(let va in findVars){
                                                            
                        				                                    let str = findVars[va];
                        				                                    if(str == undefined){
                        				                                        str = "";
                        				                                    }
                        				                                    var arrayFound = str.match(regex);
                        				                                    str = "''" + str + "''";
                        				                                    if(arrayFound!= undefined && arrayFound.length > 0){
                        				                                        for(let elements of arrayFound){
                        				                                            let iStart = str.indexOf(elements);
                        				                                            let iEnd = iStart + elements.length;
                        				                                            let id = elements.substring(2, elements.length -2);
                        				    										ObjectThatHaveToCallFunc.push(id);
                        				                                            let path = page["getPathById"](+id);
                        				                                            let currentVal = "''+"+ path +"+''";
                        				                                            
                        				                                            str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
                        				                                        }
                        				                                        findVars[va] = str;
                        				                                    }
                        				                                    else{
                        				                                        findVars[va] = str;
                        				                                    }
                        												}
                        											if(findName != ""){
                        												let showOverlay = undefined;
                        												let dismissOverlay = ()=>{
                        														
                        													};
                        												let funcTocall = ()=>{
                        													
                        													if(showOverlay == undefined){
                        														for(let grid of page["all_agGrid"][''_results'']){
                        															if(grid._nativeElement.id == item.id+""){
                        																grid.api.showLoadingOverlay();
                        																showOverlay = ()=>{
                        																	grid.api.showLoadingOverlay();
                        																	dismissOverlay = ()=>{
                        																		grid.api.hideOverlay();
                        																	};
                        																}
                        															}
                        										            	}
                        													}
                        													else{
                        														showOverlay();
                        													}
                        													
                        													page.local.updating[item.id] = 0;
                        													let variables = {};
                        													for(let va in findVars){
                        														variables[va] = eval(findVars[va]);
                        													}
                        													page.c8o.callJsonObject(findName,variables)
                        													.then((res: any) =>{
                        	                                                    // find Colomn definitions
                        														if(res.data != undefined && res.data.length>0){
                        															let colDef = 
                        															Object.keys(res.data[0]).map((y)=>{
                        																return {"field": y}
                        															});
                        															// find data
                        															formSubmit[item["name"]] = {};
                        															let data = res.data;
                        															formSubmit[item["name"]]["colDef"] = colDef;
                        															formSubmit[item["name"]]["data"] = data;
                        															page.local.updating[item.id] = 1;
                        															dismissOverlay();
                        														}
                        														else{
                        															formSubmit[item["name"]]["data"] = [];
                        														}
                        														
                        	                                                    return null;
                        	                                                })
                        	                                                .fail((err)=>{
                        														dismissOverlay();
                        	                                                    page.c8o.log.error("an error occured while trying to laod source for  select", err);	
                        														page.local.updating[item.id] = 2;
                        	                                                })
                        												};
                        												if(ObjectThatHaveToCallFunc!= undefined && ObjectThatHaveToCallFunc.length > 0){
                        													let onlyUnique = (value, index, self)=> {
                        													  return self.indexOf(value) === index;
                        													}
                        													var unique = ObjectThatHaveToCallFunc.filter(onlyUnique);
                        													unique.forEach((x)=>{
                        														if(page.local.functionsToBeCalled[x] == undefined){
                        																page.local.functionsToBeCalled[x] = [];
                        															}
                        															page.local.functionsToBeCalled[x].push(funcTocall);
                        													});
                        												}
                        												funcTocall();
                                                                    }
                        											
                        										}
                                                                else if(item["type"] == "radio" || item["type"] == "select"){
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                        											// if item is sourced
                        											if(item["type"] == "select" && item["config"]["sourceEnabled"] == true){
                        												let findName = "";
                        	                                            let findVars = {};
                        												let ObjectThatHaveToCallFunc = [];
                        	                                                for(let w in item["sources"]){
                        	                                                    if(item["sources"][w].enabled == true){
                        	                                                      for (const [key, value] of (<any>Object).entries(item["sources"][w]["vars"])) {
                        	                                                          findVars[key] = value["str"];
                        	                                                      }
                        	                                                      findName = w;
                        	                                                    }
                        	                                                }
                        	
                        													const regex = /[$$]{2}\w+[$$]{2}/gm
                        													for(let va in findVars){
                        														if(va == "forms_filter"){
                        															findVars[va] = "page.local.filters_elems[''"+item.id+"''] == undefined ? '''': page.local.filters_elems[''"+item.id+"'']";
                        															ObjectThatHaveToCallFunc.push(item.id);
                        														}
                        														else{
                        															let str = findVars[va];
                        						                                    if(str == undefined){
                        						                                        str = "";
                        						                                    }
                        						                                    var arrayFound = str.match(regex);
                        						                                    str = "''" + str + "''";
                        						                                    if(arrayFound!= undefined && arrayFound.length > 0){
                        						                                        for(let elements of arrayFound){
                        						                                            let iStart = str.indexOf(elements);
                        						                                            let iEnd = iStart + elements.length;
                        						                                            let id = elements.substring(2, elements.length -2);
                        						    										ObjectThatHaveToCallFunc.push(id);
                        						                                            let path = page["getPathById"](+id);
                        						                                            let currentVal = "''+"+ path +"+''";
                        						                                            
                        						                                            str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
                        						                                        }
                        						                                        findVars[va] = str;
                        						                                    }
                        						                                    else{
                        						                                        findVars[va] = str;
                        						                                    }
                        														}
                        													}
                        												if(findName != ""){
                        													let funcTocall = ()=>{
                        														let funcId = new Date().getTime();
                        														page.local.doing[item.id] = funcId;
                        														page.local.updating[item.id] = 0;
                        														let variables = {};
                        														for(let va in findVars){
                        															variables[va] = eval(findVars[va]);
                        															if(variables[va] == undefined || variables[va] == "undefined"){
                        																delete variables[va];
                        															}
                        														}
                        														page.c8o.callJsonObject(findName,variables)
                        														.then((res: any) =>{
                        															let defaultSelected ="";
                        															// if we are still the latest request for this object
                        															if(funcId == page.local.doing[item.id]){
                        																// find Colomn definitions
                        																let urlParams = page.local.urlParams.get(item["name"]);
                        																if(page["formsSubmit"][item.name] != undefined && page["formsSubmit"][item.name].children != undefined && page["formsSubmit"][item.name].children.length > 0){
                        																	const tmp = page["formsSubmit"][item.name].children.filter(x=> x.selected == true);
                        																	if(tmp != undefined && tmp.length > 0){
                        																		urlParams = tmp[0].value
                        																	}
                        																}
                        																formSubmit[item["name"]]["children"] = [];
                        			                                                    
                        																let array = [];
                        																if(!(res["value"] == undefined)){
                        													                if(typeof(res["value"]) == "string"){
                        													                    array.push(res["value"]);
                        													                }
                        													                else{
                        													                    for(let child of res["value"]){
                        													                        array.push(child);
                        													                    }
                        													                }
                        													                
                        													            }
                        			                                                    for(let child of array){
                        			                                                        if(child == urlParams){
                        			                                                            defaultSelected = child;
                        			                                                        }
                        			                                                        formSubmit[item["name"]]["children"].push({"value": child, "selected": child == urlParams});
                        			                                                    }
                        			                                                    formSubmit[item["name"]]["value"] = defaultSelected;
                        	 															page.local.sourceValue[item.name] = array;
                        																page.local.updating[item.id] = 1;
                        															}
                        															formSubmit[item["name"]]["value"] = defaultSelected;
                        		                                                    return null;
                        		                                                })
                        		                                                .fail((err)=>{
                        		                                                    page.c8o.log.error("an error occured while trying to laod source for  select", err);
                        															// if we are still the latest request for this object
                        															if(funcId == page.local.doing[item.id]){
                        																page.local.updating[item.id] = 2;
                        															}
                        		                                                })
                        													};
                        													if(ObjectThatHaveToCallFunc != undefined && ObjectThatHaveToCallFunc.length > 0){
                        														let onlyUnique = (value, index, self)=> {
                        														  return self.indexOf(value) === index;
                        														}
                        														var unique = ObjectThatHaveToCallFunc.filter(onlyUnique);
                        														unique.forEach((x)=>{
                        															if(page.local.functionsToBeCalled[x] == undefined){
                        																page.local.functionsToBeCalled[x] = [];
                        															}
                        															page.local.functionsToBeCalled[x].push(funcTocall);
                        														});
                        													}
                        													funcTocall();
                        	                                            }
                        											}
                                                                    else{
                                                                        let urlParams = page.local.urlParams.get(item["name"]);
                                                                        let indexFinded = false;
                                                                        let defaultSelected ="";
                                                                        
                                                                        if(urlParams != undefined){
                                                                            for(let child in item["children"]){
                                                                                if(item["children"][child]["value"] == urlParams){
                                                                                    indexFinded = true; 
                                                                                    defaultSelected = item["children"][child].value;
                                                                                    formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": true});
                                                                                }
                                                                                else{
                                                                                    formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": false});
                                                                                }
                                                                            }
                                                                        }
                                                                        if(!indexFinded){
                                                                            for(let child in item["children"]){
                                                                                let selected;
                                                                                try {
                                                                                    selected = respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                                                    if(selected){
                                                                                        defaultSelected = respInit == null ? item["children"][child].value : response[item["name"]]["children"][child]["value"];
                                                                                    }
                                                                                }
                                                                                catch(e){
                                                                                    
                                                                                }
                                                                                
                                                                                formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected});
                                                                            }
                                                                        }
                                                                        formSubmit[item["name"]]["value"] = defaultSelected; 
                                                                    }
                                                                }
                                                                else if(item["type"] == "slider" || item["type"] == "datetime" || item["type"] == "time" || item["type"] == "barcode" || item["type"] == "img" || item["type"] == "file"|| item["type"] == "signature"){
                                                                    let urlParams = page.local.urlParams.get(item["name"]);
                                                                    let value;
                                                                    if(item["type"] == "slider"){
                                                                        let valConvert = (isNaN(+urlParams) == false && urlParams != "") ? +urlParams : null;
                                                                        value = valConvert != null ? valConvert : respInit == null ? "": response[item["name"]]["value"]; 
                                                                    }
                                                                    else{
                                                                        value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                                    }
                                                                    
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["name"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                }
                                                                else if(item["type"] == "radio_group"){
                                                                    
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, children_label:item["children"], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                    for(let line of item.lines){
                                                                        let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                                                        urlParams = item.children.filter(x=> x.value == urlParams).length > 0 ? urlParams : null;
                                                                        let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["children"][line.title]; 
                                                                        formSubmit[item["name"]].children[line.title]= value;
                                                                    }
                                                                }
                                                                else if(item["type"] == "checkbox_group"){
                                                                    formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                    
                                                                    for(let line of item.lines){
                                                                        formSubmit[item["name"]].children[line.title] = [];
                                                                        let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                                                        let array = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                                                                        for(let child in item["children"]){
                                                                           
                                                                            
                                                                            let selected;
                                                                            try {
                                                                                let s = array.indexOf(item["children"][child].value) != -1;
                                                                                selected = s == true ? s : respInit == null ? item["children"][child].selected : response[item["name"]]["children"][line.title][child]["selected"];
                                                                            }
                                                                            catch(e){   
                                                                            }   
                                                                            formSubmit[item["name"]].children[line.title].push({"value": item["children"][child].value, "selected": selected});
                                                                        }
                                                                    }
                                                                }
                                                                
                                                        };
                                                        }
                                                        catch(e){
                                                            console.log("error");
                                                            console.log(e);
                                                        }
                                                        
                                                    }
                                                    
                                                    
                                                    fillFormSubmit(page["formsList"], page["redList"], page["formsSubmit"], respInit); 
                                                    page["checkForAnyCondition"]();
                                                    
                                                    // do stuff to support upload files
                                                    if(page.global["__C8O_TODELETE"] == undefined){
                                                        page.global["__C8O_TODELETE"] = [];
                                                    }
                                                    let nullBefore = false;
                                                    if(page.global[page["idFiles"]].length == 0){
                                                        nullBefore = true
                                                    }
                                                    for(let item of page["formsList"]){
                                                        if( item[''type''] == "file"){
                                                            if(page.global[page["idFiles"]][item["id"]] == null){
                                                                page.global[page["idFiles"]][item["id"]] = [];
                                                            }
                                                        }
                                                        if(item["type"] =="ion-card"){
                                                            for(let child of item["children"]){
                                                                if(child[''type''] == "file"){
                                                                    if(page.global[page["idFiles"]][child["id"]] == null){
                                                                        page.global[page["idFiles"]][child["id"]] = [];
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    
                                                    
                                                    if(respInit == null){
                                                          resolve();        
                                                    }
                                                    else{
                                                        if(page.global["__C8O_TODELETE"] == undefined){
                                                            page.global["__C8O_TODELETE"] = [];
                                                        }
                                                        let nullBefore = false;
                                                        if(page.global[page["idFiles"]].length == 0){
                                                            nullBefore = true
                                                        }
                                                        for(let item of page["formsList"]){
                                                            if( item[''type''] == "file"){
                                                                if(page.global[page["idFiles"]][item["id"]] == null){
                                                                    page.global[page["idFiles"]][item["id"]] = [];
                                                                }
                                                            }
                                                            if(item["type"] =="ion-card"){
                                                                for(let child of item["children"]){
                                                                    if(child[''type''] == "file"){
                                                                        if(page.global[page["idFiles"]][child["id"]] == null){
                                                                            page.global[page["idFiles"]][child["id"]] = [];
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        page.c8o.callJson("fs://c8oforms_response_fs.get", "docid", page.local.edit, "attachments", true)
                                                        .then((res)=>{
                                                            let att = res["_attachments"];
                                                            for(let item in att){
                                                                //first itemid
                                                                let itemid = item.substring(0, item.indexOf(''_C80C80_''));
                                                                //second namefile
                                                                let name = item.substring(item.indexOf(''_C80C80_'')+8,item.lastIndexOf(''_C80C80_''));
                                                                //synthax
                                                                if(page.global[page["idFiles"]][itemid] == null){
                                                                    page.global[page["idFiles"]][itemid] = [];
                                                                }
                                                                if(nullBefore){
                                                                    page.global[page["idFiles"]][itemid].push({name:name,path:item, deleted:false});
                                                                }
                                                            }
                                                            resolve();
                                                            return null;
                                                        })
                                                        .fail((err)=>{
                                                            resolve();
                                                        })
                                                    }
                                                    
                                                }
                                                else{
                                                    reject();
                                                }
                                             }
                                            //document  =  res.transaction.document.couchdb_output.rows[0].value.doc
                                        }
                                        else{
                                            if(res.transaction != undefined && res.transaction.document != undefined && res.transaction.document.error != undefined){
                                                let errorSearch = "Max number of sessions";
                                                if(res.transaction.document.error.substring(errorSearch) != -1){
                                                    this.local.errorViewer = true;
                                                    this.local.errorMsgViewer = page["translate"].instant("Max_number_of_sessions");
                                                }
                                                else{
                                                    this.local.errorViewer = true;
                                                    this.local.errorMsgViewer = page["translate"].instant("error_occured");
                                                }
                                            }
                                            if(!this.global.pwa){
                                                window.location.href = ''./'';
                                                resolve(true);
                                            }
                                            else{
                                                this.local.errorViewer = true;
                                                this.local.errorMsgViewer = page["translate"].instant("error_occured");
                                                resolve(true);
                                            }
                                            return null;
                                        }
                                        return null;
                                      
                                    })
                                    .fail((e)=>{
                                        
                                        console.log(e);
                                        if(!this.global.pwa){
                                            window.location.href = ''./'';
                                            resolve(true);
                                        }
                                        else{
                                            this.local.errorViewer = true;
                                            this.local.errorMsgViewer = page["translate"].instant("error_occured");
                                            resolve(true);
                                        }
                                    })
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                        '
                isEnabled: false
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1593701778492]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.removeSpinner
              ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1610051868051]: 
                beanData: '{"ionBean":"InvokeAction"}'
                stack: C8Oforms.MobileApplication.Application.callViewLiveAndFillFormListViewer
                ↓fs [ngx.components.UIControlVariable-1610051932024]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:false
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1610052928702]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.removeSpinner
              ↓Else_Handler [ngx.components.UIActionElseEvent-1593622954755]: 
                ↓RootPage [ngx.components.UIDynamicAction-1572269500185]: 
                  beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.selectorPage"}'
      ↓CustomAction [ngx.components.UICustomAction-1616685438684]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '		page.global.overlayNoRowsTemplate = ''<div class="justTocheckExistingLoading" style="background-color:#f4f4f450; width:100%; height:100%; display: flex;align-items: center;justify-content: center;"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>''
                		//page.global.overlayNoRowsTemplate2 = ''<div style="width:100%; height:100%; display: flex;align-items: center;justify-content: center;">''+page["translate"].instant("no_result_grid")+''</div>''
                		this.local.agGridLocaleTextFunc =
                		(key, defaultValue) =>{
                			let translation = page["translate"].instant("agGrid."+key)
                			if(translation != "" && translation != "agGrid."+key){
                				return translation;
                			}
                			else{
                				return defaultValue
                			}
                    	};
                				
                				resolve();
                '
    ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1628526953602]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms.MobileApplication.Application.importNg2Tooltips
  ↓RepublicatePushResponse [ngx.components.UICustomAsyncAction-1697468485651]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		try {
            			page.replicatePushResponse();
            		} catch (e) {
            		
            		}
            
    isEnabled: false
↓Header [ngx.components.UIDynamicElement-1571856354963]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓ToolBar [ngx.components.UIDynamicElement-1648202209920]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓ButtonSetLeft [ngx.components.UIDynamicElement-1648202217139]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:start"}'
      tagName: ion-buttons
      ↓MenuButton [ngx.components.UIDynamicElement-1648202217142]: 
        beanData: '{"ionBean":"MenuButton","ButtonFormType":"plain"}'
        tagName: ion-menu-button
        ↓Attr4 [ngx.components.UIAttribute-1661941231024]: 
          attrName: '[attr.aria-label]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.translate.instant('Menu')
        ↓Attr [ngx.components.UIAttribute-1664294028561]: 
          attrName: '[ngStyle]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: 'script:this.local.published == true || this.local.anonymous == true ? {''--color'' : this.local.policyColor}: {}'
        ↓Attr1 [ngx.components.UIAttribute-1666258359292]: 
          attrName: id
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:menubuttonviewer
        ↓Style [ngx.components.UIStyle-1666274826597]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the menu button
                  //--background-focused	//Background of the menu button when focused with the tab key
                  //--background-focused-opacity	//Opacity of the menu button background when focused with the tab key
                  //--background-hover	//Background of the menu button on hover
                  //--background-hover-opacity	//Opacity of the background on hover
                  //--border-radius	//Border radius of the menu button
                  //--color	//Color of the menu button
                  //--color-focused	//Color of the menu button when focused with the tab key
                  //--color-hover	//Color of the menu button on hover
                  //--padding-bottom	//Bottom padding of the button
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                  //--padding-top	//Top padding of the button
                  
                  	&:focus {
                  	  	outline:solid;
                  	}
                  '
      ↓Attr4 [ngx.components.UIAttribute-1661953519713]: 
        attrName: '[attr.aria-label]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.translate.instant('Menu')
    ↓BarTitle [ngx.components.UIDynamicElement-1648202209944]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓Directive1 [ngx.components.UIControlDirective-1648202607593]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.local.published == true || this.local.anonymous == true else ElseBlock_1648202607596
        ↓H1 [ngx.components.UIDynamicElement-1666258927264]: 
          beanData: '{"ionBean":"Heading1"}'
          tagName: h1
          ↓Text1 [ngx.components.UIText-1648202251310]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.form?.name != undefined ? this.form.name : '''''
      ↓Tag1 [ngx.components.UIElement-1648202607596]: 
        identifier: ElseBlock_1648202607596
        tagName: ng-template
        ↓ImageConvertigo2 [ngx.components.UIDynamicElement-1658938329323]: 
          beanData: |
            '{
             "ionBean": "Image",
             "url": "script:''assets\/images\/svg\/logo\/logo_no_code_studio.svg''",
             "alt": "plain:Convertigo No Code Studio"
            }'
          selfClose: true
          tagName: img
          ↓Style [ngx.components.UIStyle-1658938329326]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    	/*margin-left:0.5em;
                    	margin-right:0.5em;*/
                    
      ↓Style1 [ngx.components.UIStyle-1648217534731]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/*margin-top:0.75rem;
                margin-bottom:0.8rem;*/
                h1{
                	font-size: 14px;
                  font-weight: 600;
                  font-style: normal;
                  font-stretch: normal;
                  white-space: nowrap;
                  overflow: hidden;
                  text-overflow: ellipsis;
                  margin:auto;
                }
                
                	
                '
      ↓Attr [ngx.components.UIAttribute-1648202943659]: 
        attrName: '[ngStyle]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: 'script:this.local.published == true || this.local.anonymous == true ? {''--color'' : this.local.policyColor}: {}'
    ↓ButtonSetRight [ngx.components.UIDynamicElement-1648203361592]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
      tagName: ion-buttons
      ↓Directive2 [ngx.components.UIControlDirective-1648203516346]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:window.navigator.onLine == false
        ↓Button [ngx.components.UIDynamicElement-1648203516349]: 
          beanData: |
            '{
             "ionBean": "Button",
             "ButtonFormType": "plain",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Style [ngx.components.UIStyle-1648203516352]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	float: right;
                    	background-color: transparent;
                    '
          ↓Icon [ngx.components.UIDynamicElement-1648203516355]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IconName": "plain",
               "IconSource": "plain:assets\/images\/svg\/component\/icn_no-wifi.svg"
              }'
            tagName: ion-icon
          ↓Attr [ngx.components.UIAttribute-1648203516358]: 
            attrName: '[matTooltip]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('no_internet')
          ↓Attr1 [ngx.components.UIAttribute-1648203516361]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:arrow
          ↓Attr2 [ngx.components.UIAttribute-1648203516364]: 
            attrName: positionV
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:top
          ↓Attr3 [ngx.components.UIAttribute-1648203516367]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:no-lines
          ↓StyleSize [ngx.components.UIStyle-1648203516370]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    	ion-icon{
                    		width:20px !important;
                    		height:20px !important;
                    	}
                    	
                    
          ↓Span [ngx.components.UIDynamicElement-1666259464414]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1666259464417]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:sr-only
            ↓Text [ngx.components.UIText-1666259464420]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'no_internet' | translate
        ↓Directive1 [ngx.components.UIControlDirective-1648203516373]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.isOfflinesource
          ↓Button [ngx.components.UIDynamicElement-1648203516400]: 
            beanData: |
              '{
               "ionBean": "Button",
               "ButtonFormType": "plain",
               "IonFill": "plain:clear"
              }'
            tagName: ion-button
            ↓Style [ngx.components.UIStyle-1648203516403]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	float: right;
                      	background-color: transparent;
                      '
            ↓Icon [ngx.components.UIDynamicElement-1648203516406]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:cloud-outline"}'
              tagName: ion-icon
            ↓Attr [ngx.components.UIAttribute-1648203516409]: 
              attrName: '[matTooltip]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatus() == ''green'' ? this.translate.instant(''offline_ok'') + '' ''+ this.translate.instant(''last_update'')+'' ''+ this.getSourcesFullsyncReplicationStatusDetail().db.dateFormatedLastUpdate : this.getSourcesFullsyncReplicationStatus() == ''btLight'' ? this.getSourcesFullsyncReplicationStatusDetail().indexing.status: this.translate.instant(''offline_notok'')'
            ↓Attr1 [ngx.components.UIAttribute-1648203516412]: 
              attrName: 
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:arrow
            ↓Attr2 [ngx.components.UIAttribute-1648203516415]: 
              attrName: positionV
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:top
            ↓Attr3 [ngx.components.UIAttribute-1648203516418]: 
              attrName: 
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:no-lines
            ↓StyleSize [ngx.components.UIStyle-1648203516421]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      	ion-icon{
                      		width:20px !important;
                      		height:20px !important;
                      	}
                      	
                      
            ↓Span [ngx.components.UIDynamicElement-1666259487544]: 
              beanData: '{"ionBean":"SpanTag"}'
              tagName: span
              ↓Attr [ngx.components.UIAttribute-1666259487547]: 
                attrName: class
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:sr-only
              ↓Text [ngx.components.UIText-1666259487550]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatus() == ''green'' ? this.translate.instant(''offline_ok'') + '' ''+ this.translate.instant(''last_update'')+'' ''+ this.getSourcesFullsyncReplicationStatusDetail().db.dateFormatedLastUpdate : this.getSourcesFullsyncReplicationStatus() == ''btLight'' ? this.getSourcesFullsyncReplicationStatusDetail().indexing.status: this.translate.instant(''offline_notok'')'
      ↓Directive1 [ngx.components.UIControlDirective-1648203516424]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.local.isOfflinesource && window.navigator.onLine
        ↓Button [ngx.components.UIDynamicElement-1648203516427]: 
          beanData: |
            '{
             "ionBean": "Button",
             "ButtonFormType": "plain",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Style [ngx.components.UIStyle-1648203516430]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	float: right;
                    	background-color: transparent;
                    '
          ↓Icon [ngx.components.UIDynamicElement-1648203516433]: 
            beanData: '{"ionBean":"Icon","IconName":"script:this.getSourcesFullsyncReplicationStatusDetail().db.finished && this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed && this.getSourcesFullsyncReplicationStatusDetail().indexing.finished ? ''cloud-done-outline'' : ''cloud-download-outline''"}'
            identifier: btStatus
            tagName: ion-icon
            ↓Attr4 [ngx.components.UIAttribute-1661951636175]: 
              attrName: '[attr.aria-label]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatusDetail().db.finished == false || this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed == false ? this.getSourcesFullsyncReplicationStatusDetail().db.status : this.getSourcesFullsyncReplicationStatusDetail().indexing.status'
          ↓Attr [ngx.components.UIAttribute-1648203516436]: 
            attrName: '[matTooltip]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatusDetail().db.finished == false || this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed == false ? this.getSourcesFullsyncReplicationStatusDetail().db.status : this.getSourcesFullsyncReplicationStatusDetail().indexing.status'
          ↓Attr1 [ngx.components.UIAttribute-1648203516439]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:arrow
          ↓Attr2 [ngx.components.UIAttribute-1648203516442]: 
            attrName: positionV
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:top
          ↓Attr3 [ngx.components.UIAttribute-1648203516445]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:no-lines
          ↓StyleSize [ngx.components.UIStyle-1648203516448]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    	ion-icon{
                    		width:20px !important;
                    		height:20px !important;
                    	}
                    	
                    
          ↓Attr5 [ngx.components.UIAttribute-1663767770436]: 
            attrName: '[ngStyle]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatusDetail().db.finished && this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed && this.getSourcesFullsyncReplicationStatusDetail().indexing.finished ? {''--color'': ''var(--ion-color-''+this.local.policySecondaryColor}: {''--color'': ''var(--ion-color-''+this.local.policyBtLightColor}'
          ↓Span [ngx.components.UIDynamicElement-1666259508657]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1666259508660]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:sr-only
            ↓Text [ngx.components.UIText-1666259508663]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatusDetail().db.finished == false || this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed == false ? this.getSourcesFullsyncReplicationStatusDetail().db.status : this.getSourcesFullsyncReplicationStatusDetail().indexing.status'
      ↓Directive3 [ngx.components.UIControlDirective-1697470780852]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.local.response_sub && window.navigator.onLine
        ↓Button [ngx.components.UIDynamicElement-1697470780855]: 
          beanData: |
            '{
             "ionBean": "Button",
             "ButtonFormType": "plain",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Style [ngx.components.UIStyle-1697470780858]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	float: right;
                    	background-color: transparent;
                    '
          ↓Icon [ngx.components.UIDynamicElement-1697470780861]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IonColor": "script:this.local.response_sub?.complete ? ''secondary'' : ''danger''",
               "IconName": "plain:sync-outline"
              }'
            tagName: ion-icon
            ↓Attr4 [ngx.components.UIAttribute-1697470780864]: 
              attrName: '[attr.aria-label]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatusDetail().db.finished == false || this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed == false ? this.getSourcesFullsyncReplicationStatusDetail().db.status : this.getSourcesFullsyncReplicationStatusDetail().indexing.status'
          ↓Attr [ngx.components.UIAttribute-1697470780867]: 
            attrName: '[matTooltip]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatusDetail().db.finished == false || this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed == false ? this.getSourcesFullsyncReplicationStatusDetail().db.status : this.getSourcesFullsyncReplicationStatusDetail().indexing.status'
            isEnabled: false
          ↓Attr1 [ngx.components.UIAttribute-1697470780870]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:arrow
            isEnabled: false
          ↓Attr2 [ngx.components.UIAttribute-1697470780873]: 
            attrName: positionV
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:top
            isEnabled: false
          ↓Attr3 [ngx.components.UIAttribute-1697470780876]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:no-lines
            isEnabled: false
          ↓StyleSize [ngx.components.UIStyle-1697470780879]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    	ion-icon{
                    		width:20px !important;
                    		height:20px !important;
                    	}
                    	
                    
          ↓Attr5 [ngx.components.UIAttribute-1697470780882]: 
            attrName: '[ngStyle]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.getSourcesFullsyncReplicationStatusDetail().db.finished && this.getSourcesFullsyncReplicationStatusDetail().db.statusComputed && this.getSourcesFullsyncReplicationStatusDetail().indexing.finished ? {''--color'': ''var(--ion-color-''+this.local.policySecondaryColor}: {''--color'': ''var(--ion-color-''+this.local.policyBtLightColor}'
            isEnabled: false
          ↓Span [ngx.components.UIDynamicElement-1697470780885]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1697470780888]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:sr-only
            ↓Text [ngx.components.UIText-1697470780891]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.response_sub.total +'/'+this.local.response_sub.total
          ↓attr [ngx.components.UIControlEvent-1697471121526]: 
            ↓cancelViewLive [ngx.components.UICustomAction-1697471132501]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		page.cancelReplicatePushResponse().then((r)=>{
                      			resolve();
                      		})
                      		.catch((e)=>{
                      			resolve();
                      		})
                      		
                      
              ↓RepublicatePushResponse [ngx.components.UICustomAsyncAction-1697471139234]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		try {
                        			page.replicatePushResponse();
                        		} catch (e) {
                        		
                        		}
                        
      ↓Directive [ngx.components.UIControlDirective-1648203516451]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:!this.global.pwa
        ↓ButtonHome [ngx.components.UIDynamicElement-1648203516454]: 
          beanData: |
            '{
             "ionBean": "Button",
             "ButtonFormType": "plain",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Event [ngx.components.UIControlEvent-1648203516460]: 
            ↓RootPage [ngx.components.UIDynamicAction-1648203516463]: 
              beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.selectorPage"}'
          ↓Icon [ngx.components.UIDynamicElement-1648203516466]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:home-outline"}'
            tagName: ion-icon
            ↓Attr [ngx.components.UIAttribute-1648212932475]: 
              attrName: '[color]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.global.pwa ? this.local.policyColor : ''primary'''
            ↓Attr4 [ngx.components.UIAttribute-1661951645980]: 
              attrName: '[attr.aria-label]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.translate.instant('homePage')
          ↓Attr [ngx.components.UIAttribute-1648214125030]: 
            attrName: '[matTooltip]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('homePage')
          ↓Attr1 [ngx.components.UIAttribute-1648214125033]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:arrow
          ↓Attr2 [ngx.components.UIAttribute-1648214125036]: 
            attrName: placement
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:bottom
          ↓Attr4 [ngx.components.UIAttribute-1661863199989]: 
            attrName: '[attr.aria-label]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('homePage')
            isEnabled: false
          ↓Span [ngx.components.UIDynamicElement-1666259529867]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1666259529870]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:sr-only
            ↓Text [ngx.components.UIText-1666259529873]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:homePage
      ↓ButtonRefresh [ngx.components.UIDynamicElement-1648203516472]: 
        beanData: |
          '{
           "ionBean": "Button",
           "ButtonFormType": "plain",
           "IonFill": "plain:clear"
          }'
        tagName: ion-button
        ↓Event [ngx.components.UIControlEvent-1648203516478]: 
          ↓RootPage [ngx.components.UIDynamicAction-1648203516481]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
               "data": "script:{formId: this.navParams.get(''formId''), i: this.navParams.get(''i'')}"
              }'
            isEnabled: false
          ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1648215107010]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		try {
                    			window.location.reload();
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    
        ↓Icon [ngx.components.UIDynamicElement-1648203516484]: 
          beanData: '{"ionBean":"Icon","IconName":"plain:refresh-outline"}'
          tagName: ion-icon
          ↓Attr [ngx.components.UIAttribute-1648213751222]: 
            attrName: '[color]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.global.pwa ? this.local.policyColor : ''primary'''
          ↓Attr4 [ngx.components.UIAttribute-1661940680724]: 
            attrName: '[attr.aria-label]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('reload_the_form')
        ↓Attr [ngx.components.UIAttribute-1648214021556]: 
          attrName: '[matTooltip]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.translate.instant('reload_the_form')
        ↓Attr1 [ngx.components.UIAttribute-1648214021559]: 
          attrName: 
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:arrow
        ↓Attr2 [ngx.components.UIAttribute-1648214021562]: 
          attrName: placement
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:bottom
        ↓Attr4 [ngx.components.UIAttribute-1661863211748]: 
          attrName: '[attr.aria-label]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.translate.instant('reload_the_form')
          isEnabled: false
        ↓Span [ngx.components.UIDynamicElement-1666259329090]: 
          beanData: '{"ionBean":"SpanTag"}'
          tagName: span
          ↓Attr [ngx.components.UIAttribute-1666259346201]: 
            attrName: class
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:sr-only
          ↓Text [ngx.components.UIText-1666259364902]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'reload_the_form' | translate
        ↓Style [ngx.components.UIStyle-1666275495652]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the button
                  //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the button when pressed
                  //--background-focused	//Background of the button when focused with the tab key
                  //--background-focused-opacity	//Opacity of the button when focused with the tab key
                  //--background-hover	//Background of the button on hover
                  //--background-hover-opacity	//Opacity of the background on hover
                  //--border-color	//Border color of the button
                  //--border-radius	//Border radius of the button
                  //--border-style	//Border style of the button
                  //--border-width	//Border width of the button
                  //--box-shadow	//Box shadow of the button
                  //--color	//Text color of the button
                  //--color-activated	//Text color of the button when pressed
                  //--color-focused	//Text color of the button when focused with the tab key
                  //--color-hover	//Text color of the button when hover
                  //--opacity	//Opacity of the button
                  //--padding-bottom	//Bottom padding of the button
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                  //--padding-top	//Top padding of the button
                  //--ripple-color	//Color of the button ripple effect
                  //--transition	//Transition of the button
                  
                  &:focus {
                  	--border-style: solid;
                  	--border-width: 3px;
                  	--border-color: #000;
                  }
                  
                  '
      ↓Directive11 [ngx.components.UIControlDirective-1648203516487]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:!(this.local.published == true || this.local.anonymous)
        ↓ButtonEdit [ngx.components.UIDynamicElement-1648203516493]: 
          beanData: |
            '{
             "ionBean": "Button",
             "ButtonFormType": "plain",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Event [ngx.components.UIControlEvent-1648203516574]: 
            ↓RootPage [ngx.components.UIDynamicAction-1648203516580]: 
              beanData: |
                '{
                 "ionBean": "RootPageAction",
                 "page": "plain:C8Oforms.MobileApplication.Application.editorPage",
                 "data": "script:{formId :c8oPage.local.formId}"
                }'
          ↓Icon [ngx.components.UIDynamicElement-1648204468244]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:brush-outline"}'
            tagName: ion-icon
            ↓Attr4 [ngx.components.UIAttribute-1661951659008]: 
              attrName: '[attr.aria-label]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.translate.instant('editView2')
          ↓Style [ngx.components.UIStyle-1648205527375]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the button
                    //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the button when pressed
                    //--background-focused	//Background of the button when focused with the tab key
                    //--background-focused-opacity	//Opacity of the button when focused with the tab key
                    //--background-hover	//Background of the button on hover
                    //--background-hover-opacity	//Opacity of the background on hover
                    //--border-color	//Border color of the button
                    //--border-radius	//Border radius of the button
                    //--border-style	//Border style of the button
                    //--border-width	//Border width of the button
                    //--box-shadow	//Box shadow of the button
                    //--color	//Text color of the button
                    //--color-activated	//Text color of the button when pressed
                    //--color-focused	//Text color of the button when focused with the tab key
                    //--color-hover	//Text color of the button when hover
                    //--opacity	//Opacity of the button
                    //--padding-bottom	//Bottom padding of the button
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                    //--padding-top	//Top padding of the button
                    //--ripple-color	//Color of the button ripple effect
                    //--transition	//Transition of the button
                    	ion-icon{
                    		color: var(--ion-color-primary);
                    	}
                    '
          ↓Attr [ngx.components.UIAttribute-1648205608701]: 
            attrName: '[matTooltip]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('editView2')
          ↓Attr1 [ngx.components.UIAttribute-1648205608704]: 
            attrName: 
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:arrow
          ↓Attr2 [ngx.components.UIAttribute-1648205608707]: 
            attrName: placement
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:bottom
          ↓Attr4 [ngx.components.UIAttribute-1661863225460]: 
            attrName: '[attr.aria-label]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.translate.instant('editView2')
            isEnabled: false
          ↓Span [ngx.components.UIDynamicElement-1666259566111]: 
            beanData: '{"ionBean":"SpanTag"}'
            tagName: span
            ↓Attr [ngx.components.UIAttribute-1666259566114]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:sr-only
            ↓Text [ngx.components.UIText-1666259566117]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:editView2
    ↓Attr1 [ngx.components.UIAttribute-1648219644079]: 
      attrName: '[style.--background]'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.local.headerColor
  ↓ToolBar2 [ngx.components.UIDynamicElement-1664292410958]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓Attr [ngx.components.UIAttribute-1664292411129]: 
      attrName: '*ngIf'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:this.local.pages != undefined && this.local.currentIndex != undefined && this.local.pages[this.local.currentIndex].positionTab != undefined && this.local.pages[this.local.currentIndex].positionTab == 'top'
    ↓UseSharedComponent [ngx.components.UIUseShared-1664293057266]: 
      sharedcomponent: C8Oforms.MobileApplication.Application.SharedTabs
↓Content [ngx.components.UIDynamicElement-1537435548501]: 
  beanData: '{"ionBean":"Content"}'
  comment: Page content
  identifier: myContent1
  tagName: ion-content
  ↓Attr [ngx.components.UIAttribute-1543509288894]: 
    attrName: '[style.background-repeat]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:no-repeat
  ↓Attr1 [ngx.components.UIAttribute-1543509369804]: 
    attrName: '[style.background-size]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:cover
  ↓Attr21 [ngx.components.UIAttribute-1545226048588]: 
    attrName: '[ngStyle]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: 'script:{''background-color'': this.enabled == true ? (this.form.wallpaper[''type''] == ''color'' ? this.form.wallpaper[''color''] : ''#fff'') : ''#fff'' ,''background-image'': this.enabled == true ? (this.form.wallpaper[''type''] != undefined ? (this.form.wallpaper[''type''] != ''color'' ? ''url(''+this.local.url+'')'' : ''none'') : ''url('' + this.link+ '')'') : ''none''}'
  ↓Attr11 [ngx.components.UIAttribute-1571141618057]: 
    attrName: '[ngClass]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:'themeVizu'
  ↓Style [ngx.components.UIStyle-1571143195258]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '/* $text-input-highlight-color-valid: #ffffff !global; */
            position:relative;
            '
  ↓Directive [ngx.components.UIControlDirective-1576510500502]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.local.finished
    ↓Grid [ngx.components.UIDynamicElement-1543345620685]: 
      beanData: '{"ionBean":"Grid","Height":"plain:100%"}'
      tagName: ion-grid
      ↓GridRow [ngx.components.UIDynamicElement-1543345633316]: 
        beanData: '{"ionBean":"GridRow"}'
        tagName: ion-row
        ↓GridCol [ngx.components.UIDynamicElement-1543345636494]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
        ↓GridCol1 [ngx.components.UIDynamicElement-1543345638252]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "SizeLg": "plain:8",
             "SizeMd": "plain:10",
             "SizeSm": "plain:12",
             "SizeXl": "plain:6",
             "SizeXs": "plain:12"
            }'
          tagName: ion-col
          ↓Div [ngx.components.UIDynamicElement-1584610356623]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Style [ngx.components.UIStyle-1584610376264]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'background-color: rgba(255,255,255,0.95) !important;
                      border-radius: 8px;
                      border: solid 1px #f6f6f6;
                      box-shadow: 0 2px 2px 0 rgb(0 0 0 / 14%), 0 3px 1px -2px rgb(0 0 0 / 20%), 0 1px 5px 0 rgb(0 0 0 / 12%);
                      
                      margin-bottom: 10px;
                      
                      '
            ↓Directive [ngx.components.UIControlDirective-1600247779964]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:!(this.local.pages != undefined && this.form.pages[this['local']['currentIndex']] != undefined && this.form.pages[this['local']['currentIndex']].desc != undefined && this.form.pages[this['local']['currentIndex']].desc != '')
              ↓Div [ngx.components.UIDynamicElement-1584610404188]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139622]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-wrap"}'
                  comment: FormatLayout
                  tagName: div
                ↓Text [ngx.components.UIText-1584610404197]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.form.name
                ↓Style [ngx.components.UIStyle-1584610404200]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'font-size: 34px;
                          text-align: center;
                          '
                ↓Attr [ngx.components.UIAttribute-1663762501350]: 
                  attrName: role
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:heading
                ↓Attr1 [ngx.components.UIAttribute-1663762528929]: 
                  attrName: aria-level
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:1
            ↓Directive1 [ngx.components.UIControlDirective-1584610404239]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.pages == undefined && this.form.descform != ''
              ↓Div [ngx.components.UIDynamicElement-1584610404353]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr1 [ngx.components.UIAttribute-1584610404356]: 
                  attrName: '[innerHTML]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.router.sanitizer.bypassSecurityTrustHtml(this.form.descform)
                ↓Attr2 [ngx.components.UIAttribute-1584626454040]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:['styledivnormal']
                ↓Style [ngx.components.UIStyle-1584627079486]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	padding-bottom:13px !important;	
                          
            ↓Attr2 [ngx.components.UIAttribute-1584610445587]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:['card', 'card-md']
            ↓Directive12 [ngx.components.UIControlDirective-1592563520001]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.pages != undefined && this.form.pages[this['local']['currentIndex']] != undefined && this.form.pages[this['local']['currentIndex']].desc  != undefined &&this.form.pages[this['local']['currentIndex']].desc != ''
              ↓Div [ngx.components.UIDynamicElement-1592563520004]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr1 [ngx.components.UIAttribute-1592563520007]: 
                  attrName: '[innerHTML]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.router.sanitizer.bypassSecurityTrustHtml(this.computeHtml$(this.form.pages[this['local']['currentIndex']].desc))
                  comment: |
                    'this.router.sanitizer.bypassSecurityTrustHtml((this.computeHtml$(this.form.pages[this[''local''][''currentIndex'']].desc)))
                    
                    //this.computeHtml$(this.form.pages[this[''local''][''currentIndex'']].desc) | async
                    
                    //this.local.cacheComputeHtml$[this.form.pages[this[''local''][''currentIndex'']].desc] == undefined ?  (this.computeHtml$(this.form.pages[this[''local''][''currentIndex'']].desc) | async ) : this.local.cacheComputeHtml$[this.form.pages[this[''local''][''currentIndex'']].desc] | async'
                ↓Attr2 [ngx.components.UIAttribute-1592563520010]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:['styledivnormal']
                ↓Style [ngx.components.UIStyle-1592563520013]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	padding-bottom:13px !important;	
                          
                ↓Attr3 [ngx.components.UIAttribute-1661951360747]: 
                  attrName: '[attr.aria-label]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.removeHTML(this.form.pages[this['local']['currentIndex']].desc)
          ↓Tag [ngx.components.UIElement-1666277954861]: 
            tagName: form
            ↓Tag1 [ngx.components.UIElement-1663762912727]: 
              tagName: main
              ↓Directive [ngx.components.UIControlDirective-1543865083865]: 
                directiveExpression: 'trackBy: trackById'
                directiveIndexName: index
                directiveItemName: item
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.formsList
                ↓Directive [ngx.components.UIControlDirective-1586530752522]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:item.cat == undefined && this.local.hideme == undefined
                  ↓Directive1 [ngx.components.UIControlDirective-1592514000964]: 
                    directiveName: If
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.local.pages == undefined  || (this.local.pages[this.local.currentIndex]['pageTechName'] == item.config.page)
                    ↓Directive [ngx.components.UIControlDirective-1588846603623]: 
                      directiveName: Switch
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:item.type
                      ↓DivCard [ngx.components.UIDynamicElement-1586265611980]: 
                        beanData: '{"ionBean":"DivTag"}'
                        tagName: div
                        ↓Attr2 [ngx.components.UIAttribute-1586265635235]: 
                          attrName: '[ngClass]'
                          attrValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:['card', 'card-md']
                        ↓Style [ngx.components.UIStyle-1586265647519]: 
                          styleContent: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                →: |
                                  'background-color: rgba(255,255,255,0.95);
                                  border-radius: 8px;
                                  border: solid 1px #f6f6f6;
                                  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);
                                  box-shadow: 0 2px 2px 0 rgb(0 0 0 / 14%), 0 3px 1px -2px rgb(0 0 0 / 20%), 0 1px 5px 0 rgb(0 0 0 / 12%);
                                  
                                  margin-bottom: 10px;
                                  '
                        ↓Attr [ngx.components.UIAttribute-1586265658284]: 
                          attrName: '*ngIf'
                          attrValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: 'plain:(item.type == ''ion-card'' || item.type == ''videoCall'') ? false : true;'
                        ↓DivContentInnerHTML [ngx.components.UIDynamicElement-1586265727271]: 
                          beanData: '{"ionBean":"DivTag"}'
                          tagName: div
                          ↓Attr2 [ngx.components.UIAttribute-1586265841305]: 
                            attrName: '[ngClass]'
                            attrValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: 'script:item.type != ''grid'' ? [''styledivnormal''] : []'
                          ↓Style [ngx.components.UIStyle-1586265928118]: 
                            styleContent: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                  →: |
                                    padding-bottom:10px;
                                    padding-top:10px;
                                    
                          ↓Directive1 [ngx.components.UIControlDirective-1588846642198]: 
                            directiveExpression: '''text'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent [ngx.components.UIUseShared-1588846642201]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemTextViewer
                              ↓item [ngx.components.UIUseVariable-1588846642204]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642210]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642213]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848143909]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive3 [ngx.components.UIControlDirective-1588846642240]: 
                            directiveExpression: '''checkbox'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent2 [ngx.components.UIUseShared-1588846642243]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemCheckboxViewer
                              ↓item [ngx.components.UIUseVariable-1588846642246]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642249]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642252]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848197548]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive4 [ngx.components.UIControlDirective-1588846642255]: 
                            directiveExpression: '''radio'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent811 [ngx.components.UIUseShared-1588846642258]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemRadioViewver
                              ↓item [ngx.components.UIUseVariable-1588846642261]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642264]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642267]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848193539]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive5 [ngx.components.UIControlDirective-1588846642270]: 
                            directiveExpression: '''slider'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent8 [ngx.components.UIUseShared-1588846642273]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemSliderViewver
                              ↓item [ngx.components.UIUseVariable-1588846642276]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642279]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642282]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848188826]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive51 [ngx.components.UIControlDirective-1588846642285]: 
                            directiveExpression: '''select'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent81 [ngx.components.UIUseShared-1588846642288]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemSelectViewver
                              ↓item [ngx.components.UIUseVariable-1588846642291]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642294]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642297]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848209300]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive52 [ngx.components.UIControlDirective-1588846642300]: 
                            directiveExpression: '''datetime'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent5 [ngx.components.UIUseShared-1588846642303]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemDateTimeViewver
                              ↓item [ngx.components.UIUseVariable-1588846642306]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642309]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642312]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848219295]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive53 [ngx.components.UIControlDirective-1588846642315]: 
                            directiveExpression: '''time'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent51 [ngx.components.UIUseShared-1588846642318]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemTimeViewver
                              ↓item [ngx.components.UIUseVariable-1588846642321]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642324]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642327]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848229190]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive54 [ngx.components.UIControlDirective-1588846642330]: 
                            directiveExpression: '''img'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent1 [ngx.components.UIUseShared-1588846642333]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemImgViewer
                              ↓item [ngx.components.UIUseVariable-1588846642336]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642339]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642342]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848239352]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive55 [ngx.components.UIControlDirective-1588846642345]: 
                            directiveExpression: '''barcode'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent7 [ngx.components.UIUseShared-1588846642348]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemBarcodeViewver
                              ↓item [ngx.components.UIUseVariable-1588846642351]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642354]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642357]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848253050]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive56 [ngx.components.UIControlDirective-1588846642360]: 
                            directiveExpression: '''file'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent8111 [ngx.components.UIUseShared-1588846642363]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemFileViewver
                              ↓item [ngx.components.UIUseVariable-1588846642366]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642369]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642372]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓idFiles [ngx.components.UIUseVariable-1588846642375]: 
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.idFiles
                              ↓disabled [ngx.components.UIUseVariable-1658847642391]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive561 [ngx.components.UIControlDirective-1588846642378]: 
                            directiveExpression: '''signature'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent6 [ngx.components.UIUseShared-1588846642381]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemSignatureViewver
                              ↓item [ngx.components.UIUseVariable-1588846642384]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642387]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642390]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848276292]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                              ↓parentname [ngx.components.UIUseVariable-1658848276294]: 
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:null
                              ↓color [ngx.components.UIUseVariable-1658848276296]: 
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:'black'
                          ↓Directive562 [ngx.components.UIControlDirective-1588846642393]: 
                            directiveExpression: '''radio_group'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent8112 [ngx.components.UIUseShared-1588846642396]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemRadioGroupViewver
                              ↓item [ngx.components.UIUseVariable-1588846642399]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642402]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642405]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList[item['name']]
                              ↓disabled [ngx.components.UIUseVariable-1658848300423]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive563 [ngx.components.UIControlDirective-1588846642411]: 
                            directiveExpression: '''checkbox_group'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent21 [ngx.components.UIUseShared-1588846642414]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemCheckboxGroupViewer
                              ↓item [ngx.components.UIUseVariable-1588846642417]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1588846642420]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1588846642423]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1588846642426]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive21 [ngx.components.UIControlDirective-1604675615710]: 
                            directiveExpression: '''description'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent4 [ngx.components.UIUseShared-1604675615713]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemDescriptionViewer
                              ↓item [ngx.components.UIUseVariable-1604675615716]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                          ↓Directive12 [ngx.components.UIControlDirective-1608817811015]: 
                            directiveExpression: '''grid'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent [ngx.components.UIUseShared-1608817811018]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemGridViewer
                              ↓item [ngx.components.UIUseVariable-1608817811021]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1608817811027]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.local.sourceValue[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1608817811030]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1610117592319]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                              ↓outModel [ngx.components.UIUseVariable-1649340140892]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓Directive121 [ngx.components.UIControlDirective-1609947134377]: 
                            directiveExpression: '''location'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent [ngx.components.UIUseShared-1609947134380]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemLocationViewer
                              ↓item [ngx.components.UIUseVariable-1609947134383]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1609947134389]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1609947134392]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                              ↓disabled [ngx.components.UIUseVariable-1658848356188]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                          ↓Directive13 [ngx.components.UIControlDirective-1728975248251]: 
                            directiveExpression: '''chart'''
                            directiveName: SwitchCase
                            ↓UseSharedComponent [ngx.components.UIUseShared-1728975248254]: 
                              sharedcomponent: C8Oforms.MobileApplication.Application.itemChartViewer
                              ↓item [ngx.components.UIUseVariable-1728975248257]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsList[index]
                              ↓model [ngx.components.UIUseVariable-1728975248260]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.local.sourceValue[item['name']]
                              ↓disabled [ngx.components.UIUseVariable-1728975248266]: 
                                comment: this.formsSubmit[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:false
                              ↓outModel [ngx.components.UIUseVariable-1728975248269]: 
                                binding: twoWayBinding
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                              ↓redList [ngx.components.UIUseVariable-1729187011518]: 
                                comment: this.redList[item['name']]
                                varValue: 
                                  - xmlizable: 
                                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                    - MobileSmartSourceType: script:this.redList
                        ↓Attr1 [ngx.components.UIAttribute-1670941207193]: 
                          attrName: '[ngStyle]'
                          attrValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:(item.conditions != undefined && (this.eval(this.evaluateConditions(item.conditions)) != true)) ? {'display':'none'}:{}
                      ↓Directive [ngx.components.UIControlDirective-1588846710912]: 
                        directiveExpression: '''ion-card'''
                        directiveName: SwitchCase
                        ↓Div [ngx.components.UIDynamicElement-1580402859499]: 
                          beanData: '{"ionBean":"DivTag"}'
                          tagName: div
                          ↓UseSharedComponent81111 [ngx.components.UIUseShared-1580402859676]: 
                            sharedcomponent: C8Oforms.MobileApplication.Application.itemCardViewer
                            ↓item [ngx.components.UIUseVariable-1580402859679]: 
                              binding: twoWayBinding
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:this.formsList[index]
                            ↓model [ngx.components.UIUseVariable-1580402859682]: 
                              binding: twoWayBinding
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                            ↓redList [ngx.components.UIUseVariable-1580402859685]: 
                              binding: twoWayBinding
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:this.redList
                          ↓Attr [ngx.components.UIAttribute-1611161117023]: 
                            attrName: '*ngIf'
                            attrValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: 'plain:item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                            isEnabled: false
                          ↓Attr1 [ngx.components.UIAttribute-1670941607108]: 
                            attrName: '[ngStyle]'
                            attrValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:(item.conditions != undefined && (this.eval(this.evaluateConditions(item.conditions)) != true)) ? {'display':'none'}:{}
              ↓Attr [ngx.components.UIAttribute-1666285549834]: 
                attrName: role
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:main
            ↓Directive [ngx.components.UIControlDirective-1664274048593]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.pages != undefined && (this.local.pages[this.local.currentIndex] != undefined && this.local.pages[this.local.currentIndex].enabledButtons == undefined) || (this.local.pages[this.local.currentIndex].enabledButtons == true && this.local.pages[this.local.currentIndex].positionButtons == 'standard')
              ↓Directive1 [ngx.components.UIControlDirective-1592514107460]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.isThereANextPage() else ElseBlock_1592514238339
                ↓GenericItemButtonSubmit [ngx.components.UIDynamicElement-1592514301607]: 
                  beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
                  tagName: ion-item
                  ↓Style [ngx.components.UIStyle-1592514301610]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '	--background: transparent !important;
                            background-color: transparent;
                            z-index: 0;
                            .item-inner{
                            	border: 0px !important;
                            }
                            
                            
                            '
                  ↓Submit [ngx.components.UIDynamicElement-1592514301613]: 
                    beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
                    tagName: ion-buttons
                    ↓Directive [ngx.components.UIControlDirective-1592514910340]: 
                      directiveName: If
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.currentIndex > 0
                      ↓Button1 [ngx.components.UIDynamicElement-1592514849445]: 
                        beanData: '{"ionBean":"Button","IonFill":"plain:solid"}'
                        tagName: ion-button
                        ↓Event [ngx.components.UIControlEvent-1592514849448]: 
                          ↓goBackward [ngx.components.UICustomAction-1592514849451]: 
                            actionValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                  →: |
                                    '		page["local"]["currentIndex"] = page.getPreviousPageIndex();
                                    		let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                                    		let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                                    		let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                                    		history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                                    		page.setTitleRGAA();
                                    		resolve();
                                    '
                        ↓Text [ngx.components.UIText-1592514849454]: 
                          i18n: true
                          textValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: plain:previous
                        ↓Attr [ngx.components.UIAttribute-1592514849457]: 
                          attrName: 
                          attrValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: plain:item-start
                        ↓Attr1 [ngx.components.UIAttribute-1618498244029]: 
                          attrName: '[ngStyle]'
                          attrValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''--color'': this.local.policyColor, ''--background'': this.local.headerColor} : {}'
                        ↓Style [ngx.components.UIStyle-1663767502966]: 
                          styleContent: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                →: |
                                  '/**
                                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                                   * They are set using custom property notation, e.g.: --main-color: black;
                                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                                   * You can find below your component''s properties you can customize within the page.
                                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                                   * For more informations see https://ionicframework.com/docs/theming.
                                  **/
                                  	--background:var(--ion-color-convertigo)
                                  '
                    ↓Button [ngx.components.UIDynamicElement-1592514320843]: 
                      beanData: '{"ionBean":"Button","IonFill":"plain:solid"}'
                      tagName: ion-button
                      ↓Event [ngx.components.UIControlEvent-1592514327067]: 
                        ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1592831695091]: 
                          beanData: '{"ionBean":"InvokeAction"}'
                          stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                          ↓indexPage [ngx.components.UIControlVariable-1592831706018]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.local.currentIndex
                          ↓pages [ngx.components.UIControlVariable-1592831706020]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.local.pages
                          ↓doAll [ngx.components.UIControlVariable-1592831706022]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:false
                          ↓CustomAction [ngx.components.UICustomAction-1592514345220]: 
                            actionValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                  →: |
                                    '		if(vars.next){
                                    		    page["local"]["currentIndex"] = page.getNextPageIndex();
                                    		    page["myContent1"].scrollToTop();
                                    		    let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                                    			let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                                    			let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                                    			history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                                    			page.moveFocus();
                                    			page.setTitleRGAA();
                                    		}
                                    		
                                    		resolve();
                                    '
                            ↓next [ngx.components.UIControlVariable-1592831722010]: 
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:parent.out.nextPage
                      ↓Text [ngx.components.UIText-1592514373643]: 
                        i18n: true
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: plain:next
                      ↓Attr [ngx.components.UIAttribute-1618498240157]: 
                        attrName: '[ngStyle]'
                        attrValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''--color'': this.local.policyColor, ''--background'': this.local.headerColor} : {}'
                      ↓Style [ngx.components.UIStyle-1663767525276]: 
                        styleContent: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                '/**
                                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                                 * They are set using custom property notation, e.g.: --main-color: black;
                                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                                 * You can find below your component''s properties you can customize within the page.
                                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                                 * For more informations see https://ionicframework.com/docs/theming.
                                **/
                                	--background:var(--ion-color-convertigo)
                                '
                    ↓Style [ngx.components.UIStyle-1618825832744]: 
              ↓Tag [ngx.components.UIElement-1592514238339]: 
                identifier: ElseBlock_1592514238339
                tagName: ng-template
                ↓GenericItemButtonSubmit [ngx.components.UIDynamicElement-1544464002619]: 
                  beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
                  tagName: ion-item
                  ↓Style [ngx.components.UIStyle-1544464099962]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '--background: transparent;
                            background-color: transparent;
                            z-index: 0;
                            .item-inner{
                            	border: 0px !important;
                            }
                            
                            
                            '
                  ↓Submit [ngx.components.UIDynamicElement-1543865084768]: 
                    beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
                    tagName: ion-buttons
                    ↓Directive [ngx.components.UIControlDirective-1592514986401]: 
                      directiveName: If
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.currentIndex != 0
                      ↓Button1 [ngx.components.UIDynamicElement-1592514986404]: 
                        beanData: '{"ionBean":"Button","IonFill":"plain:solid"}'
                        tagName: ion-button
                        ↓Event [ngx.components.UIControlEvent-1592514986407]: 
                          ↓CustomAction [ngx.components.UICustomAction-1592514986410]: 
                            actionValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                  →: |
                                    		page["local"]["currentIndex"] = page.getPreviousPageIndex();
                                    		page.moveFocus();
                                    		page.setTitleRGAA();
                                    		resolve();
                                    
                        ↓Text [ngx.components.UIText-1592514986413]: 
                          i18n: true
                          textValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: plain:previous
                        ↓Attr [ngx.components.UIAttribute-1592514986416]: 
                          attrName: 
                          attrValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: plain:item-start
                        ↓Attr1 [ngx.components.UIAttribute-1618498155652]: 
                          attrName: '[ngStyle]'
                          attrValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''--color'': this.local.policyColor, ''--background'': this.local.headerColor} : {}'
                        ↓Style [ngx.components.UIStyle-1663767570603]: 
                          styleContent: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                →: |
                                  '/**
                                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                                   * They are set using custom property notation, e.g.: --main-color: black;
                                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                                   * You can find below your component''s properties you can customize within the page.
                                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                                   * For more informations see https://ionicframework.com/docs/theming.
                                  **/
                                  	--background:var(--ion-color-convertigo)
                                  '
                    ↓Submit [ngx.components.UIDynamicElement-1543865084771]: 
                      beanData: '{"ionBean":"Button","IonFill":"plain:solid"}'
                      tagName: ion-button
                      ↓Event [ngx.components.UIControlEvent-1543865084774]: 
                        ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1576332679592]: 
                          beanData: '{"ionBean":"InvokeAction"}'
                          stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                          ↓CustomAction [ngx.components.UICustomAction-1656516361525]: 
                            actionValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                  →: |
                                    '		let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i"; 
                                    		let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                                    		let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                                    		history.pushState({page: 0, formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                                    		resolve();
                                    '
                      ↓Text [ngx.components.UIText-1543865084789]: 
                        i18n: true
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:'send'| translate
                      ↓Attr [ngx.components.UIAttribute-1618497885609]: 
                        attrName: '[ngStyle]'
                        attrValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: 'script:(this.local.published == true || this.local.anonymous == true) ? {''--color'': this.local.policyColor, ''--background'': this.local.headerColor} : {}'
                      ↓Style [ngx.components.UIStyle-1663767587003]: 
                        styleContent: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                '/**
                                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                                 * They are set using custom property notation, e.g.: --main-color: black;
                                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                                 * You can find below your component''s properties you can customize within the page.
                                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                                 * For more informations see https://ionicframework.com/docs/theming.
                                **/
                                	--background:var(--ion-color-convertigo)
                                '
        ↓GridCol2 [ngx.components.UIDynamicElement-1543345640046]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
      ↓Attr [ngx.components.UIAttribute-1576600098505]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == false &&  this.local.errorViewer != true
    ↓Grid1Spinner [ngx.components.UIDynamicElement-1576600108253]: 
      beanData: '{"ionBean":"Grid","Height":"plain:100%"}'
      tagName: ion-grid
      ↓GridRow [ngx.components.UIDynamicElement-1576600108256]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "FlexJustifyContent": "plain:ion-justify-content-center",
           "FlexAlignement": "plain:ion-align-items-center"
          }'
        tagName: ion-row
        ↓GridCol [ngx.components.UIDynamicElement-1576600108259]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "FlexAlignement": "plain:ion-align-self-center",
             "Size": "plain:12"
            }'
          tagName: ion-col
          ↓Div [ngx.components.UIDynamicElement-1576600108262]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓FragmentSpinner [ngx.components.UICustom-1576600108265]: 
              htmlTemplate: <div  class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            ↓Style [ngx.components.UIStyle-1576600108268]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      text-align:center;
                      
      ↓Attr [ngx.components.UIAttribute-1576600108271]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == true
      ↓Style [ngx.components.UIStyle-1576600108274]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                height:100%;
                
    ↓Grid1 [ngx.components.UIDynamicElement-1604349328497]: 
      beanData: '{"ionBean":"Grid","Height":"plain:100%"}'
      tagName: ion-grid
      ↓Attr [ngx.components.UIAttribute-1604349336574]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == false && this.local.errorViewer == true
      ↓Style [ngx.components.UIStyle-1604349364983]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                height:100%;
                
      ↓GridRow [ngx.components.UIDynamicElement-1604349368266]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "FlexJustifyContent": "plain:ion-justify-content-center",
           "FlexAlignement": "plain:ion-align-items-center"
          }'
        tagName: ion-row
        ↓GridCol [ngx.components.UIDynamicElement-1604349368269]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "FlexAlignement": "plain:ion-align-self-center",
             "Size": "plain:12"
            }'
          tagName: ion-col
          ↓Div [ngx.components.UIDynamicElement-1604349368272]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Style [ngx.components.UIStyle-1604349368278]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      text-align:center;
                      
            ↓H1 [ngx.components.UIDynamicElement-1604421050869]: 
              beanData: '{"ionBean":"Heading1"}'
              tagName: h1
              ↓Text [ngx.components.UIText-1604421182001]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local.errorMsgViewer | translate
          ↓Div2 [ngx.components.UIDynamicElement-1604486086487]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Attr [ngx.components.UIAttribute-1604486086490]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'styledivnormal'
            ↓Tag [ngx.components.UIElement-1604486086493]: 
              isEnabled: false
              tagName: a
              ↓Paragraph [ngx.components.UIDynamicElement-1604486086496]: 
                beanData: '{"ionBean":"Paragraph"}'
                tagName: p
                ↓Text [ngx.components.UIText-1604486086499]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'sendAnotherResponse' | translate
              ↓Attr [ngx.components.UIAttribute-1604486086502]: 
                attrName: href
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:window.location.href
            ↓Button [ngx.components.UIDynamicElement-1604486086505]: 
              beanData: '{"ionBean":"Button"}'
              tagName: ion-button
              ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139644]: 
                beanData: '{"ionBean":"FormatLayout"}'
                comment: FormatLayout
                tagName: div
              ↓Style [ngx.components.UIStyle-1604486086514]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        	--color:var(--ion-color-primary-contrast)
                        
              ↓Event [ngx.components.UIControlEvent-1604486086517]: 
                isEnabled: false
                ↓RootPage [ngx.components.UIDynamicAction-1604486086520]: 
                  beanData: |
                    '{
                     "ionBean": "RootPageAction",
                     "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                     "data": "script:{i: this[''navParams''][''get''](''i'')}"
                    }'
              ↓Event1 [ngx.components.UIControlEvent-1604486146246]: 
                ↓CallSequence [ngx.components.UIDynamicAction-1604486146249]: 
                  beanData: |
                    '{
                     "ionBean": "CallSequenceAction",
                     "requestable": "plain:C8Oforms.Logout",
                     "noAutoLogin": "plain:true"
                    }'
                  ↓RootPage [ngx.components.UIDynamicAction-1604486146252]: 
                    beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
              ↓Icon [ngx.components.UIDynamicElement-1604486220540]: 
                beanData: '{"ionBean":"Icon","IconName":"plain:log-out"}'
                tagName: ion-icon
                ↓Attr [ngx.components.UIAttribute-1604486220543]: 
                  attrName: 
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:item-left
                ↓Style [ngx.components.UIStyle-1604486307452]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'margin-right: 5px;
                          '
              ↓Label [ngx.components.UIDynamicElement-1604486276111]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1604486220546]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'logout' | translate
            ↓Style [ngx.components.UIStyle-1604486331510]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      text-align:center;
                      
  ↓Directive1 [ngx.components.UIControlDirective-1576510583186]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.local.finished
    ↓Grid [ngx.components.UIDynamicElement-1576510607811]: 
      beanData: '{"ionBean":"Grid","Height":"plain:100%"}'
      tagName: ion-grid
      ↓GridRow [ngx.components.UIDynamicElement-1576510612660]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "FlexJustifyContent": "plain:ion-justify-content-center",
           "FlexAlignement": "plain:ion-align-items-center"
          }'
        tagName: ion-row
        ↓GridCol [ngx.components.UIDynamicElement-1576510671475]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "SizeLg": "plain:2",
             "SizeMd": "plain:1",
             "SizeXl": "plain:4"
            }'
          tagName: ion-col
        ↓GridCol1 [ngx.components.UIDynamicElement-1576510671478]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "SizeLg": "plain:8",
             "SizeMd": "plain:10",
             "SizeSm": "plain:12",
             "SizeXl": "plain:4",
             "SizeXs": "plain:12"
            }'
          tagName: ion-col
          ↓CardContainer [ngx.components.UIDynamicElement-1576510790267]: 
            beanData: '{"ionBean":"Card"}'
            tagName: ion-card
            ↓CardContent [ngx.components.UIDynamicElement-1576510820428]: 
              beanData: '{"ionBean":"CardContent"}'
              tagName: ion-card-content
              ↓Div [ngx.components.UIDynamicElement-1576510855715]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [ngx.components.UIAttribute-1576510855718]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139646]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
                  comment: FormatLayout
                  tagName: div
                ↓Text [ngx.components.UIText-1576510855724]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.form.name
                ↓Style [ngx.components.UIStyle-1576510855727]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'font-size: 34px;
                          padding-bottom: 10px;
                          '
              ↓Div1 [ngx.components.UIDynamicElement-1576511328850]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [ngx.components.UIAttribute-1576511328853]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139648]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
                  comment: FormatLayout
                  tagName: div
                ↓H2 [ngx.components.UIDynamicElement-1604349569841]: 
                  beanData: '{"ionBean":"Heading2"}'
                  tagName: h2
                  ↓Text [ngx.components.UIText-1576511154355]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:'responseSubmited' | translate
                ↓Style [ngx.components.UIStyle-1666286816411]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'padding-bottom: 10px;
                          '
              ↓Div2 [ngx.components.UIDynamicElement-1576511345379]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [ngx.components.UIAttribute-1576511345382]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓Tag [ngx.components.UIElement-1576511489080]: 
                  isEnabled: false
                  tagName: a
                  ↓Paragraph [ngx.components.UIDynamicElement-1576511489083]: 
                    beanData: '{"ionBean":"Paragraph"}'
                    tagName: p
                    ↓Text [ngx.components.UIText-1576511489086]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:'sendAnotherResponse' | translate
                  ↓Attr [ngx.components.UIAttribute-1576511489089]: 
                    attrName: href
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:window.location.href
                ↓Button [ngx.components.UIDynamicElement-1604349588455]: 
                  beanData: '{"ionBean":"Button","ButtonFormType":"plain"}'
                  tagName: ion-button
                  ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139650]: 
                    beanData: '{"ionBean":"FormatLayout"}'
                    comment: FormatLayout
                    tagName: div
                  ↓Style [ngx.components.UIStyle-1576511489092]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '	--color:var(--ion-color-primary-contrast);
                            	&:focus {
                            		--border-style: solid;
                            		--border-width: 3px;
                            		--border-color: #000;
                            	}
                            	--background-focused-opacity:1;
                            	--background-focused: var(--ion-color-primary-shade);
                            '
                  ↓Event [ngx.components.UIControlEvent-1576512340956]: 
                    isEnabled: false
                    ↓RootPage [ngx.components.UIDynamicAction-1576512357796]: 
                      beanData: |
                        '{
                         "ionBean": "RootPageAction",
                         "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                         "data": "script:{i: this[''navParams''][''get''](''i'')}"
                        }'
                  ↓Event1 [ngx.components.UIControlEvent-1604349604451]: 
                    ↓RootPage [ngx.components.UIDynamicAction-1604349604454]: 
                      beanData: |
                        '{
                         "ionBean": "RootPageAction",
                         "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                         "data": "script:{i: this.local.i != undefined ? this.local.i : '':i''}"
                        }'
                      comment: '{i: this[''navParams''][''get''](''i'') != undefined ? this[''navParams''][''get''](''i''): '':i'', formId: this[''navParams''][''get''](''formId'') != undefined ? this[''navParams''][''get''](''formId''): '':formId''}'
                  ↓Attr [ngx.components.UIAttribute-1666287561213]: 
                    attrName: role
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:button
                  ↓Attr1 [ngx.components.UIAttribute-1666287579828]: 
                    attrName: tabindex
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:0
                  ↓Label [ngx.components.UIDynamicElement-1668098101549]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Text [ngx.components.UIText-1576511158867]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:'sendAnotherResponse' | translate
                ↓FormatLayout [ngx.components.UIDynamicAttr-1666286602705]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
                  comment: FormatLayout
                  tagName: div
            ↓Style [ngx.components.UIStyle-1604349487183]: 
        ↓GridCol2 [ngx.components.UIDynamicElement-1576510675780]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "SizeLg": "plain:2",
             "SizeMd": "plain:1",
             "SizeXl": "plain:4"
            }'
          tagName: ion-col
  ↓Attr2 [ngx.components.UIAttribute-1586248761698]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:myContent
  ↓Div [ngx.components.UIDynamicElement-1596722220123]: 
    beanData: '{"ionBean":"DivTag"}'
    tagName: div
    ↓Style [ngx.components.UIStyle-1596722227157]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'position: absolute;
              top: 40px; right: 40px;
              width: 250px;
              height:60px;
              line-height: 25px;
              text-align: center !important;
              		border-radius: 5px !important;
              		background: var(--ion-color-primary);
              		padding: 5px;
              '
    ↓Attr [ngx.components.UIAttribute-1596722422494]: 
      attrName: class
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:animate__animated animate__backInDown
    ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139652]: 
      beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
      comment: FormatLayout
      tagName: div
    ↓Text [ngx.components.UIText-1596722282446]: 
      i18n: true
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:gotoMsg
    ↓Attr1 [ngx.components.UIAttribute-1596723465523]: 
      attrName: '*ngIf'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:this.local.showT
  ↓Event [ngx.components.UIControlEvent-1610726723721]: 
    ↓HideCustomSelectComponent [ngx.components.UICustomAction-1610726738541]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              		if(page.local.searchForClick == true){
              			page.local.selectSearchableC8o = {};
              		}
              		resolve();
              
  ↓Div1 [ngx.components.UIDynamicElement-1620739808730]: 
    beanData: '{"ionBean":"DivTag"}'
    isEnabled: false
    tagName: div
    ↓Directive [ngx.components.UIControlDirective-1620739808733]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:!this.local.finished && this.local.spinner == false &&  this.local.errorViewer != true
      ↓Directive [ngx.components.UIControlDirective-1620739808736]: 
        directiveExpression: 'let i = index; trackBy: trackById;'
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:let item of this.formsList
        ↓Directive [ngx.components.UIControlDirective-1620739808739]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:item.cat == undefined && this.local.hideme == undefined
          ↓Directive1 [ngx.components.UIControlDirective-1620739808742]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.pages == undefined  || (this.local.pages[this.local.currentIndex]['pageTechName'] == item.config.page)
            ↓Directive [ngx.components.UIControlDirective-1620739808745]: 
              directiveName: Switch
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:item.type
              ↓Directive [ngx.components.UIControlDirective-1620739808748]: 
                directiveExpression: '''ion-card'''
                directiveName: SwitchCase
                ↓Directive [ngx.components.UIControlDirective-1620739808751]: 
                  comment: 'item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                  ↓Directive [ngx.components.UIControlDirective-1620739808754]: 
                    directiveExpression: let j = index
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:let child of item.children
                    ↓Directive6 [ngx.components.UIControlDirective-1620739808757]: 
                      directiveName: Switch
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:child.type
                      ↓Directive5631111 [ngx.components.UIControlDirective-1620739808760]: 
                        directiveExpression: '''videoCall'''
                        directiveName: SwitchCase
                        ↓Directive [ngx.components.UIControlDirective-1620739808763]: 
                          comment: 'child.conditions != undefined ? (this.eval(this.evaluateConditions(child.conditions))) : true'
                          directiveName: If
                          directiveSource: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                              - MobileSmartSourceType: 'script:child.conditions != undefined ? (this.eval(this.evaluateConditions(child.conditions))) : true'
                          ↓UseSharedComponent81121 [ngx.components.UIUseShared-1620739808766]: 
                            sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
                            ↓ix [ngx.components.UIUseVariable-1620739808769]: 
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:j
                            ↓item [ngx.components.UIUseVariable-1620739808772]: 
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:child
                            ↓redList [ngx.components.UIUseVariable-1620739808775]: 
                              varValue: 
                                - xmlizable: 
                                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                  - MobileSmartSourceType: script:this.redList[child['name']]
              ↓Directive1 [ngx.components.UIControlDirective-1620739808778]: 
                directiveExpression: '''videoCall'''
                directiveName: SwitchCase
                ↓Directive [ngx.components.UIControlDirective-1620739939658]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:item.conditions != undefined ? (this.eval(this.evaluateConditions(item.conditions))) : true'
                  ↓UseSharedComponent [ngx.components.UIUseShared-1620739808781]: 
                    sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
    ↓Attr [ngx.components.UIAttribute-1620741945699]: 
      attrName: id
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:class1620739808738
  ↓Attr3 [ngx.components.UIAttribute-1648548172013]: 
    attrName: '[style.backgroundColor]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: 'script:this.enabled == true ? (this.form.wallpaper[''type''] == ''color'' ? this.form.wallpaper[''color''] : ''#fff'') : ''#fff'''
  ↓Attr4 [ngx.components.UIAttribute-1648548412045]: 
    attrName: '[style.--background]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: 'script:(this.enabled == true ? (this.form.wallpaper[''type''] != undefined ? (this.form.wallpaper[''type''] != ''color'' ? ''url(''+this.local.url+'')'' : ''none'') : ''url('' + this.link+ '')'') : ''none'') + ''cover no-repeat 100% 100%'''
↓PageEvent2 [ngx.components.UIPageEvent-1611327642638]: 
  viewEvent: onWillLeave
  ↓cancelViewLive [ngx.components.UICustomAction-1611327662306]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		page.cancelReplicatePushResponse();
            		page.global.anonymous = null;
            		page.global.published = null;
            		page.local.live.cancel();
            		page.c8o.cancelLive("viewLiveViewerPage");
            		if(page.local.databsesTosync != undefined){
            			for(let db in page.local.databsesTosync){
            				page.c8o.callJsonObject("fs://"+db+".replicate_pull",{cancel: true});
            				page.c8o.log.debug("canceled "+db+" pull replication (before leaving page)");
            			}
            		}
            		if(page.local.liveToCancel != undefined){
            			for(let liveQuery of page.local.liveToCancel){
            				page.c8o.cancelLive(liveQuery);
            				page.c8o.log.debug("canceled "+liveQuery+" live query (before leaving page)");
            			}
            		}
            		window.removeEventListener(''popstate'', this.local.listenerPopState);
            		page.restaureTitleRGAA();
            		resolve();
            '
↓Div [ngx.components.UIDynamicElement-1620404620514]: 
  beanData: '{"ionBean":"DivTag"}'
  tagName: div
  ↓Directive [ngx.components.UIControlDirective-1620397975313]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.local.finished && this.local.spinner == false &&  this.local.errorViewer != true
    ↓Directive [ngx.components.UIControlDirective-1620398021976]: 
      directiveExpression: 'let i = index; trackBy: trackById;'
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:let item of this.formsList
      ↓Directive [ngx.components.UIControlDirective-1620398021979]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:item.cat == undefined && this.local.hideme == undefined
        ↓Directive1 [ngx.components.UIControlDirective-1620398021982]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages == undefined  || (this.local.pages[this.local.currentIndex]['pageTechName'] == item.config.page)
          ↓Directive [ngx.components.UIControlDirective-1620398021985]: 
            directiveName: Switch
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:item.type
            ↓Directive [ngx.components.UIControlDirective-1620398022288]: 
              directiveExpression: '''ion-card'''
              directiveName: SwitchCase
              ↓Directive [ngx.components.UIControlDirective-1620398083043]: 
                comment: 'item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)) : true '
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
                ↓Directive [ngx.components.UIControlDirective-1620398117160]: 
                  directiveExpression: let j = index
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:let child of item.children
                  ↓Directive6 [ngx.components.UIControlDirective-1620398117163]: 
                    directiveName: Switch
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:child.type
                    ↓Directive5631111 [ngx.components.UIControlDirective-1620398117523]: 
                      directiveExpression: '''videoCall'''
                      directiveName: SwitchCase
                      ↓Directive [ngx.components.UIControlDirective-1620398157972]: 
                        comment: 'child.conditions != undefined ? (this.eval(this.evaluateConditions(child.conditions))) : true'
                        directiveName: If
                        directiveSource: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:true
                        ↓UseSharedComponent81121 [ngx.components.UIUseShared-1620398117526]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
                          ↓ix [ngx.components.UIUseVariable-1620398117529]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:j
                          ↓item [ngx.components.UIUseVariable-1620398117532]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:child
                          ↓redList [ngx.components.UIUseVariable-1620398117535]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[child['name']]
            ↓Directive1 [ngx.components.UIControlDirective-1620398022312]: 
              directiveExpression: '''videoCall'''
              directiveName: SwitchCase
              ↓UseSharedComponent [ngx.components.UIUseShared-1620398022315]: 
                sharedcomponent: C8Oforms.MobileApplication.Application.itemVideoCallViewer
  ↓Attr [ngx.components.UIAttribute-1620742930267]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:idUniqueFabButtonC8o
  ↓Attr1 [ngx.components.UIAttribute-1620743067081]: 
    attrName: style
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: 'plain:top:0; left: 0; position: fixed; z-index: 999;'
↓PageEvent1 [ngx.components.UIPageEvent-1649413191972]: 
  ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1649413244577]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			//TODO conversion
            			/*this.all_videoCall.changes.subscribe((r) => {
            			if(r._results.length > 0){
            				r._results.forEach((x, index)=>{
            					x._elementRef.nativeElement.style.visibility = (index == 0 ? "visible" : "hidden");
            				});
            			}
            		  });*/
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            '
    isEnabled: false
  ↓setRGAArules [ngx.components.UICustomAsyncAction-1668089988561]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			document.querySelectorAll("ion-menu-button").forEach((x: any)=>{
            				x.removeAttribute("type");
            				x.role = "button";
            				x.tabindex = "0";
            				x.setAttribute("tabindex", 0);
            				x.shadowRoot.querySelectorAll("button").forEach((y: any)=>{
            					y.removeAttribute("role");
            					y.removeAttribute("type");
            				})
            			})
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            '
↓Footer [ngx.components.UIDynamicElement-1664209243607]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓ToolBar [ngx.components.UIDynamicElement-1664209469043]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓Tag2 [ngx.components.UIElement-1664209162935]: 
      isEnabled: false
      tagName: ion-tabs
      ↓Tag [ngx.components.UIElement-1664209162938]: 
        tagName: ion-tab-bar
        ↓Directive2 [ngx.components.UIControlDirective-1664280994102]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages[this.local.currentIndex].enabledButtons && this.local.pages[this.local.currentIndex].positionButtons == 'tab' && this.local.currentIndex > 0
          ↓Tag [ngx.components.UIElement-1664280994105]: 
            tagName: ion-tab-button
            ↓Icon [ngx.components.UIDynamicElement-1664280994108]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:arrow-back-outline"}'
              tagName: ion-icon
            ↓Label [ngx.components.UIDynamicElement-1664280994111]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1664280994114]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:previous
              ↓Attr [ngx.components.UIAttribute-1664280994117]: 
                attrName: '*ngIf'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:this.isThereANextPage != undefined 
            ↓Event [ngx.components.UIControlEvent-1664280994120]: 
              ↓goBackward [ngx.components.UICustomAction-1664281347683]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		page["local"]["currentIndex"] = page.getPreviousPageIndex();
                        		let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                        		let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                        		let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                        		history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                        		page.setTitleRGAA();
                        		resolve();
                        '
            ↓Attr1 [ngx.components.UIAttribute-1664289198501]: 
              attrName: '[style.background]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'unset'
        ↓Style [ngx.components.UIStyle-1664267263857]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  'overflow-x: scroll;
                  '
        ↓Directive3 [ngx.components.UIControlDirective-1664292335271]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages[this.local.currentIndex].enabledTab
          ↓Directive [ngx.components.UIControlDirective-1664209162944]: 
            directiveIndexName: index
            directiveItemName: item
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.pages
            ↓Tag [ngx.components.UIElement-1664209162947]: 
              tagName: ion-tab-button
              ↓Icon [ngx.components.UIDynamicElement-1664209162950]: 
                beanData: '{"ionBean":"Icon","IconName":"script:item.iconName != undefined ? item.iconName : ''book-outline''"}'
                tagName: ion-icon
              ↓Label [ngx.components.UIDynamicElement-1664209162953]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1664209162956]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:item.name
              ↓Attr [ngx.components.UIAttribute-1664209162959]: 
                attrName: '[selected]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:index == this.local.currentIndex
              ↓Event [ngx.components.UIControlEvent-1664209162962]: 
                ↓If [ngx.components.UIDynamicAction-1664209162965]: 
                  beanData: '{"ionBean":"IfAction","condition":"script:index > this.local.currentIndex"}'
                  ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1664209162968]: 
                    beanData: '{"ionBean":"InvokeAction"}'
                    stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                    ↓indexPage [ngx.components.UIControlVariable-1664209162971]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.currentIndex
                    ↓pages [ngx.components.UIControlVariable-1664209162974]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local.pages
                    ↓doAll [ngx.components.UIControlVariable-1664209162977]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:false
                    ↓CustomAction [ngx.components.UICustomAction-1664209162980]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '		if(vars.next){
                              		    page["local"]["currentIndex"] = vars.nextIndex;
                              		    page["myContent1"].scrollToTop();
                              		    let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                              			let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                              			let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                              			history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                              			page.moveFocus();
                              			page.setTitleRGAA();
                              		}
                              		
                              		resolve();
                              '
                      ↓next [ngx.components.UIControlVariable-1664209162983]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:parent.out.nextPage
                      ↓nextIndex [ngx.components.UIControlVariable-1664209162986]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:index
                ↓If1 [ngx.components.UIDynamicAction-1664209162989]: 
                  beanData: '{"ionBean":"IfAction","condition":"script:index < this.local.currentIndex"}'
                  ↓CustomAction [ngx.components.UICustomAction-1664209162992]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		if(vars.next){
                            		    page["local"]["currentIndex"] = vars.nextIndex;
                            		    page["myContent1"].scrollToTop();
                            		    let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                            			let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                            			let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                            			history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                            			page.moveFocus();
                            			page.setTitleRGAA();
                            		}
                            		
                            		resolve();
                            '
                    ↓next [ngx.components.UIControlVariable-1664209162995]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:true
                    ↓nextIndex [ngx.components.UIControlVariable-1664209162998]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:index
              ↓Attr1 [ngx.components.UIAttribute-1664272789084]: 
                attrName: '*ngIf'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:this.local.pages[index].included
              ↓Attr2 [ngx.components.UIAttribute-1664289194444]: 
                attrName: '[style.background]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'unset'
        ↓Directive1 [ngx.components.UIControlDirective-1664274510304]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.pages[this.local.currentIndex].enabledButtons && this.local.pages[this.local.currentIndex].positionButtons == 'tab'
          ↓Tag [ngx.components.UIElement-1664274551545]: 
            tagName: ion-tab-button
            ↓Icon [ngx.components.UIDynamicElement-1664274551548]: 
              beanData: '{"ionBean":"Icon","IconName":"script:this.isThereANextPage() ? ''arrow-forward-outline'' : ''send-outline''"}'
              tagName: ion-icon
            ↓Label [ngx.components.UIDynamicElement-1664274551551]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1664274551554]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:this.isThereANextPage() == true  ? translate.instant(''next'') : translate.instant(''send'')'
              ↓Attr [ngx.components.UIAttribute-1664280734051]: 
                attrName: '*ngIf'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:this.isThereANextPage != undefined 
            ↓Event [ngx.components.UIControlEvent-1664274551560]: 
              ↓IfElse [ngx.components.UIDynamicIf-1664274738931]: 
                beanData: '{"ionBean":"IfElseAction","condition":"script:this.isThereANextPage()"}'
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1664274758831]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                  ↓indexPage [ngx.components.UIControlVariable-1664274758834]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.local.currentIndex
                  ↓pages [ngx.components.UIControlVariable-1664274758837]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.local.pages
                  ↓doAll [ngx.components.UIControlVariable-1664274758840]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:false
                  ↓CustomAction [ngx.components.UICustomAction-1664274758843]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		if(vars.next){
                            		    page["local"]["currentIndex"] = page.getNextPageIndex();
                            		    page["myContent1"].scrollToTop();
                            		    let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i";
                            			let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                            			let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                            			history.pushState({page: page["local"]["currentIndex"], formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                            			page.moveFocus();
                            			page.setTitleRGAA();
                            		}
                            		
                            		resolve();
                            '
                    ↓next [ngx.components.UIControlVariable-1664274758846]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:parent.out.nextPage
                ↓Else_Handler [ngx.components.UIActionElseEvent-1664274742535]: 
                  ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1664274771753]: 
                    beanData: '{"ionBean":"InvokeAction"}'
                    stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                    ↓CustomAction [ngx.components.UICustomAction-1664274771756]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '		let i = page["navParams"].get("i") != undefined ? page["navParams"].get("i") : ":i"; 
                              		let edit = page["navParams"].get("edit") != undefined ? page["navParams"].get("edit") : ":edit";
                              		let formId = page["navParams"].get("formId") != undefined ? page["navParams"].get("formId") : ":formId";
                              		history.pushState({page: 0, formId: formId, edit: edit, i: i}, "", "index.html" + "#/viewer/" + formId + "/" + edit + "/" + i);
                              		resolve();
                              '
            ↓Attr1 [ngx.components.UIAttribute-1664289190000]: 
              attrName: '[style.background]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'unset'
        ↓Attr1 [ngx.components.UIAttribute-1664283795754]: 
          attrName: '[style.--background]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.headerColor
        ↓Attr2 [ngx.components.UIAttribute-1664285116598]: 
          attrName: '[style.--color]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.policyColor
      ↓Attr [ngx.components.UIAttribute-1664209163001]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.pages != undefined && (this.local.pages[this.local.currentIndex].enabledTab || (this.local.pages[this.local.currentIndex].enabledButtons && this.local.pages[this.local.currentIndex].positionButtons == 'tab') ) 
      ↓Style [ngx.components.UIStyle-1664209966109]: 
        isEnabled: false
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                'overflow-x: scroll;
                '
    ↓UseSharedComponent [ngx.components.UIUseShared-1664293003357]: 
      sharedcomponent: C8Oforms.MobileApplication.Application.SharedTabs
  ↓Attr [ngx.components.UIAttribute-1664282697144]: 
    attrName: '*ngIf'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:this.local.pages != undefined && this.local.currentIndex != undefined && this.local.pages[this.local.currentIndex].positionTab != undefined && this.local.pages[this.local.currentIndex].positionTab == 'bottom'