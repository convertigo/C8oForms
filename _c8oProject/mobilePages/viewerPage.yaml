comment: Form Visualisator
menu: C8Oforms.MobileApplication.Application.Menu
scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        //import { Observable, Subject} from ''rxjs'';
        //import ''rxjs/add/observable/zip'';
        
        //import { Observable, Subject } from ''rxjs'';
        import { delay } from ''rxjs/operators'';
        import { of, zip } from ''rxjs'';
        
        import { Observable } from ''rxjs/observable'';
        import ''rxjs/add/observable/zip'';
        import { map } from ''rxjs/operators/map'';
        
        
        import { Input, EventEmitter, Output } from ''@angular/core'';
        
        import ''rxjs/add/observable/zip'';
        
        //Used by conditional
        interface ValFieldObject{
            str: string;
            source: boolean;
            type: string;
            arr: Array<any>;
        }
        interface FieldObject {
            type: string;
            subject: string;
            operator: string;
            val1: ValFieldObject;
            val2: ValFieldObject;
        
        }
        interface FormObject {
            type: string;
            subject: string;
            operator: string;
            attribute: string;
        
        }
        
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
            public formsList: Array<object> = [];
            public formsSubmit = {};
            public link;
            public enabled = false;
            public results = {};
            public form;
            public epoch: string;
            public allfield = "";
            private el: HTMLElement;
            public edit: boolean = false;
            public redList = [];
            public formSubmittedStr = "";
            public submitFormStr = "";
            public sendFormStr = ""
            public idFiles; 
            public cpt = 0;
            public cptDelete = 0;
            public loading;
            public creating;
            
            
            
            /*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/ 
                this.global[''__viewindeok'']= null;
                this.global["__viewerTotal"] = 0;
                this.global["__viewerarr"] = [];
                this.global[''__C8O_TODELETE''] = [];
                this.cpt = 0;
                this.epoch = (new Date()).getTime() + "";
                translate.get(''allfield'').subscribe((res: string) => {
                 this.allfield = res;
                });
                this.idFiles = "files_" + this.epoch;
                this.global[this.idFiles] = [];
                
                this.local.multipleField = {radio_group: true, checkbox_group: true, checkbox: true};
                this.local.simpleField = {date: true, select: true, datetime: true, time: true, radio: true, text: true, barcode: true, slider: true};
                this.local.fileField = {file: true};
                this.local.camSignField = {img: true, signature:true};
                this.global[this.global.id] = [];
                /*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
            
            getWidthbyId(id){
                console.log(id);
                try{
                    return {''width'':''calc(98%-''+ document.getElementById(id).clientWidth+''px);''}
                }
                catch(e){
                    return {}
                }
            }
            
            public codeIsADigit(code){
                //return /^[+-]?[0-9]\d*([\.,])?$ /g.test(code);
                return /(^[-?$[0-9]\d*([\.,]\d*)?$)/g.test(code);
            }
            getProgress(){
                if(this.global["__viewerProgress"] == undefined || this.global["__viewerTotal"] == undefined){
                    return 0
                }
                else{
                    //console.log(Number(this.global["__viewerProgress"]));
                    //console.log(Number(this.global["__viewerTotal"]));
                    return ((Number(this.global["__viewerProgress"]) / Number(this.global["__viewerTotal"])) * 100);
                }
        
            }
            getTranslate(msgTosearch :string): Promise<any>{
                return new Promise((resolve, reject)=>{
                    let translate = this.getInstance(TranslateService)
                    translate.get(msgTosearch).subscribe((res: string) => {
                        resolve(res);
                    });
                });        
            }
            showProgress(){
                this.loading = this.loadingCtrl.create({
                    spinner: ''hide'',
                    content: `
                      <div>
                        <progress-bar [progress]="''0''"></progress-bar>
                        <p>abc</p>
                      </div>`
                  });
                this.loading.present();
            }
            
            flatArray(): any{
                let arr = [];
                let cpt = 0;
                 for(let bean in this.global[this.idFiles]){
                     for(let file of this.global[this.idFiles][bean]){
                         if(file.deleted === undefined){
                             arr.push({file: file, bean: bean});
                             cpt = cpt + 1;
                         }
                     }
                 }
                 return [arr, cpt];
            }
            //
            //this.global[''__viewerTotal''] > 0 || this.global["__C8O_TODELETE"] >0
            //delete_attachment
            deleteRecursive(arr: any, index: number, total: number, id:any):Promise<any>{
                return new Promise((resolve)=>{
                    if(total == 0 || arr == undefined){
                        resolve();
                    }
                    else{
                        let args = {
                                "docid":id,
                                "name": arr[index]["path"],
                                "index": index
                        }
                        this.router.c8o.callJsonObject("fs://c8oforms_response_fs.delete_attachment",args)
                        .then((resp, parameters)=>{
                            this.cptDelete = this.cptDelete+1;
                            this.global[''cptTotal''] = this.global[''cptTotal''] + 1;
                            this.global[''__C8O_TODELETE''][index][''deleted''] = true;
                            //console.log("Progress delete: " +this.cptDelete+ " / "+ total);
                            //this.global["__viewerProgressDelete"] = this.global["__viewerProgressDelete"] + this.cptDelete;
                            //this.global[''__C8O_TODELETE''][parameters[''index'']]["deleted"]= true;
                            if(this.cptDelete == total){
                                //console.log("finished deletions");
                                resolve();
                            }
                            else{
                                setTimeout(() => {
                                    this.deleteRecursive(arr, index + 1, total, id)
                                    .then(()=>{
                                        resolve();
                                    });
                                }, 100);
                               
        
                            }
                            return null;
                        })
                        .fail((err)=>{
                            //console.log(err);
                            //this.cpt = this.cptDelete+1;
                            //console.log("Progress delete: " +this.cptDelete+ " / "+ total);
                            this.global[''cptTotal''] = this.global[''cptTotal''] + 1;
                            if(this.cpt == total){
                                //console.log("finishedErrores deletions");
                                resolve();
                            }
                            else{
                                this.postRecursive(arr, index + 1, total, id)
                                .then(()=>{
                                    resolve();
                                });
                            }
                        });
                    }
                    
                });
            }
            postRecursive(arr: any, index: number, total: number, id: any = null) : Promise<any>{
                return new Promise((resolve)=>{
                    if(total == 0 || arr == undefined){
                        resolve();
                    }
                    else{
                        let ids = id != null ? id: this.local.user+''_''+this.local.edit+''_''+this.epoch;
                        let args;
                        if(window[''cordova''] == undefined){
                            let type = (arr[index]["file"].type == undefined || arr[index]["file"].type == "") ? "application/octet-stream":arr[index]["file"].type;
                            let file: Blob = arr[index]["file"];
                            args = {
                                    "docid":ids,
                                    "name": arr[index]["bean"] + "_C80C80_" +arr[index]["file"]["name"]+"_C80C80_"+(new Date).getTime(),
                                    "content_type": type,
                                    "content":file,
                                    "index":index
                            }
                        }
                        else{
                            let type = (arr[index]["file"].mediaType == undefined || arr[index]["file"].mediaType == "") ? "application/octet-stream":arr[index]["file"].mediaType;
                            args = {
                                    "docid":ids,
                                    "name": arr[index]["bean"] + "_C80C80_" +arr[index]["file"]["name"]+"_C80C80_"+(new Date).getTime(),
                                    "content_type": type,
                                    "content": new Blob(arr[index]["file"].data, {type: type}),
                                    "index":index
                            }
                        }
                        
                        this.router.c8o.callJsonObject("fs://c8oforms_response_fs.put_attachment",args)
                            .then((resp, parameters)=>{
                                this.cpt = this.cpt+1;
                                //console.log("Progress: " +this.cpt+ " / "+ total);
                                this.global[''cptTotal''] = this.global[''cptTotal''] + 1;
                                this.global["__viewerProgress"] = this.cpt;
                                this.global["__viewerProgressDelete"] = this.global["__viewerProgressDelete"] +this.cpt;
                                this.global[''__viewerarr''][parameters[''index'']].file["ok"]= true;
                                this.global[''__viewindeok''][index]= true;
                                if(this.cpt == total){
                                    console.log("finished");
                                    resolve();
                                }
                                else{
                                    this.postRecursive(arr, index + 1, total, ids)
                                    .then(()=>{
                                        resolve();
                                    });
        
                                }
                                return null;
                            })
                            .fail((err)=>{
                                //console.log(err);
                                this.cpt = this.cpt+1;
                                //console.log("Progress: " +this.cpt+ " / "+ total);
                                if(this.cpt == total){
                                    console.log("finishedErrores");
                                    resolve();
                                }
                                else{
                                    this.postRecursive(arr, index + 1, total, ids)
                                    .then(()=>{
                                        resolve();
                                    });
                                }
                            });
                    }
                    
                });
                
                
            }
            
            unsetred(name:string){
                this.redList[name] = false;
                this.tick();         
            }
            
            setRedSpecs(obj:any, first: any){
                for(let item of obj){
                    let find;
                    if(item.nativeElement.id.indexOf("_C8o#") != -1){
                        find = this.redList[item.nativeElement.id.substring(0,item.nativeElement.id.indexOf("_C8o#"))][item.nativeElement.id.substring(item.nativeElement.id.indexOf("_C8o#")+5)];
                    }
                    else{
                        find = this.redList[item.nativeElement.id];
                    }
                    if(find){
                        item.nativeElement.classList.remove("animated");
                        item.nativeElement.classList.remove("shake");
                        if(!first){
                            item.nativeElement.scrollIntoView({block: "center", inline: "nearest", behavior:"smooth"});   
                            first = true;
                        }
                        setTimeout(() => {
                            item.nativeElement.classList.add("animated");
                            item.nativeElement.classList.add("shake");
                            
                        }, 50);
                    }
                    
                }
            }
            
            
            
            /**
             * Browse into conditions to generate Javascript expressions for visibility, and navigation
             * @param conditions (condition Object define in Fullsync doc)
             */
            public evaluateConditions(conditions): string{
                let jsString: string = "";
                for(let conds of Object.keys(conditions)){
                    switch(conds){
                        case "visibleIf":
                            jsString += this.detectSubjectAndComplete(conditions[conds]["conds"], conditions[conds]["condVisible"]);
                        break;
                        case "goToPageIf":
                        break;
                    }
                }
                return jsString;
                
            }
            
            /**
             * Compute navigation conditions detecting type of conditions
             * @param conds Array<any> -- array of conditions 
             * @param operatorStr string -- string operator
             * @param line 
             * @param child
             */
            private detectTypeAndComplete(conds: Array<any>, operatorStr: string, line:any = null, child:any = null){
                // Iterating over conditions
                for(let cond of conds){
                    if(cond.val1.type == "radio_group" || cond.val1.type == "checkbox_group" || cond.val1.type == "radio" || cond.val1.type == "checkbox" || cond.val1.type == "select"){
                        if(cond.val2.vals != undefined){
                            if(cond.val1.type == "radio_group" || cond.val1.type == "checkbox_group"){
                                try {
                                    for(let elem of cond.val2.vals[line.id]){
                                        if(elem.value == child.id){
                                            if(elem.action != "" ||elem.action != undefined){
                                                // Go To Page
                                                let indexToGo: number = this.findIndexOfPageByPageTechName(elem.action);
                                                if(indexToGo != -1){
                                                    this.local.currentIndex = indexToGo;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch(e){
                                    
                                }
                            }
                            else{
                                try{
                                    let action = cond.val2.vals[child.id]
                                    if(action != "" ||action != undefined){
                                        // Go To Page
                                        let indexToGo: number = this.findIndexOfPageByPageTechName(action);
                                        if(indexToGo != -1){
                                            this.local.currentIndex = indexToGo;
                                        }
                                    }
                                    
                                }
                                catch(e){
                                    
                                }
                            }
                            
                        }
                        
                    }
                }
            }
            
            private findIndexOfPageByPageTechName(pageTechName: string): number{
                let cpt = 0;
                for(let page of this.local.pages){
                    if(page.pageTechName == pageTechName){
                        return cpt;
                    }
                    cpt ++;
                }
                return -1;
            }
            
            /**
             * Compute visibility conditions detecting type of conditions
             * @param conds Array<any> -- array of conditions
             * @param operatorStr string -- string operator
             */
            public detectSubjectAndComplete(conds: Array<any>, operatorStr: string){
                // Javascript string to be built
                let jsString = "";
                // Operator between each condition
                const operator = this.getcondVisibleToSign(operatorStr);
                let cpt = 0;
                // Iterating over conditions
                for(let cond of conds){
                    var status = "";
                    try{
                        // If subject of current condition are fields  
                        if(this.isAfieldSimpleOrMultiple(cond)){
                            status = "field";
                            jsString+= cpt > 0 ? operator+ " " + this.compute(cond) : this.compute(cond);
                            cpt ++;
                        }
                        // If subject of current condition is the form
                        else if(this.isAform(cond)){
                            status = "form";
                            // If its first condition of string don''t prefix by operator, then call generateJsVisibleIfForm
                            jsString+= cpt > 0 ? operator+ " " + this.generateJsVisibleIfForm(cond) : this.generateJsVisibleIfForm(cond);
                            //console.log("form");
                            cpt ++;
                        }
                        else if(this.isAFile(cond)){
                            status = "field";
                            jsString+= cpt > 0 ? operator+ " " + this.compute(cond) : this.compute(cond);
                            cpt ++;
                        }
                        else if(this.isACamSign(cond)){
                            status = "field";
                            jsString+= cpt > 0 ? operator+ " " + this.compute(cond) : this.compute(cond);
                            cpt ++;
                        }
                        else{
                            status = "error";
                        }
                    }
                    catch(e){
                        console.log("errorr");
                    }
                    
                }
                if(jsString == ""){
                    jsString = "true";
                }
                return jsString;  
            }
            
            /**
             * detect if object is instance of field
             * @param object
             */
            private instanceOfField(object:any){
                return ''val1'' in object
            }
            
            /**
             * detect if we are evaluating a valid field Simple or multiple
             * @param cond
             */
            private isAfieldSimpleOrMultiple(cond: FieldObject){
                try {
                    return (cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && (cond.val1.str != "" || cond.val1.arr.length > 0) && cond.val2 != undefined && (cond.val2.str != "" || cond.val2.arr.length > 0) && cond.operator != undefined && cond.operator != "") 
                }
                catch(e){
                    return (cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && (cond.val1.str != "" || cond.val1.arr.length > 0) && cond.operator != undefined && cond.operator != "" && (cond.operator == "is_filled" || cond.operator == "is_empty"));;
                }
            }
            
            /**
             * detect if we are evaluating a valid form
             * @param cond
             */
            private isAform(cond: FormObject){
                try {
                    return cond.subject != undefined && cond.subject == "form" && cond.attribute != undefined && cond.attribute != "" && cond.operator != undefined && cond.operator != "";
                }
                catch(e){
                    return false;
                }
            }
            
            /**
             * detect if we are evaluating a valid file
             * @param cond
             */
            private isAFile(cond: FieldObject){
                try {
                    return cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && cond.val1.str != undefined && cond.operator != "" && cond.val1.type == "file";
                }
                catch(e){
                    return false;
                }
            }
            
            /**
             * detect if we are evaluating a valid camSign
             * @param cond
             */
            private isACamSign(cond: FieldObject){
                try {
                    return cond.subject != undefined && cond.subject == "field" && cond.val1 != undefined && cond.val1.str != undefined && cond.operator != "" && (cond.val1.type == "signature" || cond.val1.type == "img");
                }
                catch(e){
                    return false;
                }
            }
            
            /**
             * 
             * @param val ValFieldObject
             * @param val1 ValFieldObject
             */
            private compute(cond: FieldObject | FormObject){
                let result = true;
                if(this.instanceOfField(cond)){
                    const field = <FieldObject>cond;
                    const type1: string = this.getType(field.val1.type);
                    const operator: string = field.operator;
                    result = this[operator](field, type1);
                }
                else{
                    const form = <FormObject>cond;
                }
                return result;
                
            }
            
            /**
             * getter to a simple field val
             * @param val
             */
            private getValSimple(val : ValFieldObject){
                return val.source ? this.getSimple(val) : val.str;
            }
            
            /**
             * getter to a multiple field val
             * @param val
             */
            private getValMultiple(val : ValFieldObject): Array<any>{
                let ret;
                let str 
                if(val.source){
                    switch(val.type){
                        case "checkbox":
                            str = this.getNameById(val.arr!= undefined ? val.arr[0].value : val.str); 
                            ret = val.source ? this.getFormCheckboxValueByName(str) :val.arr;
                        break;
                        case "radio_group":
                            str = this.getNameById(val.arr!= undefined ? val.arr[0].value : val.str); 
                            ret = val.source ? this.getFormRadioGroupValueByName(str) :val.arr;
                        break;
                        case "checkbox_group":
                            str = this.getNameById(val.arr!= undefined ? val.arr[0].value : val.str); 
                            ret = val.source ? this.getFormCheckboxGroupValueByName(str) :val.arr;
                        break;
                            
                    }
                }
                else{
                    ret = val.arr.map((e)=>{return e.display});
                }
                
                return ret;
            }
            
            
            /**
             * equals operator 
             * @param field
             * @param type
             */
            private equals(field: FieldObject, type: string){
                if(type == "simple"){
                    return this.getValSimple(field.val1) == this.getValSimple(field.val2);
                }
                else if(type == "multiple"){
                    let arr1 = this.getValMultiple(field.val1);
                    let arr2 = this.getValMultiple(field.val2)
                    return arr1.length != arr2.length ? false : arr1.sort().every((value, index) => { return value ==  arr2[index]});
                }
            }
            
            /**
             * different operator
             * @param field
             * @param type
             */
            private different(field: FieldObject, type: string){
                if(type == "simple"){
                    return this.getValSimple(field.val1) != this.getValSimple(field.val2);
                }
                else if(type == "multiple"){
                    let arr1 = this.getValMultiple(field.val1);
                    let arr2 = this.getValMultiple(field.val2)
                    return !(arr1.length != arr2.length ? false : arr1.sort().every((value, index) => { return value ==  arr2[index]}));
                }
            }
            
            /**
             * greater operator
             * @param field
             * @param type
             */
            private greater(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 > v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) > this.getValSimple(field.val2);
                    }
        
                    
                }
            }
            
            /**
             * minus operator
             * @param field
             * @param type
             */
            private minus(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 < v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) < this.getValSimple(field.val2);
                    }
        
                    
                }
            }
            
            /**
             * greaterequals operator
             * @param field
             * @param type
             */
            private greaterequals(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 >= v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) >= this.getValSimple(field.val2);
                    }
        
                    
                }
            }
            
            /**
             * minusequals operator
             * @param field
             * @param type
             */
            private minusequals(field: FieldObject, type: string){
                if(type == "simple"){
                    try{
                        let v1 = Number(+this.getValSimple(field.val1));
                        let v2 = Number(+this.getValSimple(field.val2));
                        if(v1 == NaN || v2 == NaN){
                            throw "errr";
                        }
                        else{
                            return v1 <= v2;
                        }
                    }
                    catch(e){
                        return this.getValSimple(field.val1) <= this.getValSimple(field.val2);
                    }            
                }
            }
            
            /**
             * among_following operator
             * @param field
             * @param type
             */
            private among_following(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValMultiple(field.val2);
                    return (v2.filter(w => w == v1)).length > 0;
                }
                else if(type == "multiple"){
                    let v1 = this.getValMultiple(field.val1);
                    let v2 = this.getValMultiple(field.val2)
                    return v2.filter(Set.prototype.has, new Set(v1)).length > 0;
                
                }
            }
            
            /**
             * out_following operator
             * @param field
             * @param type
             */
            private out_following(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValMultiple(field.val2);
                    return (v2.filter(w => w == v1)).length == 0;
                }
                else if(type == "multiple"){
                    let v1 = this.getValMultiple(field.val1);
                    let v2 = this.getValMultiple(field.val2) 
                    return v2.filter(Set.prototype.has, new Set(v1)).length == 0;
                }
            }
            
            /**
             * contains operator
             * @param field
             * @param type
             */
            private contains(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValSimple(field.val2);
                    return v1.indexOf(v2) != -1;
                }
            }
            
            /**
             * not_contains operator
             * @param field
             * @param type
             */
            private not_contains(field: FieldObject, type: string){
                if(type == "simple"){
                    let v1 = this.getValSimple(field.val1);
                    let v2 = this.getValSimple(field.val2);
                    return v1.indexOf(v2) == -1;
                }
            }
            
            /**
             * contains_multiple_files operator
             * @param field
             */
            private contains_multiple_files(field: FieldObject, type: string){
                let v1 = this.getIdByName(field.val1.str);
                let id = this.global.id;
                return this.global[id] != undefined && this.global[id][v1] != undefined && this.global[id][v1].length > 1;
            }
            
            /**
             * contains_a_file operator
             * @param field
             */
            private contains_a_file(field: FieldObject, type: string){
                let v1 = this.getIdByName(field.val1.str);
                let id = this.global.id;
                return this.global[id] != undefined && this.global[id][v1] != undefined && this.global[id][v1].length == 1;
            }
            
            /**
             * does_not_contain_file operator
             * @param field
             */
            private does_not_contain_file(field: FieldObject, type: string){
                let v1 = this.getIdByName(field.val1.str);
                let id = this.global.id;
                return this.global[id] == undefined || this.global[id][v1] == undefined || this.global[id][v1].length == 0;
            }
            
            /**
             * is_filled operator
             * @param field
             */
            private is_filled(field: FieldObject){
                const val = this.getValSimple(field.val1);
                return val != "";
            }
            
            /**
             * is_empty operator
             * @param field
             */
            private is_empty(field: FieldObject){
                const val = this.getValSimple(field.val1);
                return val == "";
            }
            
            /**
             * Generate Javascript expression for a given FormObject
             * @param form FormObject -- Its a field Object
             */
            private generateJsVisibleIfForm(form: FormObject): string{
                // Javascript string to be built
                let jsString = "";
                jsString+= this.strOperatorToAssert(form.operator) + this.getAttributeForm(form.attribute);
                return jsString;
            }
            
            /**
             * 
             * @param str
             */
            public getAttributeForm(str): string{
                let stri = "";
                switch(str){
                    case "anonymous":
                        stri = "this.local.anonymous";
                    break;
                }
                return stri;
            }
            
            
            /**
             * 
             * @param str
             */
            public strOperatorToAssert(str){
                let stri = "";
                switch(str){
                    case "equals":
                        stri = "";
                    break;
                    case "different":
                        stri = "!";
                    break;
                }
                return stri;
            }
        
            /**
             * 
             * @param str
             */
            public getcondVisibleToSign(str){
                let stri = "";
                switch(str){
                    case "and":
                        stri = "&&";
                    break;
                    case "or":
                        stri = "||";
                    break;
                }
                return stri;
            }
            /**
             * 
             * @param name
             */
            public getFormElementValueByName(name): string{
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        return this.formsSubmit[key].value;
                    }
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                return this.formsSubmit[key]["children"][keyChild].value;
                            }
                        }
                    }
                }
                return "";
            }
            
            /**
             * 
             * @param name
             */
            public getIdByName(name): string{
                for(let obj of this.formsList){
                    if(obj["type"] == "ion-card"){
                        let id = this.getIdByName(name);
                        if(id != ""){
                            return id;
                        }
                    }
                    else{
                        if(obj["name"] == name){
                            return obj["id"];
                        }
                    }
                }
                return "";
            }
            
            /**
             * 
             * @param name
             */
            public getFormCheckboxValueByName(name): Array<string>{
                let arrayStr: Array<string> = [];
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        for(let i in this.formsSubmit[key].children){
                            if(this.formsSubmit[key].children[i]["selected"]){
                                arrayStr.push(this.formsSubmit[key].children[i].value);  
                            }
                        }
                    }
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                for(let i in this.formsSubmit[key]["children"][keyChild].children){
                                    if(this.formsSubmit[key]["children"][keyChild].children[i]["selected"]){
                                        arrayStr.push(this.formsSubmit[key]["children"][keyChild].children[i].value);  
                                    }
                                }
                            }
                        }
                    }
                }
                return arrayStr;
            }
            
            /**
             * 
             * @param name
             */
            public getFormRadioGroupValueByName(name): Array<string>{
                let arrayStr: Array<string> = [];
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        for(let i in this.formsSubmit[key].children){
                            if(this.formsSubmit[key].children[i] != ""){
                                arrayStr.push(i+"_"+this.formsSubmit[key].children[i]);  
                            }
                        }
                    }
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                for(let i in this.formsSubmit[key]["children"][keyChild].children){
                                    if(this.formsSubmit[key]["children"][keyChild].children[i] != ""){
                                        arrayStr.push(i+"_"+this.formsSubmit[key]["children"][keyChild].children[i]);  
                                    }
                                }
                            }
                        }
                    }
                }
                return arrayStr;
            }
            
            /**
             * 
             * @param name
             */
            public getFormCheckboxGroupValueByName(name): Array<string>{
                let arrayStr: Array<string> = [];
                for(let key of Object.keys(this.formsSubmit)){
                    if(key == name){
                        for(let i in this.formsSubmit[key].children){
                            for(let j in this.formsSubmit[key].children[i]){
                                if(this.formsSubmit[key].children[i][j]["selected"]){
                                    arrayStr.push(i+"_"+this.formsSubmit[key].children[i][j].value);  
                                }
                            }
                        }
                    }
                    //this.formsSubmit[key]["children"][keyChild]
                    else if(this.formsSubmit[key].type == "ion-card"){
                        for(let keyChild of Object.keys(this.formsSubmit[key]["children"])){
                            if(keyChild == name){
                                for(let i in this.formsSubmit[key]["children"][keyChild].children){
                                    for(let j in this.formsSubmit[key]["children"][keyChild].children[i]){
                                        if(this.formsSubmit[key]["children"][keyChild].children[i][j]["selected"]){
                                            arrayStr.push(i+"_"+this.formsSubmit[key]["children"][keyChild].children[i][j].value);  
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return arrayStr;
            }
        
            /**
             * 
             * @param val
             */
            private getSimple(val: ValFieldObject ): string{
                const name = this.getNameById(val)
                return this.getFormElementValueByName(name);
            }
            
            /**
             * 
             * @param val
             */
            private getNameById(val: ValFieldObject | number): string{
                if(typeof(val) == ''number''){
                    for(let elem of this.form.formulaire){
                        if(elem.id == val){
                            return elem.name;
                        }
                        else if(elem.type == "ion-card"){
                            for(let child of elem["children"]){
                                if(child.id == val){
                                    return child.name;
                                }
                            }
                        }
                    }
                    return "";
                }
                else{
                    for(let elem of this.form.formulaire){
                        if(elem.id == val.str){
                            return elem.name;
                        }
                        else if(elem.type == "ion-card"){
                            for(let child of elem["children"]){
                                if(child.id == val.str){
                                    return child.name;
                                }
                            }
                        }
                    }
                    return "";
                }
                
            }
        
            
            
            /**
             * bind eval function
             * @param str
             */
            public eval(str){
                return eval(str);
            }
            
            /**
             * returns type of field (simple, multiple, file, or camSign)
             * @param type
             */
            public getType(type: string): string{
                if(this.local.multipleField[type] == true){
                    return "multiple";
                }
                else if(this.local.simpleField[type] == true){
                    return "simple";
                }
                else if(this.local.fileField[type] == true){
                    return "file";
                }
                else if(this.local.camSignField[type] == true){
                    return "camSign"; 
                }
                else{
                    return "";
                }
                
            }
            /*End_c8o_PageFunction*/
        '
segment: viewer/:formId/:edit/:i
title: Visualisateur
↓PageEvent [mobile.components.UIPageEvent-1537364954559]: 
  viewEvent: onWillEnter
  ↓Error_Handler [mobile.components.UIActionErrorEvent-1576602133134]: 
    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586424644097]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms.MobileApplication.Application.removeSpinner
  ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586254439607]: 
    beanData: '{"ionBean":"InvokeAction"}'
    stack: C8Oforms.MobileApplication.Application.setSpinner
  ↓getUrlParameters [mobile.components.UICustomAction-1570712319541]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		    this.global.debug = {};
            		    let formId = this.navParams.get('formId');
            		    let edit = this.navParams.get('edit');
            		    if(edit != undefined && edit != ":edit"){
            		        this.local.edit = edit;
            		    }
            		    this.local.formId = formId;
            		    if(formId != null && formId != ":formId"){
            		        
            		        resolve(true);
            		    }
            		    else{
            		        resolve(false);
            		    }		
            
    ↓ifFormIdIsDefined [mobile.components.UIDynamicIf-1570701884872]: 
      beanData: '{"ionBean":"IfElseAction"}'
      ↓IfEditingAResponse [mobile.components.UIDynamicIf-1572271164680]: 
        beanData: '{"ionBean":"IfElseAction","condition":"script:this.local.edit != undefined"}'
        ↓SyncFsResponses [mobile.components.UIDynamicAction-1576601220792]: 
          beanData: '{"ionBean":"FullSyncSyncAction","requestable":"plain:C8Oforms.c8oforms_response_fs"}'
          ↓GetResponseToEdit [mobile.components.UIDynamicAction-1576601220795]: 
            beanData: |
              '{
               "ionBean": "FullSyncGetAction",
               "requestable": "plain:C8Oforms.c8oforms_response_fs",
               "_id": "script:this.local?.edit"
              }'
            ↓setLocal [mobile.components.UICustomAction-1576601220798]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		page.local.respInit = props.out.resp;
                      		resolve();
                      
              ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586254658439]: 
                beanData: '{"ionBean":"InvokeAction"}'
                stack: C8Oforms.MobileApplication.Application.syncAndInvokeViewer
        ↓Else_Handler [mobile.components.UIActionElseEvent-1572271179176]: 
          ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1586254675310]: 
            beanData: '{"ionBean":"InvokeAction"}'
            stack: C8Oforms.MobileApplication.Application.syncAndInvokeViewer
          ↓SyncFsResponses [mobile.components.UIDynamicAction-1576601012769]: 
            beanData: '{"ionBean":"FullSyncSyncAction","requestable":"plain:C8Oforms.c8oforms_response_fs"}'
      ↓Else_Handler [mobile.components.UIActionElseEvent-1570701884980]: 
        ↓IfElse [mobile.components.UIDynamicIf-1593622945986]: 
          beanData: '{"ionBean":"IfElseAction","condition":"script:this.local.user != undefined || this.local.user != \":i\""}'
          ↓LoadFormanonymous [mobile.components.UICustomAction-1593622986245]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '		    page.local.user = this.navParams.get(''i'');
                    		    page.c8o.callJson(".getAnonymousForm", "login", page.local.user,"__disableAutologin", true)
                                .then((res: any)=>{
                                    let respInit = null;
                                    if(res.transaction.document.couchdb_output.rows[0] != undefined){
                                        let response = res.transaction.document.couchdb_output;
                                        if(response.rows != undefined){
                                            if(response.rows[0] != undefined){
                                                
                                                
                                                //
                                                
                                                var myIdP = response.rows[0].value.doc._id;
                                                const key = "_C8O_HIDDEN_" +  myIdP.substring(0, myIdP.indexOf("_anonymous"));
                                                page.local.grp[key] = true;
                                                page.local.formId = response.rows[0].value.doc._id;
                                                
                                                //
                                                page["local"]["_rev"] = response.rows[0].value.doc[''_rev''];
                                                page["form"] = response.rows[0].value.doc;
                                                page["formsList"] = response.rows[0].value.doc.formulaire;
                                                page["link"] = response.rows[0].value.doc["wallpaper"]["link"];
                                                try{
                                                    page["local"]["pages"] =  response.rows[0].value.doc["pages"]  
                                                    page["local"]["currentIndex"] = 0;
                                                }
                                                catch(e){
                                                    page["local"]["pages"] = undefined;
                                                    page["local"]["currentIndex"] = 0;
                                                }
                                                page.c8o.log.debug("CallViewLiveAndFillFormList: formsList object has been updated from live view");
                                                
                                                // load background image if we are in new support mode image
                                                if(response.rows[0].value.doc["wallpaper"]["enabled"] && page["form"]["wallpaper"]["type"] != undefined){
                                                    page.local.url = page.c8o.endpointConvertigo + "/fullsync/c8oforms_fs/"+page.form["_id"]+"/wallpaper";
                                                    page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                                    page.tick();
                                                    /*page.c8o.get_attachment(page["form"]["_id"], "wallpaper", "c8oforms_fs")
                                                    .then((res) => {
                                                        page.local.url = page.c8o.endpointConvertigo + "/fullsync/c8oforms_fs/"+page.form["_id"]+"wallpaper";
                                                        page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                                        page.tick();
                                                    }).catch((err) => {
                                                        page.c8o.log.error("Error loading wallpaper from local base", err);
                                                    }); */
                                                }
                                                else{
                                                    page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                                }
                                                let fillFormSubmit = (list, redList, formSubmit, response) => {
                                                    try  {
                                                        for(let item of list){
                                                            if(item["type"] == "ion-card"){
                                                                redList[item["name"]] = {};
                                                                formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "children":{}};
                                                                //redList[item["name"]]["children"] = [];
                                                                let res = response != undefined ? response[item["name"]]["children"] : null;
                                                                fillFormSubmit(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"], res);
                                                            }
                                                            else if(item["type"] == "text"){
                                                                let value = respInit == null ? "": response[item["name"]]["value"]; 
                                                                formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                            }
                                                            else if(item["type"] == "checkbox"){
                                                                formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                               
                                                                for(let child in item["children"]){
                                                                    let selected;
                                                                    try {
                                                                        selected = respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                                    }
                                                                    catch(e){
                                                                        
                                                                    }
                                                                    
                                                                    formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected, "other": item["children"][child].other});
                                                                }
                                                            }
                                                            else if(item["type"] == "radio" || item["type"] == "select"){
                                                                
                                                                formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                
                                                                    let defaultSelected ="";
                                                                    for(let child in item["children"]){
                                                                        let selected;
                                                                        try {
                                                                            selected = respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                                            if(selected){
                                                                                defaultSelected = respInit == null ? item["children"][child].value : response[item["name"]]["children"][child]["value"];
                                                                            }
                                                                        }
                                                                        catch(e){
                                                                            
                                                                        }
                                                                        
                                                                        formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected});
                                                                    }
                                                                    formSubmit[item["name"]]["value"] = defaultSelected;
                                                               
                                                                
                                                            }
                                                            else if(item["type"] == "slider" || item["type"] == "datetime" || item["type"] == "time" || item["type"] == "barcode" || item["type"] == "img" || item["type"] == "file"|| item["type"] == "signature"){
                                                                let value = respInit == null ? "": response[item["name"]]["value"]; 
                                                                formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["name"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                            }
                                                            else if(item["type"] == "radio_group"){
                                                                
                                                                formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, children_label:item["children"], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                for(let line of item.lines){
                                                                    let value = respInit == null ? "": response[item["name"]]["children"][line.title]; 
                                                                    formSubmit[item["name"]].children[line.title]= value;
                                                                }
                                                            }
                                                            else if(item["type"] == "checkbox_group"){
                                                                formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                                
                                                                for(let line of item.lines){
                                                                    formSubmit[item["name"]].children[line.title] = [];
                                                                    for(let child in item["children"]){
                                                                        let selected;
                                                                        try {
                                                                            selected = respInit == null ? item["children"][child].selected : response[item["name"]]["children"][line.title][child]["selected"];
                                                                        }
                                                                        catch(e){   
                                                                        }   
                                                                        formSubmit[item["name"]].children[line.title].push({"value": item["children"][child].value, "selected": selected});
                                                                    }
                                                                }
                                                            }
                                                            
                                                    };
                                                    }
                                                    catch(e){
                                                        console.log("error");
                                                        console.log(e);
                                                    }
                                                    
                                                }
                                                
                                                
                                                fillFormSubmit(page["formsList"], page["redList"], page["formsSubmit"], respInit); 
                                                
                                                // do stuff to support upload files
                                                if(page.global["__C8O_TODELETE"] == undefined){
                                                    page.global["__C8O_TODELETE"] = [];
                                                }
                                                let nullBefore = false;
                                                if(page.global[page["idFiles"]].length == 0){
                                                    nullBefore = true
                                                }
                                                for(let item of page["formsList"]){
                                                    if( item[''type''] == "file"){
                                                        if(page.global[page["idFiles"]][item["id"]] == null){
                                                            page.global[page["idFiles"]][item["id"]] = [];
                                                        }
                                                    }
                                                    if(item["type"] =="ion-card"){
                                                        for(let child of item["children"]){
                                                            if(child[''type''] == "file"){
                                                                if(page.global[page["idFiles"]][child["id"]] == null){
                                                                    page.global[page["idFiles"]][child["id"]] = [];
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                
                                                
                                                if(respInit == null){
                                                      resolve();        
                                                }
                                                else{
                                                    if(page.global["__C8O_TODELETE"] == undefined){
                                                        page.global["__C8O_TODELETE"] = [];
                                                    }
                                                    let nullBefore = false;
                                                    if(page.global[page["idFiles"]].length == 0){
                                                        nullBefore = true
                                                    }
                                                    for(let item of page["formsList"]){
                                                        if( item[''type''] == "file"){
                                                            if(page.global[page["idFiles"]][item["id"]] == null){
                                                                page.global[page["idFiles"]][item["id"]] = [];
                                                            }
                                                        }
                                                        if(item["type"] =="ion-card"){
                                                            for(let child of item["children"]){
                                                                if(child[''type''] == "file"){
                                                                    if(page.global[page["idFiles"]][child["id"]] == null){
                                                                        page.global[page["idFiles"]][child["id"]] = [];
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                        let att = response["_attachments"];
                                                        for(let item in att){
                                                            //first itemid
                                                            let itemid = item.substring(0, item.indexOf(''_C80C80_''));
                                                            //second namefile
                                                            let name = item.substring(item.indexOf(''_C80C80_'')+8,item.lastIndexOf(''_C80C80_''));
                                                            //synthax
                                                            if(page.global[page["idFiles"]][itemid] == null){
                                                                page.global[page["idFiles"]][itemid] = [];
                                                            }
                                                            if(nullBefore){
                                                                page.global[page["idFiles"]][itemid].push({name:name,path:item, deleted:false});
                                                            }
                                                        }
                                                        resolve();
                                                    
                                                    
                                                }
                                                
                                            }
                                        }
                                        //document  =  res.transaction.document.couchdb_output.rows[0].value.doc
                                    }
                                    else{
                                        window.location.href = ''./'';
                                        resolve(false);
                                        return null;
                                    }
                                    return null;
                                  
                                })
                                .fail((e)=>{
                                    debugger;
                                    console.log(e);
                                    window.location.href = ''./'';
                                    resolve(false);
                                })
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                    '
            ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1593701778492]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.removeSpinner
          ↓Else_Handler [mobile.components.UIActionElseEvent-1593622954755]: 
            ↓RootPage [mobile.components.UIDynamicAction-1572269500185]: 
              beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.selectorPage"}'
↓PageEvent1 [mobile.components.UIPageEvent-1547566899630]: 
  viewEvent: onCanEnter
  ↓CheckUser [mobile.components.UICustomAction-1572275202786]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		    if(page.c8o.session.status == C8oSessionStatus.Connected || page.c8o.session.status == C8oSessionStatus.HasBeenConnected){
                            resolve(true);
                        }
            		    const request = window["indexedDB"]["open"]("MyTestDatabase", 3);
                        request.onerror = (event)=> {
                            resolve(false);
                            setTimeout(()=>{
                                page.routerProvider.setRoot("loginPage", {page:''editorPage'', formId:page.local.formId}, null); 
                            }, 200);
                            return;
                          };
                          request.onsuccess = (event)=> {
            		    /*page.local.formId = this.navParams.get(''formId'');
            		    page.local.edit = this.navParams.get(''edit'');*/
            		    // Getting user status (whenever he is logged or not)
            		    page.local.formId = this.navParams.get(''formId'');
            		    
            		    page.local.published = page.local.formId != undefined ?page.local.formId.indexOf("published") != -1 ? true : false: false;
            		    page.local.user = this.navParams.get(''i'');
            		    // if we are in anonymous mode
            		    if(page.local.user != undefined && page.local.user != ":i"){ 	        
            		        page.local.grp = {};
            
                            page.local.anonymous = true;
                            resolve(true);
            		        
                            /*page.c8o.callJson(".login", "email", page.local.user, "password", page.local.user)
                            .then((res: any)=>{
                                if(res != "ko"){
                                    return page.c8o.callJson("fs://c8oforms_fs.sync"
                                    );
                                }
                                else{
                                    window.location.href = ''./'';
                                    resolve(false);
                                    return null;
                                }
                              
                            })
                            .then((res)=>{
                                
                              return page.c8o.callJson("fs://c8oforms_fs.view",
                                      "ddoc", "published_forms_anonymous",
                                      "view", "all"
                                  );
                            })
                            .then((res)=>{
                                const key = "_C8O_HIDDEN_" + res.rows[0].key.substring(0, res.rows[0].key.indexOf("_anonymous"));
                                page.local.grp = {};
                                page.local.grp[key] = true;
                               // page.local.user = res.user;
                                page.local.anonymous = true;
                                resolve(true);
                            })
                            .fail((e)=>{
                                console.log(e);
                                window.location.href = ''./'';
                                resolve(false);
                            });*/
            		    }
            		    else{
            		        page.c8o.httpInterface.getUserServiceStatus()
            	            .then((res)=>{
            	                if(res.user.length == 64 || res.user.authenticated == false){
                                    setTimeout(()=>{
                                        page.routerProvider.setRoot("loginPage", {page:''viewerPage'', formId:page.local.formId, edit:page.local.edit}, null); 
                                    }, 200);
                                    resolve(false);
                                }
                                else{
                                    page.local.user = res.user;
                                    resolve(true);
                                }
            	                    
            	            })
            	            .catch((err)=>{
            	                setTimeout(()=>{
            	                    page.routerProvider.setRoot("loginPage", {page:''viewerPage'', formId:page.local.formId, edit:page.local.edit}, null); 
            	                }, 200);
            	                resolve(false);
            	            })
            		    }
            		    
                       };
            		   /* this.local.debug = {};
                        let formId = this.navParams.get(''formId'');
                        if(formId != undefined){
                            this.local.formId = formId;
                            resolve(true);
                        }
                        else{
                            resolve(true);
                        }*/
                       
                        
            		/*
            		if(this.global.user == '''' || this.global.user == undefined){
            		    window.location.href = ''./'';
            		    resolve(false);
            		}
            		else{
            		    resolve(true);
            		}*/
            '
    page_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: C8oSessionStatus
              - java.lang.String: 
                - ↑value: c8osdkangular
↓Header [mobile.components.UIDynamicElement-1571856354963]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓Directive [mobile.components.UIControlDirective-1572552867684]: 
    directiveExpression: '!(this.local.published == true || this.local.anonymous == true)'
    directiveName: If
    ↓UseSharedComponent [mobile.components.UIUseShared-1571856416149]: 
      sharedcomponent: C8Oforms.MobileApplication.Application.sharedHeaderViewer
↓Content [mobile.components.UIDynamicElement-1537435548501]: 
  beanData: '{"ionBean":"Content","IonPadding":"plain:false"}'
  comment: Page content
  tagName: ion-content
  ↓Attr [mobile.components.UIAttribute-1543509288894]: 
    attrName: '[style.background-repeat]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:no-repeat
  ↓Attr1 [mobile.components.UIAttribute-1543509369804]: 
    attrName: '[style.background-size]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:cover
  ↓Attr21 [mobile.components.UIAttribute-1545226048588]: 
    attrName: '[ngStyle]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: 'script:{''background-image'': this.enabled == true ? (this.form.wallpaper[''type''] != undefined ? ''url(''+this.local.url+'')'' : ''url('' + this.link+ '')'') : ''''}'
  ↓Attr11 [mobile.components.UIAttribute-1571141618057]: 
    attrName: '[ngClass]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:'themeVizu'
  ↓Style [mobile.components.UIStyle-1571143195258]: 
    isEnabled: false
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '$text-input-highlight-color-valid: #ffffff !global;
            '
  ↓Directive [mobile.components.UIControlDirective-1576510500502]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.local.finished
    ↓Grid [mobile.components.UIDynamicElement-1543345620685]: 
      beanData: '{"ionBean":"Grid"}'
      tagName: ion-grid
      ↓GridRow [mobile.components.UIDynamicElement-1543345633316]: 
        beanData: '{"ionBean":"GridRow"}'
        tagName: ion-row
        ↓GridCol [mobile.components.UIDynamicElement-1543345636494]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
        ↓GridCol1 [mobile.components.UIDynamicElement-1543345638252]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsXSmall": "plain:12",
             "ColumnsSmall": "plain:12",
             "ColumnsMedium": "plain:10",
             "ColumnsLarge": "plain:8",
             "ColumnsXLarge": "plain:4"
            }'
          tagName: ion-col
          ↓Directive21 [mobile.components.UIControlDirective-1593770170775]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.anonymous == true
            ↓TextFormat [mobile.components.UIDynamicElement-1593770170778]: 
              beanData: '{"ionBean":"TextFormat","TextCenter":"plain:text-center"}'
              tagName: div
              ↓Badge [mobile.components.UIDynamicElement-1593770170781]: 
                beanData: '{"ionBean":"Badge","IonColor":"plain:btLight"}'
                tagName: ion-badge
                ↓Text [mobile.components.UIText-1593770170784]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Anonymous_Form
                ↓Style [mobile.components.UIStyle-1593770170787]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'position:absolute;
                          top:0;
                          right: 5px;;
                          border-radius: 10px;
                          '
          ↓Directive2 [mobile.components.UIControlDirective-1593769984818]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.published == true
            ↓TextFormat [mobile.components.UIDynamicElement-1593769838195]: 
              beanData: '{"ionBean":"TextFormat","TextCenter":"plain:text-center"}'
              tagName: div
              ↓Badge [mobile.components.UIDynamicElement-1593769815371]: 
                beanData: '{"ionBean":"Badge","IonColor":"plain:btLight"}'
                tagName: ion-badge
                ↓Text [mobile.components.UIText-1593769826956]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Published_Form
                ↓Style [mobile.components.UIStyle-1593769900491]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'position:absolute;
                          top:0;
                          right: 5px;;
                          border-radius: 10px;
                          '
          ↓Div [mobile.components.UIDynamicElement-1584610356623]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Style [mobile.components.UIStyle-1584610376264]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'background-color: rgba(255,255,255,0.95) !important;
                      border-radius: 8px;
                      
                      '
            ↓Directive3 [mobile.components.UIControlDirective-1584610404185]: 
              directiveExpression: form.namePosition == 'text-center'
              directiveName: If
              ↓Div [mobile.components.UIDynamicElement-1584610404188]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1584610404191]: 
                  attrName: '[attr.text-center]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:true
                ↓TextFormat [mobile.components.UIDynamicElement-1584610404194]: 
                  beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                  tagName: div
                  ↓Text [mobile.components.UIText-1584610404197]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.form.name
                  ↓Style [mobile.components.UIStyle-1584610404200]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            'font-size: 34px;
                            '
            ↓Directive11 [mobile.components.UIControlDirective-1584610404203]: 
              directiveExpression: form.namePosition == 'text-left'
              directiveName: If
              ↓Div [mobile.components.UIDynamicElement-1584610404206]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1584610404209]: 
                  attrName: '[attr.text-left]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:true
                ↓TextFormat [mobile.components.UIDynamicElement-1584610404212]: 
                  beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                  tagName: div
                  ↓Text [mobile.components.UIText-1584610404215]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.form.name
                  ↓Style [mobile.components.UIStyle-1584610404218]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            'font-size: 34px;
                            '
            ↓Directive21 [mobile.components.UIControlDirective-1584610404221]: 
              directiveExpression: form.namePosition == 'text-right'
              directiveName: If
              ↓Div [mobile.components.UIDynamicElement-1584610404224]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1584610404227]: 
                  attrName: '[attr.text-right]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:true
                ↓TextFormat [mobile.components.UIDynamicElement-1584610404230]: 
                  beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                  tagName: div
                  ↓Text [mobile.components.UIText-1584610404233]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.form.name
                  ↓Style [mobile.components.UIStyle-1584610404236]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            'font-size: 34px;
                            '
            ↓Directive1 [mobile.components.UIControlDirective-1584610404239]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.pages == undefined && this.form.descform != ''
              ↓Div [mobile.components.UIDynamicElement-1584610404353]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr1 [mobile.components.UIAttribute-1584610404356]: 
                  attrName: '[innerHTML]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.router.sanitizer.bypassSecurityTrustHtml(this.form.descform)
                ↓Attr2 [mobile.components.UIAttribute-1584626454040]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:['styledivnormal']
                ↓Style [mobile.components.UIStyle-1584627079486]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	padding-bottom:13px !important;	
                          
            ↓Attr2 [mobile.components.UIAttribute-1584610445587]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:['card', 'card-md']
            ↓Directive12 [mobile.components.UIControlDirective-1592563520001]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.local.pages != undefined && this.form.pages[this['local']['currentIndex']].desc != ''
              ↓Div [mobile.components.UIDynamicElement-1592563520004]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr1 [mobile.components.UIAttribute-1592563520007]: 
                  attrName: '[innerHTML]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.router.sanitizer.bypassSecurityTrustHtml(this.form.pages[this['local']['currentIndex']].desc)
                ↓Attr2 [mobile.components.UIAttribute-1592563520010]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:['styledivnormal']
                ↓Style [mobile.components.UIStyle-1592563520013]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	padding-bottom:13px !important;	
                          
          ↓Attr [mobile.components.UIAttribute-1543864506194]: 
            attrName: '[style.background-color]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:#fff
            isEnabled: false
          ↓Directive [mobile.components.UIControlDirective-1543865083865]: 
            directiveExpression: let i = index
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:let item of this.formsList
            ↓Directive [mobile.components.UIControlDirective-1586530752522]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:item.cat == undefined
              ↓Directive1 [mobile.components.UIControlDirective-1592514000964]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local.pages == undefined  || (this.local.pages[this.local.currentIndex]['pageTechName'] == item.config.page)
                ↓Directive [mobile.components.UIControlDirective-1588846603623]: 
                  directiveName: Switch
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:item.type
                  ↓DivCard [mobile.components.UIDynamicElement-1586265611980]: 
                    beanData: '{"ionBean":"DivTag"}'
                    tagName: div
                    ↓Attr2 [mobile.components.UIAttribute-1586265635235]: 
                      attrName: '[ngClass]'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:['card', 'card-md']
                    ↓Style [mobile.components.UIStyle-1586265647519]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              'background-color: rgba(255,255,255,0.95);
                              border-radius: 8px;
                              
                              '
                    ↓Attr [mobile.components.UIAttribute-1586265658284]: 
                      attrName: '*ngIf'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: 'plain:item.type != ''ion-card'' && item.conditions != undefined  ? this.eval(this.evaluateConditions(item.conditions)): item.type != ''ion-card'' '
                    ↓DivContentInnerHTML [mobile.components.UIDynamicElement-1586265727271]: 
                      beanData: '{"ionBean":"DivTag"}'
                      tagName: div
                      ↓Attr2 [mobile.components.UIAttribute-1586265841305]: 
                        attrName: '[ngClass]'
                        attrValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:['styledivnormal']
                      ↓Style [mobile.components.UIStyle-1586265928118]: 
                        styleContent: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                padding-bottom:10px;
                                padding-top:10px;
                                
                      ↓Directive1 [mobile.components.UIControlDirective-1588846642198]: 
                        directiveExpression: '''text'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent [mobile.components.UIUseShared-1588846642201]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemTextViewer
                          ↓item [mobile.components.UIControlVariable-1588846642204]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓this [mobile.components.UIControlVariable-1588846642207]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this
                          ↓model [mobile.components.UIControlVariable-1588846642210]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642213]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive11 [mobile.components.UIControlDirective-1588846642216]: 
                        directiveExpression: '''ion-title'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent3 [mobile.components.UIUseShared-1588846642219]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemTitleViewver
                          ↓item [mobile.components.UIControlVariable-1588846642222]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642225]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                      ↓Directive2 [mobile.components.UIControlDirective-1588846642228]: 
                        directiveExpression: '''ion-label'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent4 [mobile.components.UIUseShared-1588846642231]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemLabelViewver
                          ↓item [mobile.components.UIControlVariable-1588846642234]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642237]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                      ↓Directive3 [mobile.components.UIControlDirective-1588846642240]: 
                        directiveExpression: '''checkbox'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent2 [mobile.components.UIUseShared-1588846642243]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemCheckboxViewer
                          ↓item [mobile.components.UIControlVariable-1588846642246]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642249]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642252]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive4 [mobile.components.UIControlDirective-1588846642255]: 
                        directiveExpression: '''radio'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent811 [mobile.components.UIUseShared-1588846642258]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemRadioViewver
                          ↓item [mobile.components.UIControlVariable-1588846642261]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642264]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642267]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive5 [mobile.components.UIControlDirective-1588846642270]: 
                        directiveExpression: '''slider'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent8 [mobile.components.UIUseShared-1588846642273]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemSliderViewver
                          ↓item [mobile.components.UIControlVariable-1588846642276]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642279]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642282]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive51 [mobile.components.UIControlDirective-1588846642285]: 
                        directiveExpression: '''select'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent81 [mobile.components.UIUseShared-1588846642288]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemSelectViewver
                          ↓item [mobile.components.UIControlVariable-1588846642291]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642294]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642297]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive52 [mobile.components.UIControlDirective-1588846642300]: 
                        directiveExpression: '''datetime'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent5 [mobile.components.UIUseShared-1588846642303]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemDateTimeViewver
                          ↓item [mobile.components.UIControlVariable-1588846642306]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642309]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642312]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive53 [mobile.components.UIControlDirective-1588846642315]: 
                        directiveExpression: '''time'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent51 [mobile.components.UIUseShared-1588846642318]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemTimeViewver
                          ↓item [mobile.components.UIControlVariable-1588846642321]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642324]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642327]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive54 [mobile.components.UIControlDirective-1588846642330]: 
                        directiveExpression: '''img'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent1 [mobile.components.UIUseShared-1588846642333]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemImgViewer
                          ↓item [mobile.components.UIControlVariable-1588846642336]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642339]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642342]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive55 [mobile.components.UIControlDirective-1588846642345]: 
                        directiveExpression: '''barcode'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent7 [mobile.components.UIUseShared-1588846642348]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemBarcodeViewver
                          ↓item [mobile.components.UIControlVariable-1588846642351]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642354]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642357]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive56 [mobile.components.UIControlDirective-1588846642360]: 
                        directiveExpression: '''file'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent8111 [mobile.components.UIUseShared-1588846642363]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemFileViewver
                          ↓item [mobile.components.UIControlVariable-1588846642366]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642369]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642372]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                          ↓idFiles [mobile.components.UIControlVariable-1588846642375]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.idFiles
                      ↓Directive561 [mobile.components.UIControlDirective-1588846642378]: 
                        directiveExpression: '''signature'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent6 [mobile.components.UIUseShared-1588846642381]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemSignatureViewver
                          ↓item [mobile.components.UIControlVariable-1588846642384]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642387]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642390]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                      ↓Directive562 [mobile.components.UIControlDirective-1588846642393]: 
                        directiveExpression: '''radio_group'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent8112 [mobile.components.UIUseShared-1588846642396]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemRadioGroupViewver
                          ↓item [mobile.components.UIControlVariable-1588846642399]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642402]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642405]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                          ↓ix [mobile.components.UIControlVariable-1588846642408]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:i
                      ↓Directive563 [mobile.components.UIControlDirective-1588846642411]: 
                        directiveExpression: '''checkbox_group'''
                        directiveName: SwitchCase
                        ↓UseSharedComponent21 [mobile.components.UIUseShared-1588846642414]: 
                          sharedcomponent: C8Oforms.MobileApplication.Application.itemCheckboxGroupViewer
                          ↓item [mobile.components.UIControlVariable-1588846642417]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:item
                          ↓model [mobile.components.UIControlVariable-1588846642420]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                          ↓redList [mobile.components.UIControlVariable-1588846642423]: 
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:this.redList[item['name']]
                          ↓disabled [mobile.components.UIControlVariable-1588846642426]: 
                            comment: this.formsSubmit[item['name']]
                            varValue: 
                              - xmlizable: 
                                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                                - MobileSmartSourceType: script:false
                    ↓Attr3 [mobile.components.UIAttribute-1595318992688]: 
                      attrName: '*ngIf'
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:
                      isEnabled: false
                  ↓Directive [mobile.components.UIControlDirective-1588846710912]: 
                    directiveExpression: '''ion-card'''
                    directiveName: SwitchCase
                    ↓Div [mobile.components.UIDynamicElement-1580402859499]: 
                      beanData: '{"ionBean":"DivTag"}'
                      tagName: div
                      ↓UseSharedComponent81111 [mobile.components.UIUseShared-1580402859676]: 
                        sharedcomponent: C8Oforms.MobileApplication.Application.itemCardViewer
                        ↓item [mobile.components.UIControlVariable-1580402859679]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:item
                        ↓model [mobile.components.UIControlVariable-1580402859682]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:this.formsSubmit[item['name']]
                        ↓redList [mobile.components.UIControlVariable-1580402859685]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:this.redList[item['name']]
                        ↓this [mobile.components.UIControlVariable-1580402859688]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:this
          ↓Directive1 [mobile.components.UIControlDirective-1592514107460]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local.pages != undefined && (this.local.currentIndex < this.local.pages.length -1) else ElseBlock_1592514238339
            ↓GenericItemButtonSubmit [mobile.components.UIDynamicElement-1592514301607]: 
              beanData: '{"ionBean":"GenericItem"}'
              tagName: ion-item
              ↓Style [mobile.components.UIStyle-1592514301610]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'background-color: transparent;
                        .item-inner{
                        	border: 0px !important;
                        }
                        
                        
                        '
              ↓Submit [mobile.components.UIDynamicElement-1592514301613]: 
                beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:right"}'
                tagName: ion-buttons
                ↓Submit [mobile.components.UIDynamicElement-1592514301616]: 
                  beanData: '{"ionBean":"Button"}'
                  isEnabled: false
                  tagName: button
                  ↓Event [mobile.components.UIControlEvent-1592514301619]: 
                    attrName: (click)
                    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1592514301622]: 
                      beanData: '{"ionBean":"InvokeAction"}'
                      stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                  ↓Text [mobile.components.UIText-1592514301625]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:'send'| translate
                ↓Directive [mobile.components.UIControlDirective-1592514910340]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.local.currentIndex > 0
                  ↓Button1 [mobile.components.UIDynamicElement-1592514849445]: 
                    beanData: '{"ionBean":"Button"}'
                    tagName: button
                    ↓Event [mobile.components.UIControlEvent-1592514849448]: 
                      attrName: (click)
                      ↓CustomAction [mobile.components.UICustomAction-1592514849451]: 
                        actionValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                		page["local"]["currentIndex"] --;
                                		resolve();
                                
                    ↓Text [mobile.components.UIText-1592514849454]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:previous
                    ↓Attr [mobile.components.UIAttribute-1592514849457]: 
                      attrName: 
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:item-start
                ↓Button [mobile.components.UIDynamicElement-1592514320843]: 
                  beanData: '{"ionBean":"Button"}'
                  tagName: button
                  ↓Event [mobile.components.UIControlEvent-1592514327067]: 
                    attrName: (click)
                    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1592831695091]: 
                      beanData: '{"ionBean":"InvokeAction"}'
                      stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                      ↓indexPage [mobile.components.UIControlVariable-1592831706018]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:this.local.currentIndex
                      ↓pages [mobile.components.UIControlVariable-1592831706020]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:this.local.pages
                      ↓doAll [mobile.components.UIControlVariable-1592831706022]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:false
                      ↓CustomAction [mobile.components.UICustomAction-1592514345220]: 
                        actionValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                		if(vars.next){
                                		    page["local"]["currentIndex"] ++;
                                		}
                                		
                                		resolve();
                                
                        ↓next [mobile.components.UIControlVariable-1592831722010]: 
                          varValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                              - MobileSmartSourceType: script:parent.out.nextPage
                  ↓Text [mobile.components.UIText-1592514373643]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:next
          ↓Tag [mobile.components.UIElement-1592514238339]: 
            identifier: ElseBlock_1592514238339
            tagName: ng-template
            ↓GenericItemButtonSubmit [mobile.components.UIDynamicElement-1544464002619]: 
              beanData: '{"ionBean":"GenericItem"}'
              tagName: ion-item
              ↓Style [mobile.components.UIStyle-1544464099962]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'background-color: transparent;
                        .item-inner{
                        	border: 0px !important;
                        }
                        
                        
                        '
              ↓Submit [mobile.components.UIDynamicElement-1543865084768]: 
                beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:right"}'
                tagName: ion-buttons
                ↓Directive [mobile.components.UIControlDirective-1592514986401]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.local.currentIndex != 0
                  ↓Button1 [mobile.components.UIDynamicElement-1592514986404]: 
                    beanData: '{"ionBean":"Button"}'
                    tagName: button
                    ↓Event [mobile.components.UIControlEvent-1592514986407]: 
                      attrName: (click)
                      ↓CustomAction [mobile.components.UICustomAction-1592514986410]: 
                        actionValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                		page["local"]["currentIndex"] --;
                                		resolve();
                                
                    ↓Text [mobile.components.UIText-1592514986413]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:previous
                    ↓Attr [mobile.components.UIAttribute-1592514986416]: 
                      attrName: 
                      attrValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:item-start
                ↓Submit [mobile.components.UIDynamicElement-1543865084771]: 
                  beanData: '{"ionBean":"Button"}'
                  tagName: button
                  ↓Event [mobile.components.UIControlEvent-1543865084774]: 
                    attrName: (click)
                    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1576332679592]: 
                      beanData: '{"ionBean":"InvokeAction"}'
                      stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPage
                  ↓Text [mobile.components.UIText-1543865084789]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:'send'| translate
        ↓GridCol2 [mobile.components.UIDynamicElement-1543345640046]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
      ↓Attr [mobile.components.UIAttribute-1576600098505]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == false
    ↓Grid1Spinner [mobile.components.UIDynamicElement-1576600108253]: 
      beanData: '{"ionBean":"Grid"}'
      tagName: ion-grid
      ↓GridRow [mobile.components.UIDynamicElement-1576600108256]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "Height": "plain:height:100%",
           "AlignItemsCenter": "plain:align-items-center",
           "JustifyContentCenter": "plain:justify-content-center"
          }'
        tagName: ion-row
        ↓GridCol [mobile.components.UIDynamicElement-1576600108259]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "AlignItemsCenter": "plain:align-self-center",
             "Columns": "plain:12"
            }'
          tagName: ion-col
          ↓Div [mobile.components.UIDynamicElement-1576600108262]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓FragmentSpinner [mobile.components.UICustom-1576600108265]: 
              htmlTemplate: <div  class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            ↓Style [mobile.components.UIStyle-1576600108268]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      text-align:center;
                      
      ↓Attr [mobile.components.UIAttribute-1576600108271]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:this.local.spinner == true
      ↓Style [mobile.components.UIStyle-1576600108274]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                height:100%;
                
  ↓Directive1 [mobile.components.UIControlDirective-1576510583186]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.local.finished
    ↓Grid [mobile.components.UIDynamicElement-1576510607811]: 
      beanData: '{"ionBean":"Grid","Height":"plain:height:100%"}'
      tagName: ion-grid
      ↓GridRow [mobile.components.UIDynamicElement-1576510612660]: 
        beanData: |
          '{
           "ionBean": "GridRow",
           "AlignItemsCenter": "plain:align-items-center",
           "JustifyContentCenter": "plain:justify-content-center"
          }'
        tagName: ion-row
        ↓GridCol [mobile.components.UIDynamicElement-1576510671475]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsMedium": "plain:1",
             "ColumnsLarge": "plain:2",
             "ColumnsXLarge": "plain:4"
            }'
          tagName: ion-col
        ↓GridCol1 [mobile.components.UIDynamicElement-1576510671478]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsXSmall": "plain:12",
             "ColumnsSmall": "plain:12",
             "ColumnsMedium": "plain:10",
             "ColumnsLarge": "plain:8",
             "ColumnsXLarge": "plain:4"
            }'
          tagName: ion-col
          ↓CardContainer [mobile.components.UIDynamicElement-1576510790267]: 
            beanData: '{"ionBean":"Card"}'
            tagName: ion-card
            ↓CardContent [mobile.components.UIDynamicElement-1576510820428]: 
              beanData: '{"ionBean":"CardContent"}'
              tagName: ion-card-content
              ↓Div [mobile.components.UIDynamicElement-1576510855715]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1576510855718]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓TextFormat [mobile.components.UIDynamicElement-1576510855721]: 
                  beanData: '{"ionBean":"TextFormat","TextWrap":"plain:text-wrap"}'
                  tagName: div
                  ↓Text [mobile.components.UIText-1576510855724]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.form.name
                  ↓Style [mobile.components.UIStyle-1576510855727]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            'font-size: 34px;
                            '
              ↓Div1 [mobile.components.UIDynamicElement-1576511328850]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1576511328853]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓TextFormat [mobile.components.UIDynamicElement-1576511149483]: 
                  beanData: '{"ionBean":"TextFormat"}'
                  tagName: div
                  ↓Text [mobile.components.UIText-1576511154355]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:'responseSubmited' | translate
              ↓Div2 [mobile.components.UIDynamicElement-1576511345379]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Attr [mobile.components.UIAttribute-1576511345382]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:'styledivnormal'
                ↓TextFormat1 [mobile.components.UIDynamicElement-1576511158864]: 
                  beanData: '{"ionBean":"TextFormat"}'
                  tagName: div
                  ↓Text [mobile.components.UIText-1576511158867]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:'sendAnotherResponse' | translate
                  ↓Style [mobile.components.UIStyle-1576511489092]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '/* Mot de passe oublié: */
                            font-family: Helvetica !important;
                            text-decoration: underline;
                            
                            color: #048EAE !important;
                            }
                            .class1576511158864:hover {
                            /* Mot de passe oublié: */
                            cursor: pointer;
                            '
                  ↓Event [mobile.components.UIControlEvent-1576512340956]: 
                    attrName: (click)
                    ↓RootPage [mobile.components.UIDynamicAction-1576512357796]: 
                      beanData: |
                        '{
                         "ionBean": "RootPageAction",
                         "page": "plain:C8Oforms.MobileApplication.Application.viewerPage",
                         "data": "script:{i: this[''navParams''][''get''](''i'')}"
                        }'
                ↓Tag [mobile.components.UIElement-1576511489080]: 
                  isEnabled: false
                  tagName: a
                  ↓Paragraph [mobile.components.UIDynamicElement-1576511489083]: 
                    beanData: '{"ionBean":"Paragraph"}'
                    tagName: p
                    ↓Text [mobile.components.UIText-1576511489086]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:'sendAnotherResponse' | translate
                  ↓Attr [mobile.components.UIAttribute-1576511489089]: 
                    attrName: href
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:window.location.href
        ↓GridCol2 [mobile.components.UIDynamicElement-1576510675780]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "ColumnsMedium": "plain:1",
             "ColumnsLarge": "plain:2",
             "ColumnsXLarge": "plain:4"
            }'
          tagName: ion-col
  ↓Attr2 [mobile.components.UIAttribute-1586248761698]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:myContent