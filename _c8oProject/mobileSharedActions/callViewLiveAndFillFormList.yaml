comment: Process a tick (Refresh define in caf)
↓DoCallViewLiveAndFillFormList [ngx.components.UICustomAction-1567094239810]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '			if(page["pageOwner"] != undefined){
          				page = page["pageOwner"];
          			}
          			new Promise(async (resolveAsync) => {
          				page.local.count = 0;
          				let countFolders = 0;
          				let countOut = 0;
          				let view = page.local["view"] != undefined ? page.local["view"] : "formulaires";
          				let ddoc = page.local["ddoc"] != undefined ? page.local["ddoc"] : (page.local.published ? "published_formsV2" : "formsV2");
          				page["local"].response2Array = [];
          				page["local"].response2ArrayForms = []
          				page["list"] = [];
          				page.local.hash = undefined;
          				page.local.hashFolders = undefined;
          				page.local.count = undefined;
          				let execQuery = () => {
          					// if we are inside a folder
          					if (page.local.folder != "") {
          			
          						page.c8o.callJsonObject("C8Oforms.APIV2_ExecuteView", { target: page.local["ddoc"] + "/in_folders", "acl": true, dynamicParams: JSON.stringify({ folder: page.local.folder }) })
          							.then((response: any, parameters: any) => {
          								page.local.count = response.res.docs.length;
          								page.local.alreadyFinished = true;
          								page.local.spinner = false;
          								page.ref.detectChanges();
          								setTimeout(() => {
          									page["list"] = response.res.docs;
          									if (page.local.done) {
          										page["viewport"].setRenderedRange({ start: 0, end: (page["viewport"].getRenderedRange()).end + 1 });
          									}
          									else {
          										page.local.done = true;
          									}
          								});
          								return null;
          							})
          							.fail((error) => {
          								page.c8o.log.error("[DoCallViewLiveAndFillFormList] an error occured " + JSON.stringify(error));
          							})
          					}
          					// if we are not into a folder
          					else {
          						// view for documents inside of folder
          			
          						page.c8o.callJsonObject("C8Oforms.APIV2_ExecuteView", { target: page.local["ddoc"] + "/out_folder", "acl": true, dynamicParams: JSON.stringify({ folder: page.local.folder }) })
          							.then((response: any, parameters: any) => {
          								page.local.count = response.res.docs.length;
          								page.local.alreadyFinished = true;
          								page.local.spinner = false;
          								page.ref.detectChanges();
          								setTimeout(() => {
          									page["list"] = response.res.docs;
          									if (page.local.done) {
          										page["viewport"].setRenderedRange({ start: 0, end: (page["viewport"].getRenderedRange()).end + 1 });
          									}
          									else {
          										page.local.done = true;
          									}
          								});
          								return null;
          							})
          							.fail((error) => {
          								page.c8o.log.error("[DoCallViewLiveAndFillFormList] an error occured " + JSON.stringify(error));
          							})
          					}
          				}
          				execQuery();
          				// live changes
          				let p = Pouch["default"];
          				window["p"] = p;
          				const header = {
          					"x-convertigo-sdk": page.c8o.sdkVersion,
          				};
          				if (page.c8o.xsrfUsed) {
          					const headerName = "x-xsrf-token";
          					const fetch = "Fetch";
          					header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;
          				}
          				Object.assign(header, page.c8o.headers);
          				let remotePouchHeader = {
          					fetch: (url, opts) => {
          						opts.credentials = ''include'';
          						for (let key in header) {
          							opts.headers.set(key, header[key]);
          						}
          						var fecthPouch: Promise<Response> = p.fetch(url, opts);
          						fecthPouch.then((response) => {
          							page.c8o.session.sort(response, header, null, null, null);
          						})
          							.catch((e) => {
          			
          							});
          						return fecthPouch;
          					}
          				};
          				let isValidTimestamp = (value)=> {
          					try{
          						const timestamp = parseInt(value, 10); // Convertir la valeur en nombre entier en base 10
          					    const date = new Date(timestamp);
          					    // Vérifier si le timestamp est un nombre, si la date est valide et si le timestamp est positif
          					    return !isNaN(timestamp) && !isNaN(date.getTime()) && timestamp >= 0;
          					}
          					catch(e){
          						return false;
          					}
          				    
          				}
          				let isValidPublishTimestamp = (value)=> {
          					try{
          						let arg1 = value.substring(0,10);
          						if(arg1 != "published_"){
          							return false;
          						}
          						value = value.substring(10);
          						const timestamp = parseInt(value, 10); // Convertir la valeur en nombre entier en base 10
          					    const date = new Date(timestamp);
          					    // Vérifier si le timestamp est un nombre, si la date est valide et si le timestamp est positif
          					    return !isNaN(timestamp) && !isNaN(date.getTime()) && timestamp >= 0;
          					}
          					catch(e){
          						return false;
          					}
          				    
          				}
          				let dbChanges = new p("http://localhost:18080/convertigo/fullsync/c8oforms_fs", remotePouchHeader);
          				page.local.live = dbChanges.changes({
          					live: true, since: ''now''
          				})
          				.on(''change'', function (change) {
          					// handle change
          					if(page.local["ddoc"] == "formsV2" && isValidTimestamp(change.id)){
          						console.log("its current id")
          						execQuery();
          					}
          					else if(page.local["ddoc"] == "published_formsV2" && isValidPublishTimestamp(change.id)){
          						console.log("its current published id");
          						execQuery();
          					}
          				}).on(''complete'', function (info) {
          					console.log("complete", info);
          				}).on(''error'', function (err) {
          					console.log("error", err);
          				});
          				// end lives changes
          			});
          '
  package_dependencies: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: js-sha256
            - java.lang.String: 
              - ↑value: 0.9.0
  page_ts_imports: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: sha256
            - java.lang.String: 
              - ↑value: js-sha256
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: '* as Pouch'
            - java.lang.String: 
              - ↑value: pouchdb-browser
↓keys [ngx.components.UIStackVariable-1567094333170]: 