comment: Process a tick (Refresh define in caf)
↓DoCallViewLiveAndFillFormList [mobile.components.UICustomAction-1567094239810]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    let view = page.local["view"] != undefined ? page.local["view"] : "formulaires";
          		    let ddoc = page.local["ddoc"] != undefined ? page.local["ddoc"] : "forms";
          		    if(page.local.published){
          		        ddoc = "published_forms";
          		    }
          		    let objQ = {};
          		    if(vars.query == true){
          		        let startkey = page["query"].toLowerCase();
          		        let endkey = page["query"].toLowerCase()+"\ufff0";
          		        objQ = {
          	                    "ddoc": ddoc,
          	                    "view": view,
          	                    "__live": "viewLiveSelector",
          	                    startkey:startkey,
          		                endkey:endkey,
          	                    "include_docs": true
          	                    };
          		    }
          		    else{
          		        
          		        if(page.local.folder != ""){
          		            objQ = {
                                      "ddoc": ddoc,
                                      "view": "byFolderNoReduce",
                                      "__live": "viewLiveSelector",
                                      keys:[page.local.folder],
                                      reduce:false
                                      
                                  };
          		        }
          		        else{
          		            objQ = {
          	                        "ddoc": ddoc,
          	                        "view": view,
          	                        "__live": "viewLiveSelector",
          	                        "keys": vars.keys,
          	                        "descending": true
          	                        };
          		        }
          		        
          		    }
          		    let response;
          		    page.c8o.callJsonObject("fs://c8oforms_fs.view",objQ)
                          .then((response1: any, parameters)=>{
                              response = response1;
                              if(page.local.folder != ""){
                                  if(response1.rows.length == 0){
                                      page.router.setRoot("selectorPage", null, null);
                                      return null;
                                  }
                              }
                              
                              let ObjParams = {
                                      "ddoc": ddoc,
                                      "view": "byFolder",
                                      "__live": "viewLiveSelector2",
                                      "reduce": true,
                                      "group": true
                                      
                                  };
                              return page.c8o.callJsonObject("fs://c8oforms_fs.view",ObjParams);
                          })
                          .then((response2: any, params2: any)=>{
                              page.local.response2Array = [];
                              page.local.response2 = {};
                              if(page.local.folder == ""){
                              let val={};
                              response2.rows.forEach((cur)=>{
                                  val[cur.key] = cur.value;
                              });
                              page.local.response2Array = response2.rows;
                              page.local.response2 = val
                              console.log("response2", response2)
                              }
                           // will be call now and after each database update
                              if(response.rows != undefined){
                                  if(response.rows[0] != undefined){
                                      if(page.local.tag == true){
                                          let tagDefined = !(page.local.tags == undefined || page.local.tags["length"] == 0);
                                          let subTagDefined = !(page.local.subTags == undefined || page.local.subTags["length"] == 0);
                                          if(!tagDefined && !subTagDefined){
                                              page["list"] = response.rows;
                                              page["tick"]();
                                              page.local.spinner = false;
                                              resolve();
                                          }
                                          else{
                                              let res = response.rows;
                                              if(tagDefined){
                                                  let funcFiltre = (el)=>{
                                                      for(let filter of page.local.tags){
                                                          if(el["value"]["doc"]["tag"] != undefined){
                                                              if(JSON.parse(el["value"]["doc"]["tag"]).indexOf(filter) != -1){
                                                                  return true;
                                                              }
                                                          }
                                                      }
                                                      return false;
                                                      
                                                  };
                                                  res = res.filter(el => funcFiltre(el));
                                              }
                                              if(subTagDefined){
                                                  let funcFiltre = (el)=>{
                                                      for(let filter of page.local.subTags){
                                                          if(el["value"]["doc"]["subTag"] != undefined){
                                                              if(JSON.parse(el["value"]["doc"]["subTag"]).indexOf(filter) != -1){
                                                                  return true;
                                                              }
                                                          }
                                                      }
                                                      return false;
                                                      
                                                  };
                                                  res = res.filter(el => funcFiltre(el));
                                              }
                                              
                                              page["list"] = res;
                                              page["tick"]();
                                              page.local.spinner = false;
                                              resolve();
                                              
                                          }
                                      }
                                      else{
                                          page["list"] = response.rows;
                                          page["tick"]();
                                          page.local.spinner = false;
                                          resolve();
                                      }
                                      
                                  }
                                  else{
                                      page["list"]= [];
                                      page["tick"]();
                                      page.local.spinner = false;
                                      resolve();
                                  }
                                  for(let el of page["list"]){
                                      
                                     // compatibility mode for new features ( update older docs )
                                     let changed = false;
                                     let objChange = {''_use_policy'': "merge", "_id": (el[''value''][''doc''][''_id''])};
                                     if( el[''value''][''doc''][''wallpaper''][''random''] == undefined){
                                         el[''value''][''doc''][''wallpaper''][''random''] = "assets/images/svg/imgplaceholder/placeholder" + (Math.floor(Math.random() * Math.floor(3)))+".svg";
                                         objChange["wallpaper"] = el[''value''][''doc''][''wallpaper''];
                                         changed = true;
                                         
                                     }
                                     /*if(el[''value''][''doc''][''creator''] == undefined){
                                         
                                         objChange["creator"] = page.global.user;
                                         changed = true;
                                     }*/
                                     if(changed){
                                         page.c8o.callJsonObject("fs://c8oforms_fs.post", objChange)
                                     }
                                     
                                  }
                               }
                              else{
                                  reject();
                                  page.local.spinner = false;
                              }
                              
                              return null;
                          })
                          .fail((err)=>{
                              page.local.spinner = false;
                              page.c8o.log.error("CallViewLiveAndFillFormList: " + JSON.stringify(err));
                              reject();
                          });
          		    
          		    
          		    
          		
          '
↓keys [mobile.components.UIStackVariable-1567094333170]: 