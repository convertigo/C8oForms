comment: Process a tick (Refresh define in caf)
↓DoCallViewLiveAndFillFormList [mobile.components.UICustomAction-1567094239810]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    let view = page.local["view"] != undefined ? page.local["view"] : "formulaires";
          		    let ddoc = page.local["ddoc"] != undefined ? page.local["ddoc"] : "forms";
          		    let objQ = {};
          		    if(vars.query == true){
          		        objQ = {
          	                    "ddoc": ddoc,
          	                    "view": view,
          	                    "__live": "viewLiveSelector",
          	                    "startkey":page["query"],
          	                    "endkey":page["query"]+"\ufff0"
          	                    };
          		    }
          		    else{
          		        objQ = {
          	                    "ddoc": ddoc,
          	                    "view": view,
          	                    "__live": "viewLiveSelector",
          	                    "keys": vars.keys,
          	                    "descending": true
          	                    };
          		    }
          		    
          		    page.c8o.callJsonObject("fs://c8oforms_fs.view",objQ)
                          .then((response: any, parameters)=>{
                            // will be call now and after each database update
                              if(response.rows != undefined){
                                  if(response.rows[0] != undefined){
                                      page["list"] = response.rows;
                                      page["tick"]();
                                  }
                                  else{
                                      page["list"]= [];
                                      page["tick"]();
                                  }
                                  for(let el of page["list"]){
                                      
                                     // compatibility mode for new features ( update older docs )
                                     let changed = false;
                                     let objChange = {''_use_policy'': "merge", "_id": (el[''value''][''doc''][''_id''])};
                                     if( el[''value''][''doc''][''wallpaper''][''random''] == undefined){
                                         el[''value''][''doc''][''wallpaper''][''random''] = "assets/images/svg/imgplaceholder/placeholder" + (Math.floor(Math.random() * Math.floor(3)))+".svg";
                                         objChange["wallpaper"] = el[''value''][''doc''][''wallpaper''];
                                         changed = true;
                                         
                                     }
                                     /*if(el[''value''][''doc''][''creator''] == undefined){
                                         
                                         objChange["creator"] = page.global.user;
                                         changed = true;
                                     }*/
                                     if(changed){
                                         page.c8o.callJsonObject("fs://c8oforms_fs.post", objChange)
                                     }
                                     
                                  }
                               }
                              resolve();
                              return null;
                          })
                          .fail((err)=>{
                              page.c8o.log.error("CallViewLiveAndFillFormList: " + JSON.stringify(err));
                          });
          		    
          		    
          		    
          		resolve();
          '
↓keys [mobile.components.UIStackVariable-1567094333170]: 