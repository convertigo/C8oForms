comment: Process a tick (Refresh define in caf)
↓DoCallViewLiveAndFillFormList [ngx.components.UICustomAction-1567094239810]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    new Promise(async(resolveAsync)=>{            
          		        page.local.count = 0;
          		        let countFolders = 0;
          		        let countOut = 0;
          		        let view = page.local["view"] != undefined ? page.local["view"] : "formulaires";
          	            let ddoc = page.local["ddoc"] != undefined ? page.local["ddoc"] : (page.local.published ? "published_formsV2":"formsV2");
          	            page["local"].response2Array = [];
          	            page["list"] = [];
          	            page.local.hash = undefined;
          	            page.local.hashFolders = undefined;
          	            page.local.count = undefined;
          	            
                          // if we are inside a folder
                          if(page.local.folder != ""){
                              let requestObjectIntoFolders = {
                                      "ddoc": page.local["ddoc"],
                                      "view": "in_folders",
                                      "__live": "viewLiveInFolders",
                                      "descending": true,
                                      "endkey":[page.local.folder],
                                      "startkey":[page.local.folder, {}]
                              };
                              page.c8o.callJsonObject("fs://c8oforms_fs.view", requestObjectIntoFolders)
                              .then((response: any, parameters: any)=>{
                                  const newHash = sha256(JSON.stringify(response));
                                  if(page.local.hash != newHash){
                                      page["list"] = response.rows;
                                      page.local.hash = newHash;
                                      countOut = response.rows.length;
                                      page.local.count = countFolders + countOut;
                                  }
                                  page.local.alreadyFinished = true;
                                  page.local.spinner = false;
                                  return null;
                              })
                              .fail((error)=>{
                                  const obj : any = {};
                                  obj["message"] = page["translate"].instant("error_occured");
                                  obj["duration"] = 3000;
                                  obj["position"] = "bottom";
                                  //obj["cssClass"] = "";
                                  this.ToastAction(page, obj, null);
                              })
                              
                          }
                          // if we are not into a folder
                          else{
                           // view for documents inside of folder
                              let requestObjectFolders = {
                                      "ddoc": page.local["ddoc"],
                                      "view": "folders",
                                      "__live": "viewLiveFolders",
                                      "descending": true,
                                      "reduce": true,
                                      "group": true
                              };
                              page.c8o.callJsonObject("fs://c8oforms_fs.view", requestObjectFolders)
                              .then((response: any, parameters: any)=>{
          						if((page.local.folder == "") && ((parameters.ddoc == "formsV2" && page.local.published == false) || (parameters.ddoc != "formsV2" && page.local.published))){
          							const newHash = sha256(JSON.stringify(response));
          	                        if(page.local.hashFolders != newHash){
          								countFolders = response.rows.length;
          	                            page.local.count = countFolders + countOut;
          	                            page["local"].response2Array = response.rows;
          	                            page.local.hashFolders = newHash;
          	                        }
          	                        page.local.alreadyFinished = true;
          	                        page.local.spinner = false;
          						}
                                  return null;
                              })
                              .fail((error)=>{
                                  const obj : any = {};
                                  obj["message"] = page["translate"].instant("error_occured");
                                  obj["duration"] = 3000;
                                  obj["position"] = "bottom";
                                  //obj["cssClass"] = "";
                                  //this.ToastAction(page, obj, null);
                              });
                              // view for documents outside of folder
                              let requestObject = {
                                      "ddoc": page.local["ddoc"],
                                      "view": "out_folders",
                                      "__live": "viewLiveOut",
                                      "descending": true
                              };
                              page.c8o.callJsonObject("fs://c8oforms_fs.view", requestObject)
                              .then((response: any, parameters: any)=>{
          						if((page.local.folder == "") && ((parameters.ddoc == "formsV2" && page.local.published == false) || (parameters.ddoc != "formsV2" && page.local.published))){
          	                        const newHash = sha256(JSON.stringify(response));
          	                        if(page.local.hash != newHash){
          								countOut = response.rows.length;
          	                            page.local.count = countFolders + countOut;	
          	                            page["list"] = response.rows;
          	                            page.local.hash = newHash;
          	                        }
          	                        page.local.alreadyFinished = true;
          	                        page.local.spinner = false;
          						}
                                  return null;
                              })
                              .fail((error)=>{
                                  const obj : any = {};
                                  obj["message"] = page["translate"].instant("error_occured");
                                  obj["duration"] = 3000;
                                  obj["position"] = "bottom";
                                  //obj["cssClass"] = "";
                                  //this.ToastAction(page, obj, null);
                              })
                          }
          	            
          		    });
          		    
          		    
          		    
          		    
          		    
          		    
          		
          '
  package_dependencies: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: js-sha256
            - java.lang.String: 
              - ↑value: 0.9.0
  page_ts_imports: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: sha256
            - java.lang.String: 
              - ↑value: js-sha256
↓keys [ngx.components.UIStackVariable-1567094333170]: 