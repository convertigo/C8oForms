↓CustomAction [mobile.components.UICustomAction-1604330914949]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          		    let cpt  = 0;
          		    let cpt2  = 0;
          		    let cpt3 = 0;
          		    let cpt4 = 0;
          		    
          		    let checkhasBeenProcessed = async () => {
              		    try{
              		        cpt3 ++;
              		        page.c8o.log.debug("[check pwa has build] n°"+cpt3+ " started");
              		        let viewPwa = await page.c8o.callJson("fs://c8oforms_fs.view", "ddoc","pwas", "view", "toBeDone").async();
              		        if(viewPwa.rows.length > 0){
              		            page.c8o.log.debug("[check pwa has build] n°"+cpt3+ " "+viewPwa.rows.length+" build(s) have not started");
              		            for(let elem of viewPwa.rows){
              		                let pingIt = await page.c8o.callJson("fs://c8oforms_fs.post", "_id", elem.id, "ping", "pong", "_use_policy", "merge").async();
              		                page.c8o.log.debug("[check pwa has build] n°"+cpt3+ " try to restart build " + elem.id);
              		            }
              		            page.c8o.log.debug("[check pwa has build] n°"+cpt3+ " we will wait 10000 ms before checking if every build had started");
              		            if(cpt3 < 6){
              		                setTimeout(() => {
              	                        checkhasBeenProcessed();
              	                    }, 10000)
              		            }
              		        }
              		        else{
              		            page.c8o.log.debug("[check pwa has build] n°"+cpt3+ " all build seems to have started correctly");
              		        }
              		       
              		    }
              		    catch(e){
              		        page.c8o.log.debug("[check pwa has build] has encontred an error", e);
              		    }
              		    
              		}
          		    let checkhasBeenProcessedPublish = async () => {
                          try{
                              cpt ++;
                              page.c8o.log.debug("[check publish done] n°"+cpt+ " started");
                              let viewPwa = await page.c8o.callJson("fs://c8oforms_fs.view", "ddoc","control_documents", "view", "control_documents_published").async();
                              if(viewPwa.rows.length > 0){
                                  page.c8o.log.debug("[check publish done] n°"+cpt+ " "+viewPwa.rows.length+" publications(s) have not started");
                                  for(let elem of viewPwa.rows){
                                      let pingIt = await page.c8o.callJson("fs://c8oforms_fs.post", "_id", elem.id, "ping", "pong", "_use_policy", "merge").async();
                                      page.c8o.log.debug("[check publish done] n°"+cpt+ " try to restart publication " + elem.id);
                                  }
                                  page.c8o.log.debug("[check publish done] n°"+cpt+ " we will wait 10000 ms before checking if every publications had started");
                                  if(cpt < 6){
                                      setTimeout(() => {
                                          checkhasBeenProcessed();
                                      }, 10000)
                                  }
                              }
                              else{
                                  page.c8o.log.debug("[check publish done] n°"+cpt+ " all publications seems to have started correctly");
                              }
                             
                          }
                          catch(e){
                              page.c8o.log.debug("[check publish done] has encontred an error", e);
                          }
                          
                      }
          		    
          		    let checkhasBeenProcessedAnonymous = async () => {
                          try{
                              cpt2 ++;
                              page.c8o.log.debug("[check anonymous has been enabled] n°"+cpt2+ " started");
                              let viewPwa = await page.c8o.callJson("fs://c8oforms_fs.view", "ddoc","control_documents", "view", "control_documents_create_user").async();
                              if(viewPwa.rows.length > 0){
                                  page.c8o.log.debug("[check anonymous has been enabled] n°"+cpt2+ " "+viewPwa.rows.length+" anonymous have not started");
                                  for(let elem of viewPwa.rows){
                                      let pingIt = await page.c8o.callJson("fs://c8oforms_fs.post", "_id", elem.id, "ping", "pong", "_use_policy", "merge").async();
                                      page.c8o.log.debug("[check anonymous has been enabled] n°"+cpt2+ " try to restart anonymous " + elem.id);
                                  }
                                  page.c8o.log.debug("[check anonymous has been enabled] n°"+cpt2+ " we will wait 10000 ms before checking if every anonymous had started");
                                  if(cpt2 < 6){
                                      setTimeout(() => {
                                          checkhasBeenProcessedAnonymous();
                                      }, 10000)
                                  }
                              }
                              else{
                                  page.c8o.log.debug("[check anonymous has been enabled]n°"+cpt2+ " all anonymous seems to have started correctly");
                              }
                             
                          }
                          catch(e){
                              page.c8o.log.debug("[check anonymous has been enabled] has encontred an error", e);
                          }
                          
                      }
          		    
          		    
          		    let checkhasBeenProcessedRemoveAnonymous = async () => {
                          try{
                              cpt4 ++;
                              page.c8o.log.debug("[check anonymous has been disabled] n°"+cpt4+ " started");
                              let viewPwa = await page.c8o.callJson("fs://c8oforms_fs.view", "ddoc","control_documents", "view", "control_documents_delere_user").async();
                              if(viewPwa.rows.length > 0){
                                  page.c8o.log.debug("[check anonymous has been disabled] n°"+cpt4+ " "+viewPwa.rows.length+" anonymous have not started");
                                  for(let elem of viewPwa.rows){
                                      let pingIt = await page.c8o.callJson("fs://c8oforms_fs.post", "_id", elem.id, "ping", "pong", "_use_policy", "merge").async();
                                      page.c8o.log.debug("[check anonymous has been disabled] n°"+cpt4+ " try to restart anonymous " + elem.id);
                                  }
                                  page.c8o.log.debug("[check anonymous has been disabled] n°"+cpt4+ " we will wait 10000 ms before checking if every anonymous had started");
                                  if(cpt < 6){
                                      setTimeout(() => {
                                          checkhasBeenProcessedAnonymous();
                                      }, 10000)
                                  }
                              }
                              else{
                                  page.c8o.log.debug("[check anonymous has been disabled]n°"+cpt4+ " all anonymous seems to have started correctly");
                              }
                             
                          }
                          catch(e){
                              page.c8o.log.debug("[check anonymous has been disabled] has encontred an error", e);
                          }
                          
                      }
          		    
          		    
          		    page.c8o.log.debug("[check anonymous has been enabled] will wait 5000 ms before checking that pwa build has started");
              		setTimeout(() => {
                          checkhasBeenProcessed();
                          checkhasBeenProcessedAnonymous();
                          checkhasBeenProcessedPublish();
                          checkhasBeenProcessedRemoveAnonymous();
                      }, 5000);
              		resolve();
          