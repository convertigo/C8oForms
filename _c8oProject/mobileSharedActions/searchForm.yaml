↓doSearchForm [mobile.components.UICustomAction-1605199059317]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    if(page["query"] == undefined || page["query"] == ""){
          		        new Promise(async(resolve2, reject2)=>{
          		            
                              try{
                                  if(page.local.searchTags == undefined){
                                      page.local.searchTags = [];
                                  }
                                  if(page.local.searchSubTags == undefined){
                                      page.local.searchSubTags = [];
                                  }
                                  let tag = [];
                                  if(page.local.folder != "" && page.local.folder != undefined){
                                      if(page.local.searchTags.indexOf(page.local.folder) == -1){
                                          page.local.searchTags.push(page.local.folder);
                                      }
                                  }
                                  page.local.folder = "";
                                  
                                  let params = {"selector":{}};
                                  if(page.local.searchTags.length > 0){
                                      params.selector["tag"] = {$in: page.local.searchTags}
                                  }
                                  if(page.local.searchSubTags.length > 0){
                                      params.selector["subTag"] = {$in: page.local.searchSubTags}
                                  }
                                  if(page.local.published){
                                      params.selector["c8o_view_type_published_form"] = true;
                                  }
                                  else{
                                      params.selector["c8o_view_type_drafts_form"] = true;
                                  }
                                  
                                  let resp = await page.c8o.callJsonObject("fs://c8oforms_fs.find", params).async();                        
                                  let responseAfterView = resp.docs.map((doc)=>{
                                      
                                      // comes from ddoc = formsV2 view = out_folders + ddoc = published_formsV2 view = out_folders
                                      var objToEmit = {"name": doc.name, "pwa_enabled": doc.pwa_enabled, "pwa_subPath": doc.pwa_subPath, "version": doc.version, "status": doc.status};
                                      if(doc.thumbnail != undefined && doc.thumbnail.enabled){
                                          if(doc.thumbnail.type != undefined && doc.thumbnail.type == "color"){
                                              objToEmit["color"] = doc.thumbnail.color;
                                          }
                                          else{
                                              objToEmit["thumbnail"] = true;
                                          }
                                          
                                      }
                                      else if(doc.wallpaper != undefined && doc.wallpaper.enabled){
                                          if(doc.wallpaper.type != undefined && doc.wallpaper.type == "color"){
                                              objToEmit["color"] = doc.wallpaper.color;
                                          }
                                          else{
                                              objToEmit["wallpaper"] = true;
                                          }
                                      }
                                      else{
                                          objToEmit["random"] = doc.wallpaper.random;
                                      }
                                      
          
                                      return {"id": doc._id, value: objToEmit}; 
                                      //end difference from view
                                      
                                  });
                                  page["list"] = responseAfterView;
                                  page.local.count = page["list"].length;
                                  resolve2()
                              }
                              catch(e){
                                  
                              }
          		        })
          		        .then(()=>{
          		            resolve();
          		        })
          		        .catch((e)=>{
          		            resolve();
          		        })
          		        
          		    }
          		    else{
          		        new Promise(async(resolve2, reject2)=>{
          	                try{
          	                    if(page.local.searchTags == undefined){
                                      page.local.searchTags = [];
                                  }
                                  if(page.local.searchSubTags == undefined){
                                      page.local.searchSubTags = [];
                                  }
          	                    let filterName = page.local.published ? "c8o_view_type_published_form" : "c8o_view_type_drafts_form";
          	                    var filter = undefined;
          	                    let filterString = "";
          	                    if(page.local.published){
          	                        filterString = "filter = function (doc) { try{return doc.c8o_view_type_published_form === true && doc.deleted !== true";
          
          	                    }
          	                    else{
          	                        filterString = "filter = function (doc) { try{return doc.c8o_view_type_drafts_form === true && doc.deleted !== true";
          	                    }
          	                    if(page.local.folder != "" && page.local.folder != undefined){
                                      if(page.local.searchTags.indexOf(page.local.folder) == -1){
                                          page.local.searchTags.push(page.local.folder);
                                      }
                                  }
          	                    page.local.folder ="";
          	                    for(let i in page.local.searchTags){
          	                        if(i=="0"){
          	                            filterString += " && doc.tag != undefined && doc.tag.length > 0 && doc.tag.indexOf(''"+page.local.searchTags[i]+"'') > -1";
          	                        }
          	                        else{
          	                            filterString += " || doc.tag.indexOf(''"+page.local.searchTags[i]+"'') > -1";
          	                        }
          	                        
          	                    }
          	                    for(let j in page.local.searchSubTags){
          	                        if(j=="0"){
                                          filterString += " && doc.subTag != undefined && doc.subTag.length > 0 && doc.subTag.indexOf(''"+page.local.searchSubTags[j]+"'') > -1";
                                      }
          	                        else{
          	                            filterString += " || doc.subTag.indexOf(''"+page.local.searchSubTags[j]+"'') > -1";
          	                        }
          	                    }
          	                    filterString += "}catch(e){}}";
          	                    eval(filterString);
          	                    let params = {filter: filter, fields:["name"], query: page["query"], highlighting: true, include_docs: true, mm: ''0%''}
          	                    let resp = await page.c8o.callJsonObject("fs://c8oforms_fs.search", params).async();
          	                    let responseAfterView = resp.rows.map((emit)=>{
          	                        let doc = emit.doc;
          	                        // comes from ddoc = formsV2 view = out_folders + ddoc = published_formsV2 view = out_folders
          	                        var objToEmit = {"name": doc.name, "pwa_enabled": doc.pwa_enabled, "pwa_subPath": doc.pwa_subPath, "version": doc.version, "status": doc.status};
          	                        if(doc.thumbnail != undefined && doc.thumbnail.enabled){
          	                            if(doc.thumbnail.type != undefined && doc.thumbnail.type == "color"){
          	                                objToEmit["color"] = doc.thumbnail.color;
          	                            }
          	                            else{
          	                                objToEmit["thumbnail"] = true;
          	                            }
          	                            
          	                        }
          	                        else if(doc.wallpaper != undefined && doc.wallpaper.enabled){
          	                            if(doc.wallpaper.type != undefined && doc.wallpaper.type == "color"){
          	                                objToEmit["color"] = doc.wallpaper.color;
          	                            }
          	                            else{
          	                                objToEmit["wallpaper"] = true;
          	                            }
          	                        }
          	                        else{
          	                            objToEmit["random"] = doc.wallpaper.random;
          	                        }
          	                        
          	                        //// difference from view
          	                        if(emit.highlighting.name != undefined){
          	                            objToEmit.name = emit.highlighting.name;
          	                        }
          	                        return {"id": emit.id, "score": emit.score, value: objToEmit}; 
          	                        //end difference from view
          	                        
          	                    });
          	                    page["list"] = responseAfterView;
          	                    page.local.count = page["list"].length;
          	                    resolve2()
          	                }
          	                catch(e){
          	                    console.log("errr", e);
          	                    resolve2();
          	                }
          	            })
          	            .then(()=>{
          	                resolve();
          	            })
          		    }
              		
          		
          '