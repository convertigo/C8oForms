comment: Check is a field is empty and reject the changes or register this change
↓checkAndRegister [mobile.components.UICustomAction-1554979006057]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    
          		    /** example admitting that path = ''obj.name''
                       * This is done because, if we do not add a space to the initial value,
                       * angular doesn''t refresh properly UI. 
                      let val = obj.name;
                      obj.name = obj.name + " ";
                      page.tick()
                      obj.name = val;
                      page.tick 
                      **/
          		    
          		    // If vars.isNumber is false
          		    if(!vars.isNumber){
          		        let obj = vars.obj;
          	            let evalString = vars["path"] + " = event.srcElement.value";
          	            // If the current field is not empty or if we explicitly say that there is no condition in the noCondition variable
          	            // In the next step we check if we allow for duplicated in the fields
          	            // If we don''t allow it, we go into the if statement then we check in the item''s children if there are any duplicate
          	            if(event.srcElement.value != "" || vars.noCondition ){
          	                // if not we don''t allow duplicates
          	                if(!vars.allowDuplicate){
          	                    let obj2 = vars.obj2;
          	                    let duplicate = false;
          	                    // Check for duplicates
          	                    for(let val of obj.children){
          	                        if(event.srcElement.value == val.value)
          	                            duplicate = true;
          	                    }
          	                    // If there are any duplicates we put the old value to the field
          	                    // And we resolve(true) to display the correct messages (checkAndRegister next steps)
          	                    if(duplicate){
          	                        let val = eval(ts.transpile(vars["path2"]));
          	                        eval(ts.transpile(vars["path2"] + " = " + vars["path2"] + " + '' '' "));
          	                        page.tick();
          	                        eval(ts.transpile(vars["path2"] + " = val"));
          	                        page.tick();
          	                        resolve(true);
          	                    }
          	                    else{
          	                        evalString = vars["path2"] + " = event.srcElement.value";
          	                        eval(ts.transpile(evalString));
          	                        resolve(false);
          	                    }                        
          	                }
          	                else{
          	                    eval(ts.transpile(evalString));
          	                    resolve(false);
          	                }               
          	            }
          	            else{               
          	                if(!vars.allowDuplicate){
          	                    // In case that the field is empty we just put the last value back in the field
          	                    let obj2 = vars["obj2"];
          	                    let val = eval(ts.transpile(vars["path2"]));
          	                    eval(ts.transpile(vars["path2"] + " = " + vars["path2"] + " + '' '' "));
          	                    page.tick();
          	                    eval(ts.transpile(vars["path2"] + " = val"));
          	                    page.tick();
          	                    // Set this to true to match appropriate if condition in next steps
          	                    vars.allowDuplicate = true;
          	                    resolve(true);
          	                    
          	                }
          	                else{
          	                    let val = eval(ts.transpile(vars["path"]));
          	                    eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
          	                    page.tick();
          	                    eval(ts.transpile(vars["path"] + " = val"));
          	                    page.tick();
          	                    resolve(true);
          	                }                
          	            }
          		    }
          		    else{
          		        let obj = vars["obj"];
          		        let evalString = vars["path"] + " = event.srcElement.value";
          		        // If the field is within a Slider
          		        if(vars.isSlider){
          		            console.log("test");
          		            // In this case, we need to check few things :
          		            // minimum is not greater than max
          		            // maximum is greater than defaultvalue and defaultvalue greater than minimum
          		            let min = +obj.config.min;
          		            let max = +obj.config.max;
          		            let defaultValue = +obj.config.defaultvalue;
          		            switch(vars["path"]){
          		                case "obj.config.min": {
          		                    // In case we are calling from ''Minimum''
          		                    // First we check that the value is not empty
          		                    // If not we check that min < max AND min < defaultValue
          		                    // If everything is Ok we go to the last else
          		                    // If not, we display a custom message triggered by changing the value of isSlider
          		                    min = +event.srcElement.value;
          		                    if(event.srcElement.value == ""){
                                          let oldVal = eval(ts.transpile(vars["path"]));
                                          
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "empty";
                                          resolve(true);
                                      }
          		                    else if(min > max){
          		                        
          		                        let oldVal = eval(ts.transpile(vars["path"]));
          	                            eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
          	                            page.tick();
          	                            eval(ts.transpile(vars["path"] + " = +oldVal"));
          	                            page.tick();
          	                            vars.isSlider = "min>max";
          	                            resolve(true);
          		                    }
          		                    else if(min > defaultValue){
                                          
                                          let oldVal = eval(ts.transpile(vars["path"]));
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "min>def";
                                          resolve(true);
                                      }
          		                    else{
          		                        evalString = vars["path"] + " = event.srcElement.value";
          	                            eval(ts.transpile(evalString));
          	                            resolve(false);
          		                    }		                    
          		                    break;
          		                }
          		                case "obj.config.max": {
          		                    // Same case as ''Minimum'' but for the ''Maximum''
          		                    // First we check that the value is not empty
                                      // If not we check that max > min AND max > defaultValue
                                      // If everything is Ok we go to the last else
                                      // If not, we display a custom message triggered by changing the value of isSlider
          		                    max = +event.srcElement.value;
          		                    if(event.srcElement.value == ""){
                                          let oldVal = eval(ts.transpile(vars["path"]));
                                          
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "empty";
                                          resolve(true);
                                      }
          		                    else if(max < min){
          		                        let oldVal = eval(ts.transpile(vars["path"]));
          		                        
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "max<min";
                                          resolve(true);
          		                    }
          		                    else if(max < defaultValue){
          		                        let oldVal = eval(ts.transpile(vars["path"]));
          		                        
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "max<def";
                                          resolve(true);
          		                    }
          		                    else{
          		                        evalString = vars["path"] + " = event.srcElement.value";
                                          eval(ts.transpile(evalString));
                                          resolve(false);
          		                    }
          		                    
                                      break;
                                  }
          		                case "obj.config.defaultvalue": {
          		                    // Same case as ''Minimum'' but for the ''DefaultValue''
          		                    // First we check that the value is not empty
                                      // If not we check that defaultValue > min AND defaultValue < max 
                                      // If everything is Ok we go to the last else
                                      // If not, we display a custom message triggered by changing the value of isSlider
          		                    defaultValue = +event.srcElement.value;
          		                    
          		                    if(event.srcElement.value == ""){
          		                        let oldVal = eval(ts.transpile(vars["path"]));
                                          
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "empty";
                                          resolve(true);
          		                    }
          		                    else if(defaultValue < min){
                                          let oldVal = eval(ts.transpile(vars["path"]));
                                          
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "def<min";
                                          resolve(true);
                                      }
                                      else if(defaultValue > max){
                                          let oldVal = eval(ts.transpile(vars["path"]));
                                          
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isSlider = "def>max";
                                          resolve(true);
                                      }
                                      else{
                                          evalString = vars["path"] + " = event.srcElement.value";
                                          eval(ts.transpile(evalString));
                                          resolve(false);
                                      }
                                      break;
                                  }
          		            }
          		        }
          		        else{
          		             // If the field is just a number, not in a Slider
              		         // If the field is not empty we proceed
              	                if(event.srcElement.value != ""){
              	                    let inputVal = event.srcElement.value;
              	                    if(inputVal > 0){
              	                        // If the value is greater than 0, it''s good so we just keep the value
              	                        eval(ts.transpile(evalString));
              	                        resolve(false);
              	                    }
              	                    else if(event.srcElement.value == 0){
              	                        let oldVal = eval(ts.transpile(vars["path"]));
                                          eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
                                          page.tick();
                                          eval(ts.transpile(vars["path"] + " = +oldVal"));
                                          page.tick();
                                          vars.isNumber = "zero";
                                          resolve(true);
              	                    }
              	                    else{
              	                        // If not, we have to put the old value and warn the user that it''s not allowed
              	                        let oldVal = eval(ts.transpile(vars["path"]));
              	                        eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
              	                        page.tick();
              	                        eval(ts.transpile(vars["path"] + " = +oldVal"));
              	                        page.tick();
              	                        resolve(true);
              	                    }
              	                }
              	                else{
              	                    // If it''s empty we just warn the user that it''s not allowed in the next steps
              	                    let oldVal = eval(ts.transpile(vars["path"]));
              	                    eval(ts.transpile(vars["path"] + " = " + vars["path"] + " + '' '' "));
              	                    page.tick();
              	                    eval(ts.transpile(vars["path"] + " = +oldVal"));
              	                    page.tick();
              	                    resolve(true);
              	                }
              	            }
          		        }
          '
  ↓If [mobile.components.UIDynamicAction-1554993950538]: 
    beanData: '{"ionBean":"IfAction"}'
    ↓ifSlider [mobile.components.UIDynamicAction-1557407563796]: 
      beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider"}'
      ↓minGreaterMax [mobile.components.UIDynamicAction-1556809159712]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider == \"min>max\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557481298965]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓Toast [mobile.components.UIDynamicAction-1556809283427]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
          ↓msgTosearch [mobile.components.UIControlVariable-1557482050344]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'minGreaterMax'
      ↓minGreaterDef [mobile.components.UIDynamicAction-1557407275003]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider == \"min>def\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557481320666]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓Toast [mobile.components.UIDynamicAction-1557407275006]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
          ↓msgTosearch [mobile.components.UIControlVariable-1557482052278]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'minGreaterDef'
      ↓maxLowerMin [mobile.components.UIDynamicAction-1557413020315]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider == \"max<min\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557481385627]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓Toast [mobile.components.UIDynamicAction-1557413020318]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
          ↓msgTosearch [mobile.components.UIControlVariable-1557482053847]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'maxLowerMin'
      ↓maxLowerDef [mobile.components.UIDynamicAction-1557413023551]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider == \"max<def\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557481401851]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓Toast [mobile.components.UIDynamicAction-1557413023554]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
          ↓msgTosearch [mobile.components.UIControlVariable-1557482055438]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'maxLowerDef'
      ↓defLowerMin [mobile.components.UIDynamicAction-1557413026140]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider == \"def<min\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557481417236]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓Toast [mobile.components.UIDynamicAction-1557413026143]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
          ↓msgTosearch [mobile.components.UIControlVariable-1557482057958]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'defLowerMin'
      ↓defGreaterMax [mobile.components.UIDynamicAction-1557413028480]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider == \"def>max\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557481433612]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓msgTosearch [mobile.components.UIControlVariable-1557482060655]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'defGreaterMax'
          ↓Toast [mobile.components.UIDynamicAction-1557413028483]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
      ↓empty [mobile.components.UIDynamicAction-1557913217676]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isSlider == \"empty\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557913217679]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓Toast [mobile.components.UIDynamicAction-1557913217682]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
          ↓msgTosearch [mobile.components.UIControlVariable-1557913217685]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'emptyField'
    ↓ifAllowDuplicate [mobile.components.UIDynamicAction-1555597503644]: 
      beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.allowDuplicate && stack[''checkAndRegister''].in.vars.isSlider == false"}'
      ↓ifNumberZero [mobile.components.UIDynamicAction-1557914796082]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isNumber == \"zero\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557914796160]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓Toast [mobile.components.UIDynamicAction-1557914796163]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
          ↓msgTosearch [mobile.components.UIControlVariable-1557914796166]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'greaterThanZero'
      ↓ifNotZero [mobile.components.UIDynamicAction-1557933753466]: 
        beanData: '{"ionBean":"IfAction","condition":"script:stack[''checkAndRegister''].in.vars.isNumber != \"zero\""}'
        ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1557926433252]: 
          beanData: '{"ionBean":"InvokeAction"}'
          stack: C8Oforms.MobileApplication.Application.getTranslate
          ↓msgTosearch [mobile.components.UIControlVariable-1557926433255]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'emptyField'
          ↓Toast [mobile.components.UIDynamicAction-1557926433258]: 
            beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
    ↓ifNotAllowDuplicate [mobile.components.UIDynamicAction-1555597630956]: 
      beanData: '{"ionBean":"IfAction","condition":"script:!stack[''checkAndRegister''].in.vars.allowDuplicate && stack[''checkAndRegister''].in.vars.isSlider == false"}'
      ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1555597630959]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.getTranslate
        ↓msgTosearch [mobile.components.UIControlVariable-1555597630962]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'nameAlreadyexits'
        ↓Toast [mobile.components.UIDynamicAction-1555597630965]: 
          beanData: '{"ionBean":"ToastAction","message":"script:parent.out"}'
  ↓Else [mobile.components.UIDynamicAction-1554995118603]: 
    beanData: '{"ionBean":"IfAction","condition":"script:!parent.out"}'
    ↓InvokeSharedAction1 [mobile.components.UIDynamicInvoke-1554995177578]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms.MobileApplication.Application.tick
    ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1554995160146]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms.MobileApplication.Application.updateState
↓noCondition [mobile.components.UIStackVariable-1554998136842]: 
  value: false
↓path [mobile.components.UIStackVariable-1555001079693]: 
↓obj [mobile.components.UIStackVariable-1555065487312]: 
  value: 
↓allowDuplicate [mobile.components.UIStackVariable-1555593386563]: 
  value: true
↓path2 [mobile.components.UIStackVariable-1555681671683]: 
↓obj2 [mobile.components.UIStackVariable-1555681771847]: 
  value: 
↓isNumber [mobile.components.UIStackVariable-1556273038870]: 
  value: false
↓isSlider [mobile.components.UIStackVariable-1556293013319]: 
  value: false