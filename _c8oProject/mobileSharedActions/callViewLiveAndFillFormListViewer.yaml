↓CallViewLiveAndFillFormList [mobile.components.UICustomAction-1571648363916]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		 // Calling view live
                      let key;
                      let respInit;
                      if(page.local["formId"]!= null){
                          key = page.local["formId"];
                          if(page.local["respInit"] != null){
                              respInit = page.local["respInit"];
                              page["edit"] = true;
                          }
                      }
          
                      page.c8o.callJsonObject("fs://c8oforms_fs.view",{
                          "ddoc": "forms",
                          "view": "view",
                          "__live": "view",
                           "key": key
                          })
                          .then((response: any, parameters)=>{
                              page.local.sourceValue = {};
                              if(!page.local["submitting"]){
                              // will be call now and after each database update
                              if(response.rows != undefined){
                                  if(response.rows[0] != undefined){
                                      page["local"]["_rev"] = response.rows[0].value.doc[''_rev''];
                                      page["form"] = response.rows[0].value.doc;
                                      page["formsList"] = response.rows[0].value.doc.formulaire;
                                      page["link"] = response.rows[0].value.doc["wallpaper"]["link"];
                                      try{
                                          page["local"]["pages"] =  response.rows[0].value.doc["pages"]  
                                          for(let i in page.local.pages){
                                              page["local"]["pages"][i]["enabled"] = true;
                                          }
                                          page["local"]["currentIndex"] = 0;
                                      }
                                      catch(e){
                                          page["local"]["pages"] = undefined;
                                          page["local"]["currentIndex"] = 0;
                                      }
                                      
                                      
                                      page.c8o.log.debug("CallViewLiveAndFillFormList: formsList object has been updated from live view");
                                      
                                      // load background image if we are in new support mode image
                                      if(response.rows[0].value.doc["wallpaper"]["enabled"] && page["form"]["wallpaper"]["type"] != undefined && page["form"]["wallpaper"]["type"] != ''color''){
                                          page.c8o.get_attachment(page["form"]["_id"], "wallpaper", "c8oforms_fs")
                                          .then((res) => {
                                              var urlCreator = window["URL"] || window["webkitURL"];
                                              page.local.url = urlCreator.createObjectURL(res);
                                              page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                              page.tick();
                                          }).catch((err) => {
                                              page.c8o.log.error("Error loading wallpaper from local base", err);
                                          }); 
                                      }
                                      else{
                                          page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
                                      }
                                  
                                      const checkAuthorizedPages = (item: any) => {
                                          if(item.config.page != undefined && item.config.page != ""){
                                              if(item.conditions != undefined && item.conditions.goToPageIf != undefined){
                                                  for(let el of item.conditions.goToPageIf.conds){
                                                      if((el.val2.source == false && (el.val2.str != "" || Object.keys(el.val2.vals).length > 0)) && el.operator != undefined && el.operator != "" && el.page != undefined && el.page != ""){
                                                          //this is a valid goToPage condition so enable it 
                                                          for(let i in page.local.pages){
                                                              if(+i == page.local.currentIndex){
                                                                  page.local.pages[+i].enabled = true;
                                                              }
                                                              else{
                                                                  page.local.pages[+i].enabled = false;
                                                              }
                                                          }
                                                      }
                                                  }
                                                  
                                              }
                                          }
                                      };
                                      
                                      let fillFormSubmit = (list, redList, formSubmit, response) => {
                                          page.local.subKeyD = page.local.urlParams.get("_c8o_subkey");
                                          page.local.subKeyD = page.local.subKeyD == null ? "," : page.local.subKeyD;
                                          try  {
                                              for(let item of list){
                                                  //checkAuthorizedPages(item);
                                                  if(item["type"] == "ion-card"){
                                                      redList[item["name"]] = {};
                                                      formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "children":{}, "label":item["config"]["title"]["text"], "labelHtml":item["config"]["title"]["personalized"] ? item["config"]["title"]["html"] : item["config"]["title"]["text"]};
                                                      //redList[item["name"]]["children"] = [];
                                                      
                                                      let res = response != undefined ? response[item["name"]]["children"] : null;
                                                      fillFormSubmit(item["children"], redList[item["name"]]["children"], formSubmit[item["name"]]["children"], res);
                                                  }
                                                  else if(item["type"] == "text"){
                                                      let urlParams = page.local.urlParams.get(item["name"]);
                                                      let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                      formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                  }
                                                  else if(item["type"] == "checkbox"){
                                                      formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                      let urlParams = page.local.urlParams.get(item["name"]);
                                                      let array = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                                                      for(let child in item["children"]){
                                                          let selected;
                                                          try {
                                                              let s = array.indexOf(item["children"][child].value) != -1;
                                                              selected = s == true ? s : respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                          }
                                                          catch(e){
                                                              
                                                          }
                                                          
                                                          formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected, "other": item["children"][child].other});
                                                      }
                                                  }
          										else if(item.type == "grid"){
          											let findName = "";
                                                      let findVars = {};
          											
                                                          for(let w in item["sources"]){
                                                              if(item["sources"][w].enabled == true){
                                                                for (const [key, value] of (<any>Object).entries(item["sources"][w]["vars"])) {
                                                                    findVars[key] = value["str"];
                                                                }
                                                                //findVar = item["sources"][w]["vars"];
                                                                findName = w;
                                                              }
                                                          }
                                                      
          											if(findName != ""){
                                                         /* formSubmit[item["name"]]["source"] = findName;
                                                          formSubmit[item["name"]]["sourceVars"] = findVars;*/
                                                          //page.local["vals"+item.name] = 
                                                          page.c8o.callJsonObject(findName, findVars)
                                                          .then((res: any) =>{
                                                              // find Colomn definitions
          													let colDef = 
          													Object.keys(res.data[0]).map((y)=>{
          														return {"field": y}
          													});
          													// find data
          													formSubmit[item["name"]] = {};
          													let data = res.data;
          													formSubmit[item["name"]]["colDef"] = colDef;
          													formSubmit[item["name"]]["data"] = data;
                                                              return null;
                                                          })
                                                          .fail((err)=>{
                                                              page.c8o.log.error("an error occured while trying to laod source for  select", err);
                                                          })
                                                      }
          											
          										}
                                                  else if(item["type"] == "radio" || item["type"] == "select"){
                                                      
                                                      formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], "children":[], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                          
                                                      let findName = "";
                                                      let findVars = {};
                                                      if(item["type"] == "select" && item["config"]["sourceEnabled"] == true){
                                                          for(let w in item["sources"]){
                                                              if(item["sources"][w].enabled == true){
                                                                for (const [key, value] of (<any>Object).entries(item["sources"][w]["vars"])) {
                                                                    findVars[key] = value["str"];
                                                                }
                                                                //findVar = item["sources"][w]["vars"];
                                                                findName = w;
                                                              }
                                                          }
                                                      }
                                                      if(findName != ""){
                                                          formSubmit[item["name"]]["source"] = findName;
                                                          formSubmit[item["name"]]["sourceVars"] = findVars;
                                                          //page.local["vals"+item.name] = 
                                                          page.c8o.callJsonObject(findName, findVars)
                                                          .then((res=>{
                                                              let urlParams = page.local.urlParams.get(item["name"]);
                                                              page.local.sourceValue[item.name] = res["value"];
                                                              let defaultSelected ="";
                                                              for(let child of res["value"]){
                                                                  if(child == urlParams){
                                                                      defaultSelected = child;
                                                                  }
                                                                  formSubmit[item["name"]]["children"].push({"value": child, "selected": child == urlParams});
                                                              }
                                                              formSubmit[item["name"]]["value"] = defaultSelected;
                                                              return null;
                                                          }))
                                                          .fail((err)=>{
                                                              page.c8o.log.error("an error occured while trying to laod source for  select", err);
                                                          })
                                                      }
                                                      else{
                                                          let urlParams = page.local.urlParams.get(item["name"]);
                                                          let indexFinded = false;
                                                          let defaultSelected ="";
                                                          
                                                          if(urlParams != undefined){
                                                              for(let child in item["children"]){
                                                                  if(item["children"][child]["value"] == urlParams){
                                                                      indexFinded = true; 
                                                                      defaultSelected = item["children"][child].value;
                                                                      formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": true});
                                                                  }
                                                                  else{
                                                                      formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": false});
                                                                  }
                                                              }
                                                          }
                                                          if(!indexFinded){
                                                              for(let child in item["children"]){
                                                                  let selected;
                                                                  try {
                                                                      selected = respInit == null ? item["children"][child].selected : response[item["name"]]["children"][child]["selected"];
                                                                      if(selected){
                                                                          defaultSelected = respInit == null ? item["children"][child].value : response[item["name"]]["children"][child]["value"];
                                                                      }
                                                                  }
                                                                  catch(e){
                                                                      
                                                                  }
                                                                  
                                                                  formSubmit[item["name"]]["children"].push({"value": item["children"][child].value, "selected": selected});
                                                              }
                                                          }
                                                          formSubmit[item["name"]]["value"] = defaultSelected; 
                                                      }
                                                  }
                                                  else if(item["type"] == "slider" || item["type"] == "datetime" || item["type"] == "time" || item["type"] == "barcode" || item["type"] == "img" || item["type"] == "file"|| item["type"] == "signature"){
                                                      let urlParams = page.local.urlParams.get(item["name"]);
                                                      let value;
                                                      if(item["type"] == "slider"){
                                                          let valConvert = (isNaN(+urlParams) == false && urlParams != "") ? +urlParams : null;
                                                          value = valConvert != null ? valConvert : respInit == null ? "": response[item["name"]]["value"]; 
                                                      }
                                                      else{
                                                          value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["value"]; 
                                                      }
                                                      
                                                      formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["name"], "value":value, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                  }
                                                  else if(item["type"] == "radio_group"){
                                                      
                                                      formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, children_label:item["children"], "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                      for(let line of item.lines){
                                                          let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                                          urlParams = item.children.filter(x=> x.value == urlParams).length > 0 ? urlParams : null;
                                                          let value = urlParams != null ? urlParams : respInit == null ? "": response[item["name"]]["children"][line.title]; 
                                                          formSubmit[item["name"]].children[line.title]= value;
                                                      }
                                                  }
                                                  else if(item["type"] == "checkbox_group"){
                                                      formSubmit[item["name"]] = {"name":item["name"], "type": item["type"], "label":item["config"]["label"], children:{}, "labelHtml":item["config"]["personalized"] ? item["config"]["html"] : item["config"]["label"]};
                                                      
                                                      for(let line of item.lines){
                                                          formSubmit[item["name"]].children[line.title] = [];
                                                          let urlParams = page.local.urlParams.get(item["name"]+"_"+line.title);
                                                          let array = urlParams != null ?urlParams.split(page.local.subKeyD) : [];
                                                          for(let child in item["children"]){
                                                             
                                                              
                                                              let selected;
                                                              try {
                                                                  let s = array.indexOf(item["children"][child].value) != -1;
                                                                  selected = s == true ? s : respInit == null ? item["children"][child].selected : response[item["name"]]["children"][line.title][child]["selected"];
                                                              }
                                                              catch(e){   
                                                              }   
                                                              formSubmit[item["name"]].children[line.title].push({"value": item["children"][child].value, "selected": selected});
                                                          }
                                                      }
                                                  }
                                                  
                                          };
                                          }
                                          catch(e){
                                              console.log("error");
                                              console.log(e);
                                          }
                                          
                                      }
                                      
                                      
                                      fillFormSubmit(page["formsList"], page["redList"], page["formsSubmit"], respInit); 
                                      page["checkForAnyCondition"]();
                                      
                                      // do stuff to support upload files
                                      if(page.global["__C8O_TODELETE"] == undefined){
                                          page.global["__C8O_TODELETE"] = [];
                                      }
                                      let nullBefore = false;
                                      if(page.global[page["idFiles"]].length == 0){
                                          nullBefore = true
                                      }
                                      for(let item of page["formsList"]){
                                          if( item[''type''] == "file"){
                                              if(page.global[page["idFiles"]][item["id"]] == null){
                                                  page.global[page["idFiles"]][item["id"]] = [];
                                              }
                                          }
                                          if(item["type"] =="ion-card"){
                                              for(let child of item["children"]){
                                                  if(child[''type''] == "file"){
                                                      if(page.global[page["idFiles"]][child["id"]] == null){
                                                          page.global[page["idFiles"]][child["id"]] = [];
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                      
                                      
                                      
                                      if(respInit == null){
                                            resolve();        
                                      }
                                      else{
                                          if(page.global["__C8O_TODELETE"] == undefined){
                                              page.global["__C8O_TODELETE"] = [];
                                          }
                                          let nullBefore = false;
                                          if(page.global[page["idFiles"]].length == 0){
                                              nullBefore = true
                                          }
                                          for(let item of page["formsList"]){
                                              if( item[''type''] == "file"){
                                                  if(page.global[page["idFiles"]][item["id"]] == null){
                                                      page.global[page["idFiles"]][item["id"]] = [];
                                                  }
                                              }
                                              if(item["type"] =="ion-card"){
                                                  for(let child of item["children"]){
                                                      if(child[''type''] == "file"){
                                                          if(page.global[page["idFiles"]][child["id"]] == null){
                                                              page.global[page["idFiles"]][child["id"]] = [];
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                          page.c8o.callJson("fs://c8oforms_response_fs.get", "docid", page.local.edit, "attachments", true)
                                          .then((res)=>{
                                              let att = res["_attachments"];
                                              for(let item in att){
                                                  //first itemid
                                                  let itemid = item.substring(0, item.indexOf(''_C80C80_''));
                                                  //second namefile
                                                  let name = item.substring(item.indexOf(''_C80C80_'')+8,item.lastIndexOf(''_C80C80_''));
                                                  //synthax
                                                  if(page.global[page["idFiles"]][itemid] == null){
                                                      page.global[page["idFiles"]][itemid] = [];
                                                  }
                                                  if(nullBefore){
                                                      page.global[page["idFiles"]][itemid].push({name:name,path:item, deleted:false});
                                                  }
                                              }
                                              resolve();
                                              return null;
                                          })
                                          .fail((err)=>{
                                              resolve();
                                          })
                                      }
                                      
                                  }
                                  else{
                                      reject();
                                  }
                               }
                              else{
                                  reject();
                              }
                              return null;
                              }
                          })
                          .fail((err)=>{
                              page.c8o.log.error("CallViewLiveAndFillFormList: " + JSON.stringify(err.message));
                              reject();
                          });
          '
  ↓Failure_Handler [mobile.components.UIActionFailureEvent-1574090792916]: 
    ↓IfElse [mobile.components.UIDynamicIf-1604420874457]: 
      beanData: '{"ionBean":"IfElseAction","condition":"script:this.global.pwa == true"}'
      ↓CustomAction [mobile.components.UICustomAction-1604421236572]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                		    page.local.errorMsgViewer ="Mon super message assez long et vla";
                		    page.local.errorViewer = true;
                		resolve();
                
        isEnabled: false
      ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1604422025567]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.setLocal
        ↓val [mobile.components.UIControlVariable-1604422044139]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.translate.instant('error_not_found')
        ↓path [mobile.components.UIControlVariable-1604422044141]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'errorMsgViewer'
      ↓InvokeSharedAction1 [mobile.components.UIDynamicInvoke-1604422039642]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.setLocal
        ↓val [mobile.components.UIControlVariable-1604422091052]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: script:true
        ↓path [mobile.components.UIControlVariable-1604422091054]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'errorViewer'
      ↓Else_Handler [mobile.components.UIActionElseEvent-1604420898169]: 
        ↓RootPage [mobile.components.UIDynamicAction-1574090799651]: 
          beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.selectorPage"}'