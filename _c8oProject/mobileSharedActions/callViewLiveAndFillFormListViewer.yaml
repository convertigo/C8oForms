↓CallViewLiveAndFillFormList [ngx.components.UICustomAction-1571648363916]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		let dontReload = false;
          		let args = null;
          		let verb = null;
          		let respInit = null;
          		page.local.hash = undefined;
          		page.local.sizeWallPaper = undefined;
          		let isProd = page.local.published == true || page.local.anonymous == true;
          		// if in fullsync mode
          		if(vars.fs){
          			let key;
                      let respInit;
                      if(page.local["formId"]!= null){
                          key = page.local["formId"];
                          if(page.local["respInit"] != null){
                              respInit = page.local["respInit"];
                              page["edit"] = true;
                          }
                      }
          			verb = "fs://c8oforms_fs.view";
          			args = {
          				"ddoc": "forms",
          				"view": "view",
          				"__live": "viewLiveViewerPage",
          				"key": key
                     };
          		}
          		// if in sequence mode
          		else{
          			page.global.errorViewer = false;
          			page.local.user = page["navParams"].get(''i'');
          			args = {
          				"login": page.local.user,
          				"__disableAutologin": true,
          				[C8oLocalCache.PARAM]: new C8oLocalCache(Priority.SERVER, 3.154e+10)
          			}
          			verb = ".getAnonymousForm"; 
          		}
                  
          		page.c8o.callJsonObject(verb,args)
          		.then((response: any)=>{
          			let cond: boolean;
          			if(vars.fs){
          				cond = !page.local.submitting;
          			}
          			else{
          				cond = response.transaction != undefined && response.transaction.document != undefined && response.transaction.document.couchdb_output != undefined && response.transaction.document.couchdb_output.rows != undefined && response.transaction.document.couchdb_output.rows[0] != undefined;
          				response = response.transaction.document.couchdb_output;
          				var myIdP = response.rows[0].value.doc._id;
          	            const key = "_C8O_HIDDEN_" +  myIdP.substring(0, myIdP.indexOf("_anonymous"));
          	            page.local.grp[key] = true;
          	            page.local.formId = response.rows[0].value.doc._id;
          			}
          			try{
          				var newHash = sha256(JSON.stringify(response.rows[0]));
          			}
          			catch(e){}
          			if(cond && response.rows != undefined && response.rows[0] != undefined && newHash != page.local.hash && response.rows.length > 0){	
          				page.local.callEndInitC8o = ()=>{
          					//page.ref.reattach();
          					
          					// remove errorViewer
          					page.local.errorViewer = false;
          					//updates value except page.formsList
          					page["form"] = response.rows[0].value.doc;
          					page["local"]["_rev"] = response.rows[0].value.doc[''_rev''];
          		            page["link"] = response.rows[0].value.doc["wallpaper"]["link"];
          					if(response.rows[0].value.doc.collabsResponse != undefined && response.rows[0].value.doc.collabsResponse.length > 0){
          						if(page.local.grp == undefined){
          							page.local.grp = {};
          						}
          						response.rows[0].value.doc.collabsResponse.forEach((e)=>{
          							page.local.grp[e] = true; 
          						})
          					}
          					var isInitial = true;
          					// if response is diffrent from previous
          					if(page.local.hash == undefined){
          						// this was inital loading of form so do nothing
          					}
          					// if there is an update while consulting 
          					else{
          						isInitial = false;
          						// if we are in production 
          						if(isProd){
          							dontReload = true;
          							//return;//window.location.reload();
          						}
          						// if we are in preview
          						else{
          							if(!page.local.displayIngToast){
          								page.local.displayIngToast = true;
          								let toastCtrl = page.getInstance(ToastController);
          								let toast = toastCtrl.create({
          								    message: page["translate"].instant("the_form_has_been_updated"),
          								    duration: 3000,
          								    position: ''bottom'',
          									  ["buttons"] : [{text: page["translate"].instant("close"), role: ''cancel'', side: ''end''}],
          									cssClass: "changeToast"
          								}).then((res)=>{
          								res.present();
          								})
          								setTimeout(()=>{
          									page.local.displayIngToast = false;
          								},3000)
          								if(page.local.databsesTosync != undefined){
          									for(let db in page.local.databsesTosync){
          										//page.c8o.callJsonObject("fs://"+db+".replicate_pull",{cancel: true});
          										page.c8o.log.debug("canceled "+db+" pull replication (brefore updating form)");
          									}
          								}
          								if(page.local.liveToCancel != undefined){
          									for(let liveQuery of page.local.liveToCancel){
          										page.c8o.cancelLive(liveQuery);
          										page.c8o.log.debug("canceled "+liveQuery+" live query (brefore updating form)");
          									}
          									page.local.liveToCancel = [];
          								}
          							}
          							
          							
          						}
          					}
          					page.local.hash = newHash;
          					if(isInitial){
          						page.local.sourceValue = {};
          						page.local.functionsToBeCalled = {};
          					}
          					if(!dontReload){
          						
          					}
          		            try{
          						if(isInitial){
          							page["local"]["pages"] =  response.rows[0].value.doc["pages"]  
          			                for(let i in page.local.pages){
          								if(page["local"]["pages"][i]["enabled"] == undefined){
          									page["local"]["pages"][i]["enabled"] = true;
          								}
          			                }
          							page["local"]["currentIndex"] = 0;
          						}
          						else{
          							// get previous pageTechNameByIndex
          							let indexPageTechName = page["local"]["pages"].map((x)=> x.Page1607421989682);
          							for(let i in response.rows[0].value.doc["pages"]){
          								// getting previous status of pageTechName if exists
          								let ArrayCorrespondigPage = page["local"]["pages"].filter((x)=> x.pageTechName == response.rows[0].value.doc["pages"][i].pageTechName);
          								if(ArrayCorrespondigPage.length > 0){
          									response.rows[0].value.doc["pages"][i]["enabled"] = ArrayCorrespondigPage[0]["enabled"];
          								}
          								else{
          									response.rows[0].value.doc["pages"][i]["enabled"] = true;
          								}
          							}
          						}
          						
          		            }
          		            catch(e){
          		                page["local"]["pages"] = undefined;
          		                page["local"]["currentIndex"] = 0;
          						console.error("catch1", e);
          		            }
          		            page.c8o.log.debug("CallViewLiveAndFillFormList: formsList object has been updated from live view");
          		            
          					// Load wallpaper
          					if(vars.fs){
          						// load background image if we are in new support mode image
          		                if(response.rows[0].value.doc["wallpaper"]["enabled"] && page["form"]["wallpaper"]["type"] != undefined && page["form"]["wallpaper"]["type"] != ''color''){
          		                    page.c8o.get_attachment(page["form"]["_id"], "wallpaper", "c8oforms_fs")
          		                    .then((res) => {
          								if(res.size != page.local.sizeWallPaper){
          									page.local.sizeWallPaper = res.size;
          									 var urlCreator = window["URL"] || window["webkitURL"];
          			                        page.local.url = urlCreator.createObjectURL(res);
          			                        page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
          			                        //page.tick();
          								}
          		                    }).catch((err) => {
          								console.error("catch2", err);
          		                        page.c8o.log.error("Error loading wallpaper from local base", err);
          		                    }); 
          		                }
          		                else{
          		                    page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
          		                }
          					}
          					else{
          						if (response.rows[0].value.doc["wallpaper"]["enabled"] && page["form"]["wallpaper"]["type"] != undefined) {
          							if(page.local.url != page.c8o.endpointConvertigo + "/fullsync/c8oforms_fs/" + page.form["_id"] + "/wallpaper"){
          								page.local.url = page.c8o.endpointConvertigo + "/fullsync/c8oforms_fs/" + page.form["_id"] + "/wallpaper";
          							    page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
          							    //page.tick();
          							}
          						}
          						else {
          						    page["enabled"] = response.rows[0].value.doc["wallpaper"]["enabled"];
          						}
          					}
          					
          					// if we have reloaded the form charge again the currents values
          					if(!isInitial){
          						respInit = {...page["formsSubmit"]};
          						(page as any).local.functionsToBeCalled = {};
          						(page as any).functionsById = {};
          						(page as any).previousAndPostFunctions = {};
          					}
          					// calling fillFormSubmit
          		            page["fillFormSubmit"](response.rows[0].value.doc.formulaire, page["redList"], page["formsSubmit"], respInit);
          					// then affetct value of form
          					page["formsList"] = page["form"]["formulaire"];
          					// calling fillActionsVars
          					if(page["form"]["actions"] != undefined){
          						page["fillActionsVars"](page["form"]["actions"])
          						// calling fillActions
          						page["fillActions"](page["form"]["actions"], null, null);
          					}
          					// calling fillSources
          					//if(isInitial){
          					let idsToCall = page["fillSources"](page["formsList"], page["redList"], page["formsSubmit"]); 
          					
          						idsToCall.forEach((id)=>{
          							try{
          								page["functionsById"][id]();
          							}
          							catch(e){
          								console.error("an error occured idsToCall", e) 
          							}
          						});
          						
          					
          					//}
          					
          					
          					//²if(isInitial){
          			            // check conditions
          						page["checkForAnyCondition"]();
          					//}	
          		            
          		            // do stuff to support upload files
          		            if(page.global["__C8O_TODELETE"] == undefined){
          		                page.global["__C8O_TODELETE"] = [];
          		            }
          		            
          		            for(let item of page["formsList"]){
          		                if( item[''type''] == "file"){
          		                    if(page.global[page["idFiles"]][item["id"]] == null){
          		                        page.global[page["idFiles"]][item["id"]] = [];
          		                    }
          		                }
          		                if(item["type"] =="ion-card"){
          		                    for(let child of item["children"]){
          		                        if(child[''type''] == "file"){
          		                            if(page.global[page["idFiles"]][child["id"]] == null){
          		                                page.global[page["idFiles"]][child["id"]] = [];
          		                            }
          		                        }
          		                    }
          		                }
          		            }
          		            resolve();
          				}
          				let checkOffline = async ()=>{
                    					//check for offline sources
                    					page.global.waitFSBaseStatus = {};
                    					page.local["databsesTosync"] = {};
                    					page["getDatabasesToSync"](page.local["databsesTosync"], response.rows[0].value.doc.formulaire);
                    					if(Object.keys(page.local["databsesTosync"]).length > 0){
                    						page.local.isOfflinesource = true;
                    						//page.ref.detach();
                    						let hasToRestart = await page["getFullsyncSources"](response.rows[0].value.doc.formulaire);
                    						if(hasToRestart != undefined && hasToRestart.restart == true){
          									return hasToRestart;
          								}
          								else{
          									page["startSyncDatabases"](page.local["databsesTosync"]);
          	          						let promisesSync = [];
          	          						Object.keys(page.local.promisesFS).forEach((e)=>{
          	          							promisesSync.push(page.local.promisesFS[e]);
          	          						});
          	          						Promise.all(promisesSync)
          	          						.then(()=>{
          	          							//page.local.callEndInitC8o();
          	          						})
          									return {restart: false};
          								}
          								
                    						
                    					}
                    					else{
                    						//page.local.callEndInitC8o();
          								return {restart: false};
                    					}
                    				}
          				
          				checkOffline().then((res)=>{
          					if(res != undefined && res.restart == true){
          						
          					}
          					else{
          						page.local.callEndInitC8o();
          					}
          					
          				})
          			}
          			else if(response.rows.length == 0){
          				console.log("response.rows.length == 0");
          				page.local.spinner = false
          				page.local.errorMsgViewer = ''error_not_found'';
          				page.local.errorViewer = true;
          				page[''events''].publish("anyInitalSyncFinished");
          			}
          			else if(response.document != undefined && response.document.error != undefined){
          				if(response.document.error.message == "Max number of sessions exceeded for Standard Edition"){
          					page.c8o.log.fatal("Max number of sessions exceeded for Standard Edition")
          				}
          				
          			}
          			
          			return null;
          		})
          		.fail((e)=>{
          			console.log("MYYYerror", e);
          			page.c8o.log.error("An error occured into CallViewLiveAndFillFormList viewer " + JSON.stringify(e.message));
                      reject();
          		});
          '
  package_dependencies: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: js-sha256
            - java.lang.String: 
              - ↑value: 0.9.0
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: lodash
            - java.lang.String: 
              - ↑value: 4.17.20
  page_ts_imports: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: C8oLocalCache
            - java.lang.String: 
              - ↑value: c8osdkangular
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Priority
            - java.lang.String: 
              - ↑value: c8osdkangular
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: sha256
            - java.lang.String: 
              - ↑value: js-sha256
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: '* as _'
            - java.lang.String: 
              - ↑value: lodash
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: ToastController
            - java.lang.String: 
              - ↑value: ionic-angular
  ↓Failure_Handler [ngx.components.UIActionFailureEvent-1574090792916]: 
    ↓IfElse [ngx.components.UIDynamicIf-1604420874457]: 
      beanData: '{"ionBean":"IfElseAction","condition":"script:page.global.pwa == true"}'
      ↓CustomAction [ngx.components.UICustomAction-1604421236572]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                		    page.local.errorMsgViewer ="Mon super message assez long et vla";
                		    page.local.errorViewer = true;
                		resolve();
                
        isEnabled: false
      ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1604422025567]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms_NGX.MobileApplication.Application.setLocal
        ↓val [ngx.components.UIControlVariable-1604422044139]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'error_not_found'
        ↓path [ngx.components.UIControlVariable-1604422044141]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'errorMsgViewer'
      ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1604422039642]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms_NGX.MobileApplication.Application.setLocal
        ↓val [ngx.components.UIControlVariable-1604422091052]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:true
        ↓path [ngx.components.UIControlVariable-1604422091054]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'errorViewer'
      ↓PublishEventInitalSyncFinished [ngx.components.UIDynamicAction-1617011921689]: 
        beanData: |
          '{
           "ionBean": "PublishEventAction",
           "topic": "plain:anyInitalSyncFinished",
           "data": "script"
          }'
      ↓Else_Handler [ngx.components.UIActionElseEvent-1604420898169]: 
        ↓RootPage [ngx.components.UIDynamicAction-1574090799651]: 
          beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms_NGX.MobileApplication.Application.selectorPage"}'
  ↓fs [ngx.components.UIControlVariable-1610051910101]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:stack.callViewLiveAndFillFormListViewer.in.vars.fs
↓fs [ngx.components.UIStackVariable-1610051895823]: 
  value: true