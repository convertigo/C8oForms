↓CallFunction [ngx.components.UICustomAction-1609767736560]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          		if(page["pageOwner"] != undefined ){
          			page = page["pageOwner"];
          		}
          		try{
          			if(page.local["processingDataS"] == undefined){
          				page.local["processingDataS"] = {};
          			}
          			
          			if(page.local.functionsToBeCalled[vars.item.id] != undefined){
          				if(page.local["processingDataS"][vars.item.id] != undefined){
          					try{
          						clearTimeout(page.local["processingDataS"][vars.item.id]);
          					}
          					catch(e){
          						
          					}
          				}
          				page.local["processingDataS"][vars.item.id] = setTimeout(async ()=>{
          					// first filter array order get call mySelf first and then call childs
          					let alreadyDone = false;
          					
          					let currentSHA = page["shaById"][vars.item.id];
          					try{
          						if(!(vars.excludeMySelf === true) && page.local.functionsToBeCalled[vars.item.id].filter((x)=>{return currentSHA == x}).length > 0){
          							let res = await page["functionsById"][currentSHA]();
          							alreadyDone = true;
          						}
          					}
          					catch(e){
          						console.log("error", e);
          					}
          					page.local.functionsToBeCalled[vars.item.id]
          					.forEach((id)=>{
          						// if its myself, and we asked to exclude myself i will not call the source
          						if((vars.excludeMySelf === true && id == currentSHA && !alreadyDone)){
          							// do nothing
          						}
          						else{
          							// if its not myself, i will call the source
          							page["functionsById"][id]();	
          						}
          						
          					})
          				}, 0)
          				
          			}
          		}
          		catch(e){
          			page.c8o.log.error("Error while trying to refresh a data source", e);
          		}
          		
          		resolve();
          
  ↓item [ngx.components.UIControlVariable-1609767919313]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.item
  ↓excludeMySelf [ngx.components.UIControlVariable-1634649895773]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.excludeMySelf
↓item [ngx.components.UIStackVariable-1609767943201]: 
↓excludeMySelf [ngx.components.UIStackVariable-1634649849172]: 
  value: false