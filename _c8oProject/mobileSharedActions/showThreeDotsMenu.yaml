↓id [ngx.components.UIStackVariable-1628788766490]: 
↓currentIndex [ngx.components.UIStackVariable-1628788923411]: 
↓page [ngx.components.UIStackVariable-1628789515982]: 
↓folder [ngx.components.UIStackVariable-1629224725364]: 
  value: false
↓IfElse [ngx.components.UIDynamicIf-1629224808788]: 
  beanData: '{"ionBean":"IfElseAction","condition":"script:params.folder"}'
  ↓callViewIntoFolder [ngx.components.UICustomAction-1629224910249]: 
    isEnabled: false
  ↓Popover [ngx.components.UIDynamicAction-1629224979355]: 
    beanData: |
      '{
       "ionBean": "PopoverAction",
       "page": "plain:C8Oforms_NGX.MobileApplication.Application.popOverPageSelector",
       "data": "script:{''key'': params.id, that: params.page, folder: true}"
      }'
  ↓Else_Handler [ngx.components.UIActionElseEvent-1629224815604]: 
    ↓GetData [ngx.components.UIDynamicAction-1628788755648]: 
      beanData: |
        '{
         "ionBean": "FullSyncGetAction",
         "requestable": "plain:C8Oforms_NGX.c8oforms_fs",
         "noLoading": "plain:true",
         "_id": "script:params.id"
        }'
      ↓isVisible [ngx.components.UIDynamicInvoke-1628788755651]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms_NGX.MobileApplication.Application.isVisibleFunction
        ↓selectedForm [ngx.components.UIControlVariable-1628788755654]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:stack['GetData'].out
        ↓IfDesktopElse [ngx.components.UIDynamicIf-1628788755657]: 
          beanData: '{"ionBean":"IfElseAction","condition":"script:!page.global?.mobilePlat"}'
          ↓Popover [ngx.components.UIDynamicAction-1628788755660]: 
            beanData: |
              '{
               "ionBean": "PopoverAction",
               "page": "plain:C8Oforms_NGX.MobileApplication.Application.popOverPageSelector",
               "data": "script:{''index'':params.currentIndex, ''selectedForm'': stack[''GetData''].out, that: params.page, ''isVisible'': stack[''isVisible''].out}"
              }'
          ↓Else_Handler [ngx.components.UIActionElseEvent-1628788755663]: 
            ↓ShowActionSheet [ngx.components.UICustomAction-1628788755666]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '			if(page["pageOwner"] != undefined){
                      				page = page["pageOwner"];
                      			}
                      			let rightS = false;
                      			let doc = vars[''selectedForm''];
                      			let settings = page.global.settings;
                      			let vaL = 5;
                      			if(doc.creator == settings["~c8oAcl"]){
                      				rightS =  true;
                      			}
                      			else {
                      				rightS = false;
                      				let groups = settings.group != undefined ? Object.keys(settings.groups).filter((x)=>{ return settings.groups[x] == true}) : [];
                      				let isAcollabResp = doc.collabsResponse != undefined && (doc.collabsResponse.indexOf(settings["_id"]) != -1 || doc.collabsResponse.filter(value => (groups.indexOf(value) != -1)).length > 0);
                      				let isAcollab = doc.collabs != undefined && (doc.collabs.indexOf(settings["_id"]) != -1 || doc.collabs.filter(value => (groups.indexOf(value) != -1)).length > 0);
                      				let isAshared  = doc.shared != undefined && (doc.shared.indexOf(settings["_id"]) != -1 || doc.shared.filter(value => (groups.indexOf(value) != -1)).length > 0);
                      				if(isAcollabResp && isAcollab){
                      					vaL = 1;
                      				}
                      				else if(isAcollab){
                      					vaL = 2;
                      				}
                      				else if(isAcollabResp){
                      					vaL = 3;
                      				}
                      				else if(isAshared){
                      					vaL = 4;
                      				}
                      			}
                      			
                      				
                      				
                      			const getLevelAccesDoc = (action, val = vaL, rights = rightS)=>{
                      				if(rights == true){
                      					return rights;
                      				}
                      				switch(action){
                      					case "editView":
                      						if(val < 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					case "publishDoc":
                      						if(val < 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					case "VizualiseResponses":
                      						if(val == 1 || val == 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					case "DownloadCsv":
                      						if(val == 1 || val == 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					case "CreatePwa":
                      						if(val < 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					case "ManageAccessRights":
                      						if(val < 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					/*case "ManageAccessRightsResponses":
                      						if(val == 1 || val == 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					break;*/
                      					case "ManageLabels":
                      						if(val < 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					case "Thumbnail":
                      						if(val < 3){
                      							return true;
                      						}
                      						else{
                      							return false;
                      						}
                      					default:
                      						return false;
                      				}
                      			}
                      		
                      		
                      			
                      			const isMineOrCollab = ()=>{
                      				if(vars[''selectedForm''][''~c8oAcl''] == page.global.user){
                      					return true
                      				}
                      				else if(vars.selectedForm.c8oCollabs != undefined){
                      					var founded = Object
                      			            .keys(vars.selectedForm.c8oCollabs)
                      						.filter((x)=>{return x.substring(12) == page.global.user})
                      					return founded.length > 0;
                      				}
                      				else{
                      					return false;
                      				}
                      			}
                      		    const upperFirst = (str)=>{
                      		        return str[0].toUpperCase() + str.slice(1);
                      		    }
                      		    let actionSheetCtrl = page.getInstance(ActionSheetController)
                      		    let buttons = [];
                      		    // equivalent to editView
                      		    if(page.local.published == false && getLevelAccesDoc("editView")){
                      		        buttons.push({
                      		            text: page["translate"].instant(''Editer''),
                      		            icon: ''build'',
                      		            handler: () =>{
                      		                page["actionBeans"].STS1606727065524(page, {}, {selectedForm: vars.selectedForm}, event);
                      		            }
                      		        })
                      		    }
                      		    // equivalent to visualizeView
                      		    buttons.push({
                                      text: page["translate"].instant(''Visualiser''),
                                      icon: ''eye'',
                                      handler: () =>{
                                          page["actionBeans"].STS1606728678097(page, {}, {selectedForm: vars.selectedForm}, event);
                                      }
                                  })
                                  // equivalent to publishDoc
                                  if(page.local.published == false && getLevelAccesDoc(''publishDoc'')){
                                      buttons.push({
                                          text: page["translate"].instant(''Publier''),
                                          icon: ''arrow-redo'',
                                          handler: () =>{
                                              page["actionBeans"].STS1606729290054(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      })
                                  }
                                  
                                  // equivalent to VizualiseResponses
                                  if(page.local.published == true &&  getLevelAccesDoc(''VizualiseResponses'')){
                                      buttons.push({
                                          text: page["translate"].instant(''vizu_response''),
                                          icon: ''stats'',
                                          handler: () =>{
                                              page["actionBeans"].STS1606729949504(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      })
                                  }
                                  
                                  // equivalent to DownloadCsv
                                  if(page.local.published == true && getLevelAccesDoc(''DownloadCsv'')){
                                      buttons.push({
                                          text: page["translate"].instant(''respCsv''),
                                          icon: ''custom-csv'',
                                          handler: async () => {
                                             const name = await page["actionBeans"].STS1606731053716(page, {}, {name: vars.selectedForm.name}, event);
                                             const offset = await page["actionBeans"].STS1606731751926(page, {}, {}, event);
                                             page["actionBeans"].STS1606730370814(page, {}, {selectedForm: vars.selectedForm, name: name, offset: offset}, event);
                                          }
                                      })
                                  }
                                  
                                  // equivalent to CreatePwa
                                  if(page.local.published == true && getLevelAccesDoc(''CreatePwa'')){
                                      buttons.push({
                                          text: page["translate"].instant(''update_pwa_short''),
                                          icon: ''custom-pwa'',
                                          handler: () => {
                                            page["actionBeans"].STS1606752424750(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      })
                                  }
                                  
                                  // equivalent to GetLInkShare
                                  /*if(page.local.published == true){
                                      buttons.push({
                                          text: page.translate.instant(''linkShare''),
                                          icon: ''link'',
                                          handler: () => {
                                            page["actionBeans"].STS1606753067983(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      })
                                  }
                                  // equivalent to GetLinkSharePublic
                                  if(page.local.published == true && vars.isVisible){
                                      buttons.push({
                                          //page.upperFirst(translate.instant(''linkShareAnonymous''))
                                          text: vars.selectedForm.sharedAnonymous == true || vars.selectedForm.sharedAnonymous == "true" ? upperFirst(page.translate.instant(''linkShareAnonymous'')): upperFirst(page.translate.instant(''linkShareActive'')+ '' '' + page.translate.instant(''linkShareAnonymous'')),
                                          icon: ''link'',
                                          handler: () => {
                                            page["actionBeans"].STS1606815237125(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      })
                                  }
                                  // equivalent to DisableSharePublic
                                  if(page.local.published && (vars.selectedForm.sharedAnonymous == true || vars.selectedForm.sharedAnonymous == ''true'') && vars.isVisible){
                                      buttons.push({
                                          //page.upperFirst(translate.instant(''linkShareAnonymous''))
                                          text: page.translate.instant(''linkShareDisable''),
                                          icon: ''link'',
                                          handler: () => {
                                            page["actionBeans"].STS1606815643143(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      }) 
                                  }*/
                                  // equivalent to ManageAccessRights
                                  if((page.local.published && getLevelAccesDoc(''ManageAccessRights''))){
                                      buttons.push({
                                          //page.upperFirst(translate.instant(''linkShareAnonymous''))
                                          text: page["translate"].instant(''share_form''),
                                          icon: ''custom-share-social'',
                                          handler: () => {
                                            page["actionBeans"].STS1606819651922(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      }) 
                                  }
                                  // equivalent to ManageAccessRightsResponses
                                  if(getLevelAccesDoc(''ManageAccessRightsResponses'')){
                                      buttons.push({
                                          //page.upperFirst(translate.instant(''linkShareAnonymous''))
                                          text: page["translate"].instant(''Add_collaborators''),
                                          icon: ''key'',
                                          handler: () => {
                                            page["actionBeans"].STS1606819826094(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      }) 
                                  }
                                  // equivalent to ManageLabels
                      			if(getLevelAccesDoc(''ManageLabels'')){
                      	            buttons.push({
                      	                //page.upperFirst(translate.instant(''linkShareAnonymous''))
                      	                text: page["translate"].instant(''manage_labels''),
                      	                icon: ''folder-open'',
                      	                handler: () => {
                      	                  page["actionBeans"].STS1606819977341(page, {}, {selectedForm: vars.selectedForm, published: page.local.published}, event);
                      	                }
                      	            })
                      			} 
                                  // equivalent to copy
                                  if(!page.local.published){
                                      buttons.push({
                                          text: page["translate"].instant(''duplicate_form''),
                                          icon: ''copy'',
                                          handler: () => {
                                            page["actionBeans"].STS1606820276458(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      }) 
                                  }
                                  // equivalent to copyTo
                                  if(page.local.published && ((page.global.settings.editing_rights != undefined && page.global.settings.editing_rights == ''true'') || page.global.settings.editing_rights == undefined)){
                                      buttons.push({
                                          text: page["translate"].instant(''duplicate_form_to''),
                                          icon: ''copy'',
                                          handler: () => {
                                            page["actionBeans"].STS1606821705396(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      }) 
                                  }
                                  // equivalent to Thumbnail
                                  if(!page.local.published && getLevelAccesDoc(''Thumbnail'')){
                                      buttons.push({
                                          text: page["translate"].instant(''thumb_bg_label''),
                                          icon: ''image'',
                                          handler: () => {
                                            page["actionBeans"].STS1606825399935(page, {}, {selectedForm: vars.selectedForm}, event);
                                          }
                                      }) 
                                  }
                                  // equivalent to AddToFav (disabled feature)
                                  /*if(!page.local.published && page.global.settings.favorites != undefined && page.global.settings.favorites.indexOf(vars.selectedForm._id) == -1){
                                      buttons.push({
                                          text: page["translate"].instant(''Ajouter_aux_Favoris''),
                                          icon: ''star'',
                                          handler: () => {
                                            page["actionBeans"].STS1606826327707(page, {}, {selectedForm: vars.selectedForm, index: vars.index, that:page}, event);
                                          }
                                      }) 
                                  }*/
                                  // equivalent to AddToFav1
                                  if(!page.local.published && page.global.settings.favorites != undefined && page.global.settings.favorites.indexOf(vars.selectedForm._id) != -1){
                                      buttons.push({
                                          text: page["translate"].instant(''Remove_aux_Favoris''),
                                          icon: ''star'',
                                          handler: () => {
                                            page["actionBeans"].STS1606828487741(page, {}, {selectedForm: vars.selectedForm, index: vars.index, that:page}, event);
                                          }
                                      }) 
                                  }
                                  // equivalent to exporter
                                  buttons.push({
                                      text: page["translate"].instant(''Exporter_form''),
                                      icon: ''download'',
                                      handler: () => {
                                        page["actionBeans"].STS1606828765731(page, {}, {selectedForm: vars.selectedForm, index: vars.index, that:page}, event);
                                      }
                                  }) 
                                  // equivalent to DeleteView
                      			if(getLevelAccesDoc(''DeleteView'')){
                      				buttons.push({
                      	                text: page["translate"].instant(''Supprimer''),
                      	                icon: ''trash'',
                      	                handler: () => {
                      	                  page["actionBeans"].STS1606843476348(page, {}, {selectedForm: vars.selectedForm, index: vars.index, that:page}, event);
                      	                }
                      	            })
                      			}
                                   
                                  
                      		    
                                  buttons.push({
                                      text: page["translate"].instant(''Cancel''),
                                      role: ''cancel'',
                                      handler:() => {
                                      }
                                  })
                      		    let actionSheet = actionSheetCtrl.create({
                      		        header: vars.selectedForm.name,
                      		        buttons
                      		      })
                      		      .then((res: any)=>{
                      				res.present();
                      			  })
                      
                      		      //actionSheet.present();
                      '
              page_ts_imports: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                      - com.twinsoft.convertigo.beans.common.XMLVector: 
                        - java.lang.String: 
                          - ↑value: ActionSheetController
                        - java.lang.String: 
                          - ↑value: ionic-angular
              ↓index [ngx.components.UIControlVariable-1628788755669]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:params.currentIndex
              ↓selectedForm [ngx.components.UIControlVariable-1628788755672]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:stack['GetData'].out
              ↓isVisible [ngx.components.UIControlVariable-1628788755675]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script: stack[''isVisible''].out'