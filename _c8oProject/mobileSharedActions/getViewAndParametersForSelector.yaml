↓GetUserSettings [ngx.components.UIDynamicAction-1604669979375]: 
  beanData: |
    '{
     "ionBean": "FullSyncGetAction",
     "requestable": "plain:C8Oforms_NGX.c8oforms_fs",
     "noLoading": "plain:true",
     "_id": "script:''C8Oreserved_'' +page.c8o.session.user.name"
    }'
  ↓Failure_Handler [ngx.components.UIActionFailureEvent-1604669979378]: 
    ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1604669979381]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms_NGX.MobileApplication.Application.setLocal
      ↓val [ngx.components.UIControlVariable-1604669979384]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:true
      ↓path [ngx.components.UIControlVariable-1604669979387]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'retryGetUser'
  ↓defineSettingsAndPage [ngx.components.UICustomAction-1604669979390]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		    //define ddoc names
            		    const ddocPublished = "published_formsV2";
            		    const ddocDrafts = "formsV2";
            		    //define settings
            		    page.global.settings = props.parent.out;
            		    // get value of navparams published
            		    let navParamsPublished = page["navParams"].get(''published'');
            		    if(navParamsPublished != undefined && navParamsPublished != ":published"){
            		        let bool = navParamsPublished == true || navParamsPublished == "true";
                            page.local.published = ((page.global.settings.editing_rights != undefined && page.global.settings.editing_rights == "true") || page.global.settings.editing_rights == undefined) ? bool : true;
                        }
                        else{
                            let bool = props.parent.out["published_First"] == true || props.parent.out["published_First"] == "true";
                            page.local.published = ((page.global.settings.editing_rights != undefined && page.global.settings.editing_rights == "true") || page.global.settings.editing_rights == undefined) ? bool : true;
                            let url : string = window.location.href;
                            page.c8o.log.debug("set new url: \nprevious was: "+url);
                            var index;
                            if(url.indexOf("selector/:published") != -1){
                                index =  url.indexOf("selector/:published") + 9;
                                url = url.substring(0, index) + page.local.published + url.substring(index+10);
                            }
                            else if(url.indexOf("selector/%3Apublished") != -1){
                                index =  url.indexOf("selector/%3Apublished") + 9;
                                url = url.substring(0, index) + page.local.published + url.substring(index+12);
                            }
                            window.location.href = url;
                            page.c8o.log.debug("set new url: \nprevious was: "+url +" \nindex is: "+index+ " \nnew url is: "+url);
                           
                        }
            		    //cancel all view lives for this page
            		    page.c8o.cancelLive("viewLiveOut");
            		    page.c8o.cancelLive("viewLiveFolders");
            		    // define ddoc switch type of page
                        if(page.local.published == true || page.local.published == "true"){
                            page.local["ddoc"] = ddocPublished;
                        }
                        else{
                            if((page.global.settings.editing_rights != undefined && page.global.settings.editing_rights == "true") || page.global.settings.editing_rights == undefined){
                                page.local["ddoc"] = ddocDrafts;
                            }
                            else{
                                page.local["ddoc"] = ddocPublished;
                            }
                            
                        }
            		    if(props.parent.out["language"] == undefined){
            		        console.log(props.parent.out);
            		        let localLang = navigator.language.substring(0,2);
            		        if(!(localLang == "en" || localLang == "fr" || localLang == "es" || localLang == "it")){
            		            localLang = "en";
            		        }
            		        page.c8o.callJson("fs://c8oforms_fs.post", "_id", props.parent.out._id, "language", localLang, "_use_policy", "merge")
            		        .then((res)=>{
            		            console.log(res);
            		            return null;
            		        })
            		        .fail((e)=>{
            		            console.log(e);
            		        });
            		    }
                		resolve();
            '
    ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1604669979393]: 
      beanData: '{"ionBean":"InvokeAction"}'
      stack: C8Oforms_NGX.MobileApplication.Application.callViewLiveAndFillFormList
      ↓keys [ngx.components.UIControlVariable-1604669979396]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:null
  ↓QueryView [ngx.components.UIDynamicAction-1604669979399]: 
    beanData: |
      '{
       "ionBean": "FullSyncViewAction",
       "noLoading": "plain:true",
       "marker": "plain:viewNotifsNew",
       "fsview": "plain:C8Oforms_NGX.c8oforms_fs.notifs.new",
       "__live": "plain:idUUUU",
       "descending": "plain:true"
      }'
  ↓QueryView1 [ngx.components.UIDynamicAction-1606926301639]: 
    beanData: |
      '{
       "ionBean": "FullSyncViewAction",
       "noLoading": "plain:true",
       "marker": "plain:getTemplates",
       "fsview": "plain:C8Oforms_NGX.c8oforms_fs.templatesV2.byLang",
       "__live": "plain:liveTemplates",
       "key": "script:parent.out.language"
      }'
  ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1613732896700]: 
    beanData: '{"ionBean":"InvokeAction"}'
    stack: C8Oforms_NGX.MobileApplication.Application.viewNotifs