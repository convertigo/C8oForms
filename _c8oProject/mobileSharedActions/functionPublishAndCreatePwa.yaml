comment: used to publish or/and create/update pwa
↓CustomAction [ngx.components.UICustomAction-1617888138019]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		// define an async function to be able to use async await
          		let asyncCanvasToBlob = (canvas) =>{
          			return new Promise((resolve)=>{
          				canvas.toBlob((res)=>{
          					resolve(res);
          				});
          			})
          			
          		} 
          		let asyncGetCanavsFromColor = async (color) =>{
          			var cvs: any = document.createElement("CANVAS");
          			cvs.height = 300;
          			cvs.width = 300;
          			var ctx = cvs.getContext(''2d'');
          			ctx.fillStyle = color
          			ctx.fillRect(0, 0, 300, 300);
          			return await asyncCanvasToBlob(cvs);
          		}
          		let asyncF = async () =>{
          			try{
          				/**compute:
          				 			* idPWA like: published_123456789_pwa_document
          				 			* idEdit like: 123456789
          				 			* idPublished like: published_123456789
          				 			* newRev will be defined if a new revision has to be specified for the edition document after inserting a new thumbnail
          				*/
          				let idPWA, idEdit, idPublished, newRev, idComesIn, fromEdit;
          				if(page["navParams"].data.form._id.indexOf("published_") == -1 ){
          					idEdit = "" + page["navParams"].data.form._id;
          					idPublished = "published_" + idEdit;
          					idComesIn = ""+idEdit;
          					fromEdit = true;
          				}
          				else{
          					idPublished = "" + page["navParams"].data.form._id;
          					idEdit = "" + page["navParams"].data.form._id.substring(10);
          					idComesIn = ""+idPublished;
          					fromEdit = false;
          				}
          				idPWA = idPublished + "_pwa_document";
          				
          				// create controle document 
          				var controlDoc = {"_id":"control_document_pwaPublishAndCreateRights_"+(Math.random()+"").substring(2) + Date.now()};
          				// in case of first publication + pwa
          				if(page["navParams"].data.publishInfos != null){
          					controlDoc["publishing"] = {
          						"formRev":page["navParams"].data.publishInfos._rev,
          						"formId":page["navParams"].data.publishInfos._id
          					}
          				}
          				// add pwa properties to pwa control doc
          				controlDoc["pwa"] = {
          					"_id": idPWA,
          					"backgroundColor": page["pwa"].backgroundColor,
          					"name": page["pwa"].name,
          					"notAnonymous": page["pwa"].notAnonymous,
          					"originalFormId": idPublished,
          					"querystr": page["pwa"].querystr,
          					"shortName": page["pwa"].shortName,
          					"themeColor": page["pwa"].themeColor,
          					"thumbnail": page["pwa"].thumbnail
          				}
          				
          				
          				// if new pwa, publish icon in any case
          				if(page.local.new){
          					controlDoc["updateFinished"] = false;
          				}
          				else{
          					// if updatedImg is false, then its not a first creation and image has not been changed so no needs to republish attachments and waits for it
          					controlDoc["updateFinished"] = !page.local.updatedImg;
          				}
          				
          				// publish control doc
          				try{
          					var result = await page.c8o.callJsonObject("fs://c8oforms_fs.post", controlDoc).async();
          				}
          				catch(e){
          					page.c8o.log.error("An error occured while pushing control doc for pwa", e);
          				}
          				
          				let blob = null;
          				// if it''s a new PWA and icon (thumbnail) did not change from the one defined in the edition form
          				if(page.local.new && !page.local.updatedImg){
          					// if its an image
          					if(page["pwa"].thumbnail.type == "custom"){
          						blob = await page.c8o.callJson("fs://c8oforms_fs.get_attachment", "docid", idEdit, "name","thumbnail").async();
          					}
          					// if image has to be created from color
          					else if(page["pwa"].thumbnail.type == "color"){
          						blob = await asyncGetCanavsFromColor(page["publishInfos"].thumbnail.color);
          					}
          				}
          				// if icon (thumbnail) did change from the one defined in the edition form
          				else if(page.local.updatedImg){
          					if(page["pwa"].thumbnail.type == "custom"){
          						// if its an image
          						const nB64 = page["detectContentType"](page.local.meta.source);
          	                    let contentType = nB64[0];
          	                    let b64 = nB64[1];
          	                    blob = page["b64toBlob"](b64, contentType);
          					}
          					// if image has to be created from color
          					else if(page["pwa"].thumbnail.type == "color"){
          						blob = await asyncGetCanavsFromColor(page["publishInfos"].thumbnail.color);
          					}
          					//update the form with the new thumbnail 
          					await page.c8o.callJson("fs://c8oforms_fs.put_attachment", "docid", idComesIn, "name","thumbnail", "content_type", blob.type, "content", blob ).async();
          					// update new thumbnail property into edition doc
          					let obj = {thumbnail: page["pwa"].thumbnail};
          					page["pwa"].thumbnail.enabled = true;
          					let formThumbnailput = await page.c8o.callJsonObject("fs://c8oforms_fs.post",{
          						"_id": idComesIn,
          						thumbnail: page["pwa"].thumbnail,
          						"_use_policy":"merge",
          						"_use_merge_thumbnail":"override"
          					}
          					).async();
          					newRev = {formRev: formThumbnailput.rev};
          				}
          				// put attachment into the control document
          				await page.c8o.callJson("fs://c8oforms_fs.put_attachment", "docid", controlDoc["_id"], "name","icon", "content_type", blob.type, "content", blob ).async();
          				
          				try{
          					if(newRev != null && fromEdit){
          						// set control document finished status and new rev
          						var resultFinished = await page.c8o.callJson("fs://c8oforms_fs.post", "_id", controlDoc["_id"] ,"_use_policy", "merge","_use_merge_publishing.formRev","override", "updateFinished", true, "publishing", newRev).async();
          					}
          					else{
          						// set control document finished status
          						var resultFinished = await page.c8o.callJson("fs://c8oforms_fs.post", "_id", controlDoc["_id"] ,"_use_policy", "merge", "updateFinished", true).async();
          					}
          				}
          				catch(e){
          					page.c8o.log.error("An error occured while setting updateFinished into control doc for pwa", e);
          				}
          			}
          			catch(e){
          				page.c8o.log.error("An error occured while creating/updating control doc for pwa", e);
          			}
          		}	
          		asyncF();
          		resolve();
          '