↓DoSyncAndUpdateGetOnPull [mobile.components.UICustomAction-1574431507993]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    page.global.localform = {};
          		   
          		    /**
          		     * DESCIBES PATH TO TITLE (SIMPLE) OF EACH ELEMENT
          		    */
          		    
          		    const pathToTitle = {
          		            "text" : {"location":"config.label"},
          		            "ion-label": {"location":"config.text"},
          		            "checkbox":{"location":"config.label"},
          		            "checkbox_group":{"location":"config.label"},
          		            "radio":{"location":"config.label"},
          		            "radio_group":{"location":"config.label"},
          		            "slider":{"location":"config.label"},
          		            "select":{"location":"config.label"},
          		            "datetime":{"location":"config.label"},
          		            "time":{"location":"config.label"},
          		            "img":{"location":"config.label"},
          		            "barcode":{"location":"config.label"},
          		            "file":{"location":"config.label"},
          		            "signature":{"location":"config.label"},
          		            "ion-card":{"location":"config.title.text"}
          		            };
          		            
          		    /**
                       * DESCIBES PATH TO TITLE (HTML) OF EACH ELEMENT THAT WE WANTS TO CREATE
                      */
          		    
          		    const pathToCopy = {
                              "text" : {"location":"config.html"},
                              "ion-label": {"location":"config.html"},
                              "checkbox":{"location":"config.html"},
                              "checkbox_group":{"location":"config.html"},
                              "radio":{"location":"config.html"},
                              "radio_group":{"location":"config.html"},
                              "slider":{"location":"config.html"},
                              "select":{"location":"config.html"},
                              "datetime":{"location":"config.html"},
                              "time":{"location":"config.html"},
                              "img":{"location":"config.html"},
                              "barcode":{"location":"config.html"},
                              "file":{"location":"config.html"},
                              "signature":{"location":"config.html"},
                              "ion-card":{"location":"config.title.html"}
                              };
          		  
          		    /**
          		     * GET VALUE THAT WE WANTS TO COPY
          		    */
          		    const getValueToCopy = (obj: Array<any>, path: string, i: number = 0): any =>{
          		        const arr = path.split(".")
                          const elem = obj[arr[i]];
                          if(i === arr.length -1){
                              //finished
                              return elem;
                          }
                          else{
                              //call cursive
                             return getValueToCopy(elem, path, i + 1);
                          }
                      };
                      
                      /**
                       * COPY VALUE TO NEW PATH
                      */
                      const copyValueToNewPath = (obj: Array<any>, path: string, value: string, i: any) :void =>{
                          try{
                              if(eval("obj["+i+"]."+ pathToCopy[obj[i].type].location + "== undefined")){
                                  eval("obj["+i+"]."+ pathToCopy[obj[i].type].location + "=''"+ value+"''");
                              }
                          }
                          catch(e){
                              page.c8o.log.error("error", e);
                          }
                      }
                      
                      /**
                       * UPDATE FORM TO SUPPORT PAGE
                      */
          		    const updateToPages = (obj: Array<any>): string => {
          		        let pageTechName = "Page_" + new Date().getTime();
          		        for(let i in obj){
          		            try{
          	                    obj[i]["config"]["page"] = pageTechName;
          		            }
          		            catch(e){
          		                console.log("error during migration: \n",e);
          		            }
          		        }
          		        return pageTechName;
          		    };
          		    
          		    /**
                       * UPDATE FORM TO CREATE HTML PATH 
                      */
                      const updateHtml = (obj: Array<any>): void => {
                          for(let i in obj){
                              try{
                                  var valToCopy = getValueToCopy(obj[i], pathToTitle[obj[i].type].location);
                                  copyValueToNewPath(obj, pathToCopy[obj[i].type].location, valToCopy, i);
                              }
                              catch(e){
                                  console.log("error during migration: \n",e);
                              }
                          }
                      };
                      
                      /**
                       * UPDATE FORM TO SUPPORT CONDITIONS
                      */
                      const updateToConditions = (obj: Array<any>): void => {
                          for(let i in obj){
                              try{
                                  if(obj[i]["type"] == "radio_group" || obj[i]["type"] == "checkbox_group"){
                                          for(let child of obj[i]["children"]){
                                              child["id"] = (Math.random() + "").substring(2);
                                          }
                                          for(let child of obj[i]["lines"]){
                                              child["id"] = (Math.random() + "").substring(2);
                                          }
                                  }
                                  else if(obj[i]["type"] == "select" || obj[i]["type"] == "radio" || obj[i]["type"] == "checkbox"){
                                      for(let child of obj[i]["children"]){
                                          child["id"] = (Math.random() + "").substring(2);
                                      }
                                  }
                                  else if(obj[i]["type"] == "ion-card"){
                                      updateToConditions(obj[i]["children"]);
                                  }
                              }
                              catch(e){
                                  console.log("error during migration: \n",e);
                              }
                          }
                      };
          		    
          		    page.global["__helpersRadio"] = (arr)=>{
                          for(let elem in arr){
                              if(arr[elem]["selected"]){
                                  return arr[elem]["value"];
                              }
                          }  
                        };
                        page.global["__helpersRadioGrp"] = (arr)=>{
                            let obj = 
                            {
                            "children":
                                {
                                    
                                }
                            }
                            for(let elem in arr){
                                obj["children"][arr[elem]["title"]] = arr[elem]["selected"]
                            }
                            return obj;
                          };
                    // Calling sync continuous
                    page["datetimeconfig"][''fr''] = false;
                    page["datetimeconfig"][''en''] = false;
                    page["datetimeconfig"][''es''] = false;
                    
                    page["datetimeconfig"][page.global.language] = true;
                    let t = true;
                    let done_call_action = false
                    page.c8o.callJsonObject("fs://c8oforms_fs.sync",{
                        continuous: true,
                        retry: true,
                        batch_size: 100,
                        batches_limit: 10,
                        heartbeat: false,
                        timeout: 25000
                        })
                        .then((response: any, parameters)=>{
                            // Calling live view*/
                            return null;
                        })
                        .progress((progress)=>{
                            if(progress.finished == true){
                                if(progress.pull){
                                    page.c8o.callJsonObject("fs://c8oforms_fs.get",{docid:page.local.formId
                                    })
                                    .then((response: any, parameters)=>{
                                        let flag = false;
                                        if(response["technicalVersion"] == undefined){
                                            updateHtml(response.formulaire); 
                                            let pageTechName = updateToPages(response.formulaire); 
                                            response["technicalVersion"] = "1.0.2";
                                            let desc = response.descform;
                                            response["pages"] = [{name : "Page 1", pageTechName:pageTechName, desc:desc}];
                                            flag = true;
                                        }
                                        else if(response["technicalVersion"] == "1.0.0") {
                                            let pageTechName = updateToPages(response.formulaire); 
                                            response["technicalVersion"] = "1.0.2";
                                            let desc = response.descform;
                                            response["pages"] = [{name : "Page 1", pageTechName:pageTechName, desc: desc}];
                                            flag = true;
                                        }
                                        else if(response["technicalVersion"] == "1.0.1") {
                                            let pageTechName = updateToPages(response.formulaire); 
                                            response["technicalVersion"] = "1.0.2";
                                            let desc = response.descform;
                                            for(let i in response["pages"]){
                                                response["pages"][i].desc = desc;
                                            }
                                            
                                            flag = true;
                                        }
                                        else if(response["technicalVersion"] == "1.0.2") {
                                            updateToConditions(response.formulaire);  
                                            response["technicalVersion"] = "1.0.3";
                                            flag = true;
                                        }
                                        page["formsList"] = response.formulaire;
                                        page["form"] = response;                              
                                        if(flag){
                                            page[''updateState'']();
                                        }
                                        //search for actions that needs specific things
                                        let exists_submit = false;
                                        for(let item of page["form"]["formulaire"]){
                                            if(item.type == "submit"){
                                                exists_submit = true;
                                                if(!done_call_action){
                                                    page["actionBeans"]["STS1586453262123"](page, {}, {item:item, viewer:true}, null);
                                                    done_call_action = true;
                                                }
                                            }
                                        }
                                        for(let item of page[''form'']["actions"]){
                                            if(item.type == "submit"){
                                                exists_submit = true;
                                                if(!done_call_action){
                                                    page["actionBeans"]["STS1586453262123"](page, {}, {item:item, viewer:true}, null);
                                                    done_call_action = true;
                                                }
                                            }
                                        }
                                        
                                        page.local["exists_submit"] = exists_submit;
                                        
                                        page.ref.detectChanges();
                                        resolve();
                                        return null;
                                    })
                                }
                                
                                t = false;
                                /*this.icon.nativeElement.classList.remove("animated");
                                this.icon.nativeElement.classList.remove("jackInTheBox");
                                void this.icon.nativeElement;
                                setTimeout(() => {
                                    t = false;
                                    this.iconName = ''cloud-done'';
                                    this.icon.nativeElement.classList.add("animated");
                                    this.icon.nativeElement.classList.add("jackInTheBox");
                                    
                                }, 10);*/
                            }
                        })
                        .fail((err)=>{
                            page.c8o.log.error("Sync: " + JSON.stringify(err));
                            reject();
                        }); 
          '