↓DoSyncAndUpdateGetOnPull [mobile.components.UICustomAction-1574431507993]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    page.global.localform = {};
          		   
          		    /**
          		     * DESCIBES PATH TO TITLE (SIMPLE) OF EACH ELEMENT
          		    */
          		    
          		    const pathToTitle = {
          		            "text" : {"location":"config.label"},
          		            "ion-label": {"location":"config.text"},
          		            "checkbox":{"location":"config.label"},
          		            "checkbox_group":{"location":"config.label"},
          		            "radio":{"location":"config.label"},
          		            "radio_group":{"location":"config.label"},
          		            "slider":{"location":"config.label"},
          		            "select":{"location":"config.label"},
          		            "datetime":{"location":"config.label"},
          		            "time":{"location":"config.label"},
          		            "img":{"location":"config.label"},
          		            "barcode":{"location":"config.label"},
          		            "file":{"location":"config.label"},
          		            "signature":{"location":"config.label"},
          		            "ion-card":{"location":"config.title.text"}
          		            };
          		            
          		    /**
                       * DESCIBES PATH TO TITLE (HTML) OF EACH ELEMENT THAT WE WANTS TO CREATE
                      */
          		    
          		    const pathToCopy = {
                              "text" : {"location":"config.html"},
                              "ion-label": {"location":"config.html"},
                              "checkbox":{"location":"config.html"},
                              "checkbox_group":{"location":"config.html"},
                              "radio":{"location":"config.html"},
                              "radio_group":{"location":"config.html"},
                              "slider":{"location":"config.html"},
                              "select":{"location":"config.html"},
                              "datetime":{"location":"config.html"},
                              "time":{"location":"config.html"},
                              "img":{"location":"config.html"},
                              "barcode":{"location":"config.html"},
                              "file":{"location":"config.html"},
                              "signature":{"location":"config.html"},
                              "ion-card":{"location":"config.title.html"}
                              };
          		  
          		    /**
          		     * GET VALUE THAT WE WANTS TO COPY
          		    */
          		    const getValueToCopy = (obj: Array<any>, path: string, i: number = 0): any =>{
          		        const arr = path.split(".")
                          const elem = obj[arr[i]];
                          if(i === arr.length -1){
                              //finished
                              return elem;
                          }
                          else{
                              //call cursive
                             return getValueToCopy(elem, path, i + 1);
                          }
                      };
                      
                      /**
                       * COPY VALUE TO NEW PATH
                      */
                      const copyValueToNewPath = (obj: Array<any>, path: string, value: string, i: any) :void =>{
                          eval("obj["+i+"]."+ pathToCopy[obj[i].type].location + "=''"+ value+"''");
                      }
                      
                      /**
                       * UPDATE FORM TO CREATE HTML PATH 
                      */
          		    const updateHtml = (obj: Array<any>): void => {
          		        for(let i in obj){
          		            try{
          	                    var valToCopy = getValueToCopy(obj[i], pathToTitle[obj[i].type].location);
          	                    copyValueToNewPath(obj, pathToCopy[obj[i].type].location, valToCopy, i);
          		            }
          		            catch(e){
          		                console.log("error during migration: \n",e);
          		            }
          		        }
          		    };
          		    
          		    page.global["__helpersRadio"] = (arr)=>{
                          for(let elem in arr){
                              if(arr[elem]["selected"]){
                                  return arr[elem]["value"];
                              }
                          }  
                        };
                        page.global["__helpersRadioGrp"] = (arr)=>{
                            let obj = 
                            {
                            "children":
                                {
                                    
                                }
                            }
                            for(let elem in arr){
                                obj["children"][arr[elem]["title"]] = arr[elem]["selected"]
                            }
                            return obj;
                          };
                    // Calling sync continuous
                    page["datetimeconfig"][''fr''] = false;
                    page["datetimeconfig"][''en''] = false;
                    page["datetimeconfig"][''es''] = false;
                    
                    page["datetimeconfig"][page.global.language] = true;
                    let t = true;
                    page.c8o.callJsonObject("fs://c8oforms_fs.sync",{
                        "continuous":  true,
                                "retry": true,
                                "batch_size": 100,
                                "batches_limit": 10, 
                                "timeout": 25000
                        })
                        .then((response: any, parameters)=>{
                            // Calling live view*/
                            return null;
                        })
                        .progress((progress)=>{
                            if(progress.finished == true){
                                if(progress.pull){
                                    page.c8o.callJsonObject("fs://c8oforms_fs.get",{docid:page.local.formId
                                    })
                                    .then((response: any, parameters)=>{
                                        if(response["technicalVersion"] == undefined){
                                            updateHtml(response.formulaire); 
                                            response["technicalVersion"] = "1.0.0";
                                        }
                                        page["formsList"] = response.formulaire;
                                        page["form"] = response;
                                        resolve();
                                        return null;
                                    })
                                }
                                
                                t = false;
                                /*this.icon.nativeElement.classList.remove("animated");
                                this.icon.nativeElement.classList.remove("jackInTheBox");
                                void this.icon.nativeElement;
                                setTimeout(() => {
                                    t = false;
                                    this.iconName = ''cloud-done'';
                                    this.icon.nativeElement.classList.add("animated");
                                    this.icon.nativeElement.classList.add("jackInTheBox");
                                    
                                }, 10);*/
                            }
                        })
                        .fail((err)=>{
                            page.c8o.log.error("Sync: " + JSON.stringify(err));
                            reject();
                        }); 
          '