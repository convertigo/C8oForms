↓CheckMandatoryAndUniqueColumn [mobile.components.UICustomAction-1576329582936]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    
          		    //this.local.pages[this.local.currentIndex][''pageTechName''] == item.config.page
          		let currentIndex = vars.indexPage;
          		let pages = vars.pages;
          		let doAll = vars.doAll;
          		let submit = true;
          		let submitDoble = true;
          		page.local.redListTwoSameColumn = {};
          		
          		const checkNotEmptyCheckboxGroup = (arg1: any, itemName: string)=>{
          		    for(let line in arg1){
                          let ok = false;
                          for(let things of arg1[line]){
                              if(things.selected){
                                  ok = true;
                              }
                          }
                          if(!ok){
                              page["redList"][itemName] = true;
                              submit = false; 
                          }
                      }
          		};
          		
          		const checkNotEmptyRadioGroup = (arg1: any, itemName: string)=>{
          		    for(let line in arg1){
                          if(arg1[line] == ""){
                              page["redList"][itemName] = true;
                              submit = false; 
                          }
                          else if(arg1[line] == "__c8o__unique_other"){
                              arg1[line] = page.local[itemName+''_other''];
                          }
                      }
                  };
                  
                  const checkNotEmptyCheckbox = (arg1: any, itemName: string)=>{
                      let ok = false;
                      for(let child in arg1){
                          if(arg1[child]["selected"] == true){
                              ok = true;
                          }
                      }
                      if(!ok){
                          submit = false;
                          page["redList"][itemName] = true;
                      }
                  };
                  
                  const checkNotEmptyFile = (arg1) => {
                      if(page.global[page["idFiles"]][arg1["id"]].length == 0){
                          page["redList"][arg1["name"]] = true;
                          submit = false; 
                      }
                  }
          
                  const checkJustOneByColumnRadioGroup = (arg1: any, itemName: string)=>{
                      for(let i in arg1){
                          let current = arg1[i];
                          let find = Object.keys(arg1).map(key => arg1[key]).filter(res => res == current && res != "").length > 1;
                          if(find == true){
                            page.local.redListTwoSameColumn[itemName] = true;
                            submitDoble = false;
                            break;
                          }
                      }
                  };
                  
                  
                  const checkJustOneByColumnCheckboxGroup = (arg1: any, itemName: string, formsSubmit)=>{
                      for(let i in arg1){
                          let find = Object.keys(formsSubmit[itemName]["children"]).map(k =>formsSubmit[itemName]["children"][k][i]).filter(obj => obj.selected).length > 1;
                          if(find == true){
                            page.local.redListTwoSameColumn[itemName] = true;
                            submitDoble = false;
                            break;
                          }
                      } 
                  };
                  
                  const checkMandatoryAndJustOnebyColumn = (currentList, formsSubmit, pages, currentIndex)=>{
                      for(let item in currentList){
                          // Reassign each value as virgin
                          page["redList"][currentList[item]["name"]] = false;
                          let doThis = false;
                          if(currentIndex != undefined){
                              if(pages[currentIndex][''pageTechName''] == currentList[item]["config"]["page"]){
                                  doThis = true;
                              }
                              
                          }
                          else{
                              doThis = true;
                          }
                          if(doThis){
                              // Process just one by column
                              if(currentList[item]["config"] != undefined && currentList[item]["config"]["different"] == true){
                                  
                                  switch (formsSubmit[currentList[item]["name"]]["type"]) {
                                      case ''radio_group'':
                                          checkJustOneByColumnRadioGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                          break;
                                      case ''checkbox_group'':
                                          checkJustOneByColumnCheckboxGroup(currentList[item]["children"], currentList[item]["name"], formsSubmit);
                                          break;
                                      default:
                                          break;
                                  }
                              
                              }
                              // Process check mandatory
                              if(currentList[item]["config"] != undefined && currentList[item]["config"]["mandatory"] == true){
                                  if(formsSubmit[currentList[item]["name"]]["value"] === "" || formsSubmit[currentList[item]["name"]]["value"] === undefined){
                                      
                                      switch (currentList[item]["type"]) {
                                          case ''radio_group'':
                                              checkNotEmptyRadioGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                              break;
                                          case ''checkbox_group'':
                                              checkNotEmptyCheckboxGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                              break;
                                          case ''file'':
                                              checkNotEmptyFile(currentList[item]);
                                              break;
                                          case "checkbox":
                                              checkNotEmptyCheckbox(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                              break;
                                          default:
                                              page["redList"][currentList[item]["name"]] = true;
                                              submit = false;
                                              break;
                                  }
                                      
                                  }
                              }
                              // Recursive call for cards
                              else if(currentList[item]["type"] == "ion-card"){
                                  checkMandatoryAndJustOnebyColumn(currentList[item]["children"], formsSubmit[currentList[item]["name"]]["children"], pages, currentIndex);
                              }   
                          }
                          
                      }
                  }
                  
                      
          		
          
                  let putAttachments = (formSubmit) => {
                      for(let item in formSubmit){
                          if(formSubmit[item]["type"] == "signature" || formSubmit[item]["type"] == "img"){
                              if(formSubmit[item]["value"] != ""){
                                  if(page.local.objAtt == null){
                                      page.local.objAtt = {};
                                  }
                                  page.local.objAtt[formSubmit[item]["name"]]  = {
                                              "content_type": (formSubmit[item]["type"] == "signature" ? ''image/png'' : ''image/jpg''),
                                             "data": (formSubmit[item]["type"] == "img" ? formSubmit[item]["value"] : formSubmit[item]["value"].substring(22)),
                                             "name":formSubmit[item]["name"]
                                          }
                                  }
                              
                          }
                          else if(formSubmit[item]["type"] == "radio" && formSubmit[item]["value"] == "__c8o__unique_other"){
                              formSubmit[item]["children"][formSubmit[item]["children"].length -1].value = page.local[formSubmit[item].name+"_other"];
                              formSubmit[item]["value"] = page.local[formSubmit[item].name+"_other"];
                              formSubmit[item]["children"][formSubmit[item]["children"].length -1].other = true;
                              //page.local[formSubmit[item].name+"_other"]
                          }
                          else if(formSubmit[item]["type"] == "ion-card"){
                              putAttachments(formSubmit[item]["children"]);
                          }
                          }   
                      }
                  
                 let getPathById = (id, form = (<any>page).form.formulaire, index = [])=>{
                      for(let elem of form){
                          if(elem.id == id){
                              index.push(elem.name)
                              return index;
                          }
                          else if(elem.type == "ion-card"){
                              return getPathById(id, elem.children, [elem.name]);
                          }
                      }
                  }
                  let searchForActions = () => {
                      page["local"]["submitActions"] = {}
                      if(page["form"]["actions"] != undefined){
                          for(let elem of page["form"]["actions"]){
                              if(elem["cat"] == "action"){
                                  if(page["local"]["submitActions"][elem["type"]] == null){
                                      page["local"]["submitActions"][elem["type"]] = []
                                  }
                                  page["local"]["submitActions"][elem["type"]].push(elem);
                                  const regex = /[$$]{2}\w+[$$]{2}/gm
                                  for(let action in elem.actions){
                                      if(elem.actions[action].enabled == true){
                                          for(let va in elem.actions[action]["vars"]){
                                              
                                              let str = elem.actions[action]["vars"][va].str;
                                              if(str == undefined){
                                                  str = "";
                                              }
                                              var arrayFound = str.match(regex);
                                              
                                              if(arrayFound!= undefined && arrayFound.length > 0){
                                                  for(let elements of arrayFound){
                                                      let iStart = str.indexOf(elements);
                                                      let iEnd = iStart + elements.length;
                                                      let id = elements.substring(2, elements.length -2);
              
                                                      let path = getPathById(id);
                                                      let currentVal = "";
                                                      if(path.length == 1){
                                                          currentVal = page["formsSubmit"][path[0]].value;
                                                      }
                                                      else if(path.length == 2){
                                                          currentVal = page["formsSubmit"][path[0]].children[path[1]].value;
                                                      }
                                                      str = str.substring(0, iStart) + currentVal + str.substring(iEnd);
                                                      
                                                  }
                                                  elem.actions[action]["vars"][va] = str;
                                              }
                                              else{
                                                  elem.actions[action]["vars"][va] = elem.actions[action]["vars"][va].str != undefined ? elem.actions[action]["vars"][va].str : "";
                                              }
                                          }
                                      }
                                      
                                  }
                              }
                          }
                      }
                  }
                 
          
           /**
            let searchForActions = () => {
                      page["local"]["submitActions"] = {}
                      for(let elem of page["formsList"]){
                          if(elem["cat"] == "action"){
                              if(page["local"]["submitActions"][elem["type"]] == null){
                                  page["local"]["submitActions"][elem["type"]] = []
                              }
                              page["local"]["submitActions"][elem["type"]].push(elem);
                              
                              for(let action in elem.actions){
                                  for(let va in elem.actions[action]["vars"]){
                                      
                                      if(elem.actions[action]["vars"][va].source == true){
                                          let path = getPathById(elem.actions[action]["vars"][va].str);
                                          if(path.length == 1){
                                              elem.actions[action]["vars"][va] = page["formsSubmit"][path[0]].value;
                                          }
                                          else if(path.length == 2){
                                              elem.actions[action]["vars"][va] = page["formsSubmit"][path[0]].children[path[1]].value;
                                          }
                                      }
                                      else{
                                          elem.actions[action]["vars"][va] = elem.actions[action]["vars"][va].str != undefined ? elem.actions[action]["vars"][va].str : "";
                                      }
                                      /*if(page["formsSubmit"][va.substring(6)] != undefined){
                                          elem.actions[action]["vars"][va]  = page["formsSubmit"][va.substring(6)]["value"];
                                      } /*endcomment
                                  }
                              }
                          }
                      }
                  }
            
           **/       
                  
                  // call the function
                  checkMandatoryAndJustOnebyColumn(page["formsList"], page["formsSubmit"], pages, currentIndex);
                  if(doAll == true){
                      putAttachments(page["formsSubmit"]);
                      searchForActions();
                  }
          		
          		page.tick();
          		if(submit && submitDoble){
          		    if(doAll == true){
          		        let translate = page.getInstance(TranslateService);
          	            let obs1 = translate.get(''formSubmitted'');
          	            let obs2 = translate.get(''submitForm'');
          	            let obs3 = translate.get(''sendForm'');
          	            zip(obs1, obs2, obs3).subscribe((res)=>{
          	                page["formSubmittedStr"] = res[0];
          	                page["this.submitFormStr"] = res[1];
          	                page["sendFormStr"] = res[2];
          	                resolve({"animate":false});
          	            });
          		    }
          		    else{
          		        resolve({"ok": true});
          		    }
          		    
          		  
          		  
          		}
          		else{
          		    resolve({"animate":true, "submit":submit, "submitDoble":submitDoble});
          		}
          '
  page_ts_imports: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: of, zip
            - java.lang.String: 
              - ↑value: rxjs
  ↓ifFormFillesCorrectly [mobile.components.UIDynamicIf-1576329798941]: 
    beanData: '{"ionBean":"IfElseAction","condition":"script:parent.out.animate != true && parent.out.ok != true"}'
    ↓showAlertConfirmation [mobile.components.UIDynamicAction-1576329916201]: 
      beanData: |
        '{
         "ionBean": "AlertAction",
         "title": "script:c8oPage.submitFormStr",
         "subTitle": "script:c8oPage.sendFormStr",
         "message": "plain:",
         "cssClass": "plain:alertCustomCss",
         "button1": "plain:CANCEL",
         "button2": "plain:OK",
         "value1": "plain:0",
         "value2": "plain:1",
         "cancel1": "plain:cancel"
        }'
      ↓IfConfirmed [mobile.components.UIDynamicAction-1576329916204]: 
        beanData: '{"ionBean":"IfAction","condition":"script:parent.out == 1"}'
        ↓InitValsForFIles [mobile.components.UICustomAction-1576330045869]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  		    //Set globals
                  		    page.local["epoch2"] = (new Date()).getTime() + "";
                  		    const doStuff = ()=>{
                                  page.global['__viewindeok']= [];
                                  let flat = page["flatArray"]();
                                  page.global["__viewerTotal"] = flat[1];
                                  page.global["__viewerarr"] = flat[0];
                                  
                                  page["cpt"] = 0;
                                  
                                  // for any case we define adequat id an formId to use for pushing doc and if there is to push or delete files
                                  if(page.local.anonymous == true){
                                      var array = new Uint32Array(2);
                                      let result = RandomVal(array);
                                      let random = result[0] * result[1];
                                      let formId = page.local.formId.substring(0, page.local.formId.length -10);
                                      page.local.myId = 'anonymous-'+ random +'_'+ formId + '_' + page["epoch"];
                                      page.local.myFormId = formId;
                                      page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0;
                                  }
                                  else if(page["edit"] == true){
                                      page.local.myId = page["navParams"]["data"]["edit"];
                                      page.local.myFormId = page["form"]["_id"];
                                      page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0 ||  page.global["__C8O_TODELETE"].length >0;
                                      let grpName = "_C8O_HIDDEN_" + page.local.myFormId;//((page["form"]["creator"].replace(/@/g,'_')).replace(/\./g,'-')) + page.local.myFormId;
                                      page.local.grp[grpName] = true;
                                      
                                  }
                                  else{
                                      page.local.myId = page.local.user+'_'+page.local.formId+'_'+page["epoch"];
                                      page.local.myFormId = page.local.formId;
                                      page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0;
                                      page.local.grp = {};
                                      let grpName = "_C8O_HIDDEN_" + page.local.myFormId;//((page["form"]["creator"].replace(/@/g,'_')).replace(/\./g,'-')) + page.local.myFormId;
                                      page.local.grp[grpName] = true;
                                  }
                                  
                                  resolve();
                              }
                  		    
                  		    doStuff();
                  		    
                  		    
                              
                  
          package_dependencies: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: get-random-values
                    - java.lang.String: 
                      - ↑value: 1.2.0
          page_ts_imports: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: '* as RandomVal'
                    - java.lang.String: 
                      - ↑value: get-random-values
          ↓IfElse [mobile.components.UIDynamicIf-1593706558809]: 
            beanData: '{"ionBean":"IfElseAction","condition":"script:this.local.anonymous"}'
            ↓CustomAction [mobile.components.UICustomAction-1593708089557]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '		
                      		page.local.submitActions2 = JSON.stringify(page.local["submitActions"]);
                      		page.local.grp2 = JSON.stringify(page.local.grp);
                      		page.local.filesToSeq = [];
                      		page.local.filesInfoToSeq = [];
                      		// post r
                      		let postRecursive = (arr: any, index: number, total: number, id: any = null) => {
                      		    return new Promise((resolve)=>{
                      		        if(total == 0 || arr == undefined){
                      	                resolve();
                      	            }
                      		        else{
                      	                let ids = id != null ? id: page.local.user+''_''+page.local.edit+''_''+page["epoch"];
                      	                let args;
                      	                let type = (arr[index]["file"].type == undefined || arr[index]["file"].type == "") ? "application/octet-stream":arr[index]["file"].type;
                                          let file: Blob = arr[index]["file"];
                      	                let name = arr[index]["bean"] + "_C80C80_" +arr[index]["file"]["name"]+"_C80C80_"+(new Date).getTime()
                      	                if(name.indexOf("_C80C80_") != -1){
                                              let id = name.substring(0, name.indexOf("_"));
                                              for(let el of page["formsList"]){
                                                  if(el.id == id){
                                                      if(page["formsSubmit"][el.name]["value"] == undefined || page["formsSubmit"][el.name]["value"] == ""){
                                                          page["formsSubmit"][el.name]["value"] = [];
                                                      }
                                                      page["formsSubmit"][el.name]["value"].push(name);
                                                      
                                                  }
                                              }
                                              //"1581416653460_C80C80_captureWebsocketPayDarty.PNG_C80C80_1581516753158".substring(0,"1581416653460_C80C80_captureWebsocketPayDarty.PNG_C80C80_1581516753158".indexOf("_"))
                                          }
                      	                page.local.filesToSeq.push(file);
                      	                page.local.filesInfoToSeq.push({
                                                  "docid":ids,
                                                  "name": name,
                                                  "content_type": type,
                                                  "index":index
                                          }) 
                      	                
                      	                page["cpt"]= page["cpt"]+1;
                                          //console.log("Progress: " +page.cpt+ " / "+ total);
                                          page.global[''cptTotal''] = page.global[''cptTotal''] + 1;
                                          page.global["__viewerProgress"] = page["cpt"];
                                          page.global["__viewerProgressDelete"] = page.global["__viewerProgressDelete"] +page["cpt"];
                                          page.global[''__viewerarr''][index].file["ok"]= true;
                                          page.global[''__viewindeok''][index]= true;
                                          if(page["cpt"] == total){
                                              console.log("finished");
                                              resolve();
                                          }
                                          else{
                                              postRecursive(arr, index + 1, total, ids)
                                              .then(()=>{
                                                  resolve();
                                              });
                      
                                          }
                      	                    
                      	                
                      		        }
                      		    });
                      		}
                      		
                      		let processSingature = ()=>{
                      		    if(page.local.objAtt != undefined){
                      		        for(let item in page.local.objAtt){
                      	                //let type = () ? "application/octet-stream":arr[index]["file"].mediaType;
                      	                page.local.filesToSeq.push(
                      	                        page.local.objAtt[item]["data"]
                      	                );  
                      	                page.local.filesInfoToSeq.push({
                      	                    "docid":page.local.myId,
                                              "name": page.local.objAtt[item]["name"],
                                              "content_type": page.local.objAtt[item]["content_type"]
                                      })
                      	            }
                      		    }
                      		}
                      		
                      		 page.global["totalcount"] =  page.global[''__C8O_TODELETE''].length + page.global[''__viewerarr''].length;
                               page.global[''cptTotal''] = 0;   
                               page.local["submitting"] = true;
                               postRecursive(page.global["__viewerarr"], 0, page.global["__viewerTotal"], page.local.myId)
                               .then((res)=>{
                                   processSingature();
                                   page.local.formsSubmit2 = JSON.stringify(page["formsSubmit"]);
                                   page.local.filesInfoToSeq = JSON.stringify(page.local.filesInfoToSeq);
                                   resolve();
                               })
                      		
                      		
                      		
                      '
              ↓CallSequence [mobile.components.UIDynamicAction-1593706618921]: 
                beanData: |
                  '{
                   "ionBean": "CallSequenceAction",
                   "requestable": "plain:C8Oforms.submitResponseAnonymous",
                   "noAutoLogin": "plain:true"
                  }'
                ↓login [mobile.components.UIControlVariable-1593706635663]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.user
                ↓resp [mobile.components.UIControlVariable-1593706635665]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.formsSubmit2
                ↓grp [mobile.components.UIControlVariable-1593706635677]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.grp2
                ↓myId [mobile.components.UIControlVariable-1593706635679]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.myId
                ↓formId [mobile.components.UIControlVariable-1593706671643]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.myFormId
                ↓timestamp [mobile.components.UIControlVariable-1593706671646]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.epoch2
                ↓formRev [mobile.components.UIControlVariable-1593706671649]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local._rev
                ↓version [mobile.components.UIControlVariable-1593706671652]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:c8oPage.form?.version != undefined ? c8oPage.form?.version : ''test'''
                ↓actions [mobile.components.UIControlVariable-1593706671655]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.submitActions2
                ↓files [mobile.components.UIControlVariable-1593716868228]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.filesToSeq
                ↓filesInfo [mobile.components.UIControlVariable-1593717582423]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.filesInfoToSeq
                ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1593718391476]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPageFINISH
            ↓Else_Handler [mobile.components.UIActionElseEvent-1593706568809]: 
              ↓PostData [mobile.components.UIDynamicAction-1576330746736]: 
                beanData: |
                  '{
                   "ionBean": "FullSyncPostAction",
                   "requestable": "plain:C8Oforms.c8oforms_response_fs",
                   "_id": "script:c8oPage.local.myId",
                   "_use_policy": "plain:merge",
                   "c8oGrp": "script:c8oPage.local.grp"
                  }'
                ↓resp [mobile.components.UIControlVariable-1576330746739]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.formsSubmit
                ↓formId [mobile.components.UIControlVariable-1576330746742]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.myFormId
                ↓timestamp [mobile.components.UIControlVariable-1576330746745]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.epoch2
                ↓formRev [mobile.components.UIControlVariable-1586523081299]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local._rev
                ↓version [mobile.components.UIControlVariable-1580225981752]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:c8oPage.form?.version != undefined ? c8oPage.form?.version : ''test'''
                ↓PostAttachment [mobile.components.UICustomAction-1581498508095]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '		    if(page.local["objAtt"] != undefined){
                          
                          		        let push = (arr, index)=>{
                                              page.router.c8o.callJsonObject("fs://c8oforms_response_fs.put_attachment",arr[index])
                                              .then((res, params)=>{
                                                  if(!(array.length -1 == index)){
                                                      push(arr, index+1);
                                                  }
                                                  else{
                                                      resolve();
                                                  }
                                                  return null;
                                              })
                                              .fail((err)=>{
                                                  page.c8o.log.error("Error: ProcessSubmitFormViewerPage => PostAttachment", err);
                                              });
                                      }
                                      let array = [];
                                      for(let item in page.local.objAtt){
                                          //let type = () ? "application/octet-stream":arr[index]["file"].mediaType;
                                          array.push({
                                                  "docid":page.local.myId,
                                                  "name": page.local.objAtt[item]["name"],
                                                  "content_type": page.local.objAtt[item]["content_type"],
                                                  "content": page.local.objAtt[item]["data"]
                                          });                  
                                      }
                                      push(array, 0);
                          		    }
                          		    else{
                          		        resolve();
                          		    }		 
                          '
                  ↓IfThereIsFileToSubmitOrDelete [mobile.components.UIDynamicIf-1576330886405]: 
                    beanData: '{"ionBean":"IfElseAction","condition":"script:c8oPage.local.myIsOnModeFile"}'
                    ↓Modal_Page [mobile.components.UIDynamicAction-1576331215971]: 
                      beanData: |
                        '{
                         "ionBean": "ModalAction",
                         "page": "plain:C8Oforms.MobileApplication.Application.progressPage",
                         "blockWhileDisplayed": "plain:true",
                         "cssClass": "plain:update-profile-modal"
                        }'
                      ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1576513364135]: 
                        beanData: '{"ionBean":"InvokeAction"}'
                        stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPageFINISH
                    ↓PostAttachment [mobile.components.UICustomAction-1576331215977]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              		    if(page["edit"] == true){
                              		        page.global["totalcount"] =  page.global['__C8O_TODELETE'].length + page.global['__viewerarr'].length;
                              		        page.global['cptTotal'] = 0;   
                              		        page.local["submitting"] = true;
                              		        if(page.global["__viewerarr"] == undefined){
                              		            page.global["__viewerarr"] == [];
                              		        }
                              		        page.global["__viewerProgressDelete"] = 0;
                              		        page.global["viewerTotalDelAdd"] =  page.global["__C8O_TODELETE"].length + page.global["__viewerTotal"];
                              		        page["deleteRecursive"](page.global["__C8O_TODELETE"], 0, page.global["__C8O_TODELETE"].length, page.local.myId)
                              		        .then(()=>{
                              		            page["postRecursive"](page.global["__viewerarr"], 0, page.global["__viewerTotal"],page.local.myId)
                              		            .then(()=>{
                              		                page.global["totalcount"] = 1;
                              		                page.global['cptTotal'] = 1;
                              		                page.c8o.callJsonObject("fs://.get", {"docid":page.local.myId, "_attachments":true})
                              		                .then((res)=>{
                              		                    console.log("ok@",res);
                              		                    return null;
                              		                })
                              		                .fail((err)=>{
                              		                    console.log("err",err);
                              		                })
                              		                
                              		               resolve(); 
                              		            });
                              		        });
                              		    }
                              		    else{
                              		        //page.local.myId
                              		        page.global["totalcount"] =  page.global['__C8O_TODELETE'].length + page.global['__viewerarr'].length;
                              		        page.global['cptTotal'] = 0;   
                              		        page.local["submitting"] = true;
                              		        page["postRecursive"](page.global["__viewerarr"], 0, page.global["__viewerTotal"], page.local.myId)
                              	            .then(()=>{
                              	                page.c8o.callJsonObject("fs://c8oforms_response_fs.get", {"docid":page.local.myId, "_attachments":true})
                              	                .then((res)=>{
                                                      console.log("ok@",res);
                                                      for(let i in res["_attachments"]){
                                                          if(i.indexOf("_C80C80_") != -1){
                                                              let id = i.substring(0, i.indexOf("_"));
                                                              for(let el of page["formsList"]){
                                                                  if(el.id == id){
                                                                      if(page["formsSubmit"][el.name]["value"] == undefined || page["formsSubmit"][el.name]["value"] == ""){
                                                                          page["formsSubmit"][el.name]["value"] = [];
                                                                      }
                                                                      page["formsSubmit"][el.name]["value"].push(i);
                                                                      
                                                                  }
                                                              }
                                                              //"1581416653460_C80C80_captureWebsocketPayDarty.PNG_C80C80_1581516753158".substring(0,"1581416653460_C80C80_captureWebsocketPayDarty.PNG_C80C80_1581516753158".indexOf("_"))
                                                          }
                                                      }
                                                      
                                                      page.c8o.callJson("fs://c8oforms_response_fs.post", "_id",page.local.myId,"_use_policy","merge", "resp", page["formsSubmit"], "finished", true)
                                                      .then((res)=>{
                                                          console.log("@@res", res);
                                                          return null;
                                                      })
                                                      .fail((err)=>{
                                                          console.log("@err", err);
                                                      })
                                                      return null; 
                                                  })
                                                  .fail((err)=>{
                                                      console.log("err",err);
                                                  })
                              	                page.global["totalcount"] = 1;
                              	                page.global['cptTotal'] = 1;
                              	                
                              	               resolve(); 
                              	            });
                              		    }
                                              
                              		 
                              
                    ↓Else_Handler [mobile.components.UIActionElseEvent-1576330889356]: 
                      ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1576513320747]: 
                        beanData: '{"ionBean":"InvokeAction"}'
                        stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPageFINISH
                ↓c8oGrp [mobile.components.UIControlVariable-1582627302373]: 
                  isEnabled: false
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.grp
                ↓actions [mobile.components.UIControlVariable-1586512058300]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:page['local']['submitActions']
                ↓finished [mobile.components.UIControlVariable-1601039945190]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:!c8oPage.local.myIsOnModeFile
    ↓Else_Handler [mobile.components.UIActionElseEvent-1576329803906]: 
      ↓IfElse [mobile.components.UIDynamicIf-1592831596052]: 
        beanData: '{"ionBean":"IfElseAction","condition":"script:stack[''CheckMandatoryAndUniqueColumn''].out.animate == true"}'
        ↓SetRedAndAnimate [mobile.components.UICustomAction-1576329825047]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '		    let first = false;
                  		    /* if(this.redList[''respNameRequired'']){
                  		        this.divResponseName.nativeElement.classList.remove("animated");
                                  this.divResponseName.nativeElement.classList.remove("shake");
                                  if(!first){
                                      this.divResponseName.nativeElement.scrollIntoView({block: "center", inline: "nearest", behavior:"smooth"});   
                                      first = true;
                                  }
                                  setTimeout(() => {
                                      this.divResponseName.nativeElement.classList.add("animated");
                                      this.divResponseName.nativeElement.classList.add("shake");
                                      
                                  }, 50);
                  		    }*/
                  		    
                  		    //this.setRedSpecs(this.all_divtext[''_results''], first);
                              //this.setRedSpecs(this.all_divimg[''_results''], first);
                  		    let shake = (item: any)=>{
                  		        item.nativeElement.classList.remove("animate__animated");
                                  item.nativeElement.classList.remove("animate__shakeX");
                                  if(!first){
                                      item.nativeElement.scrollIntoView({block: "center", inline: "nearest", behavior:"smooth"});   
                                      first = true;
                                  }
                                  setTimeout(() => {
                                      item.nativeElement.classList.add("animate__animated");
                                      item.nativeElement.classList.add("animate__shakeX");
                                      
                                  }, 50);
                  		    }
                  		    
                  		    for(let item of page["all_divtext"][''_results'']){
                  		        let find;
                  		        let findDobleColumn;
                  		        if(item.nativeElement.id.indexOf("_C8o#") != -1){
                  		            find = page["redList"][item.nativeElement.id.substring(0,item.nativeElement.id.indexOf("_C8o#"))][item.nativeElement.id.substring(item.nativeElement.id.indexOf("_C8o#")+5)];
                  		            findDobleColumn = page.local.redListTwoSameColumn[item.nativeElement.id.substring(0,item.nativeElement.id.indexOf("_C8o#"))][item.nativeElement.id.substring(item.nativeElement.id.indexOf("_C8o#")+5)];
                  		        }
                  		        else{
                  		            find = page["redList"][item.nativeElement.id];
                  		            findDobleColumn = page.local.redListTwoSameColumn[item.nativeElement.id];
                  		        }
                                  if(find && findDobleColumn){
                                      shake(item);
                                  }
                                  else if(find){
                                      shake(item);
                                  }
                                  else if(findDobleColumn){
                                      shake(item);
                                  }
                                  
                              }
                  		   
                  		resolve();
                  '
        ↓Else_Handler [mobile.components.UIActionElseEvent-1592831633547]: 
          ↓CustomAction [mobile.components.UICustomAction-1592831642675]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		resolve({"nextPage":true});
                    
  ↓indexPage [mobile.components.UIControlVariable-1592830860163]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.indexPage
  ↓pages [mobile.components.UIControlVariable-1592830962017]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.pages
  ↓doAll [mobile.components.UIControlVariable-1592831552052]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.doAll
↓indexPage [mobile.components.UIStackVariable-1592830817786]: 
  value: this.local.currentIndex
↓pages [mobile.components.UIStackVariable-1592830949002]: 
  value: this.local.pages
↓doAll [mobile.components.UIStackVariable-1592831535509]: 
  value: true