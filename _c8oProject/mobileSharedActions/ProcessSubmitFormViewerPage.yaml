↓CheckMandatoryAndUniqueColumn [ngx.components.UICustomAction-1576329582936]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		    
          		    //page.local.pages[page.local.currentIndex][''pageTechName''] == item.config.page
          		if(page["pageOwner"] !=undefined){
          			page = page["pageOwner"];
          		}
          		let currentIndex = vars.indexPage;
          		let pages = vars.pages;
          		let doAll = vars.doAll;
          		let submit = true;
          		let submitDoble = true;
          		page.local.redListTwoSameColumn = {};
          		
          		const checkNotEmptyCheckboxGroup = (arg1: any, itemName: string)=>{
          		    for(let line in arg1){
                          let ok = false;
                          for(let things of arg1[line]){
                              if(things.selected){
                                  ok = true;
                              }
                          }
                          if(!ok){
                              page["redList"][itemName] = true;
                              submit = false; 
                          }
                      }
          		};
          		
          		const checkNotEmptyRadioGroup = (arg1: any, itemName: string)=>{
          		    for(let line in arg1){
                          if(arg1[line] == ""){
                              page["redList"][itemName] = true;
                              submit = false; 
                          }
                          else if(arg1[line] == "__c8o__unique_other"){
                              arg1[line] = page.local[itemName+''_other''];
                          }
                      }
                  };
                  
                  const checkNotEmptyCheckbox = (arg1: any, itemName: string)=>{
                      let ok = false;
                      for(let child in arg1){
                          if(arg1[child]["selected"] == true){
                              ok = true;
                          }
                      }
                      if(!ok){
                          submit = false;
                          page["redList"][itemName] = true;
                      }
                  };
                  
                  const checkNotEmptyFile = (arg1) => {
                      if(page.global[page["idFiles"]][arg1["id"]].length == 0){
                          page["redList"][arg1["name"]] = true;
                          submit = false; 
                      }
                  }
          
                  const checkJustOneByColumnRadioGroup = (arg1: any, itemName: string)=>{
                      for(let i in arg1){
                          let current = arg1[i];
                          let find = Object.keys(arg1).map(key => arg1[key]).filter(res => res == current && res != "").length > 1;
                          if(find == true){
                            page.local.redListTwoSameColumn[itemName] = true;
                            submitDoble = false;
                            break;
                          }
                      }
                  };
                  
                  
                  const checkJustOneByColumnCheckboxGroup = (arg1: any, itemName: string, formsSubmit)=>{
                      for(let i in arg1){
                          let find = Object.keys(formsSubmit[itemName]["children"]).map(k =>formsSubmit[itemName]["children"][k][i]).filter(obj => obj.selected).length > 1;
                          if(find == true){
                            page.local.redListTwoSameColumn[itemName] = true;
                            submitDoble = false;
                            break;
                          }
                      } 
                  };
                  
                  const checkMandatoryAndJustOnebyColumn = (currentList: any, formsSubmit, pages, currentIndex)=>{
                      for(let item in currentList){
                          // Reassign each value as virgin
                          page["redList"][currentList[item]["name"]] = false;
                          let doThis = false;
                          if(currentIndex != undefined){
                              if(pages[currentIndex][''pageTechName''] == currentList[item]["config"]["page"]){
                                  doThis = true;
                              }
                              
                          }
                          else{
                              doThis = true;
                          }
          				if(doThis){
          					try{
          						doThis = currentList[item].conditions != undefined  ? eval(page["evaluateConditions"](currentList[item].conditions)) : true 
          					}
          					catch(e){
          						// normal do nothing
          					}
          					
          				}
                          if(doThis){
                              // Process just one by column
                              if(currentList[item]["config"] != undefined && currentList[item]["config"]["different"] == true){
                                  
                                  switch (formsSubmit[currentList[item]["name"]]["type"]) {
                                      case ''radio_group'':
                                          checkJustOneByColumnRadioGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                          break;
                                      case ''checkbox_group'':
                                          checkJustOneByColumnCheckboxGroup(currentList[item]["children"], currentList[item]["name"], formsSubmit);
                                          break;
                                      default:
                                          break;
                                  }
                              
                              }
                              // Process check mandatory
                              if(currentList[item]["config"] != undefined && currentList[item]["config"]["mandatory"] == true){
                                  if(formsSubmit[currentList[item]["name"]]["value"] === "" || formsSubmit[currentList[item]["name"]]["value"] === undefined){
                                      
                                      switch (currentList[item]["type"]) {
                                          case ''radio_group'':
                                              checkNotEmptyRadioGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                              break;
                                          case ''checkbox_group'':
                                              checkNotEmptyCheckboxGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                              break;
                                          case ''file'':
                                              checkNotEmptyFile(currentList[item]);
                                              break;
                                          case "checkbox":
                                              checkNotEmptyCheckbox(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                              break;
                                          default:
                                              page["redList"][currentList[item]["name"]] = true;
                                              submit = false;
                                              break;
                                  	}
                                      
                                  }
          						else if(currentList[item]["type"] === "location"){
          							if(Object.keys(formsSubmit[currentList[item]["name"]]["value"].gps).length == 0){
          								page["redList"][currentList[item]["name"]] = true;
                                          submit = false;
          							}
          						}
          						else if(currentList[item]["type"] === "grid"){
          							if(currentList[item].config.returned_value == "cell_selected" || currentList[item].config.returned_value == "row_selected"){
          								if(JSON.stringify(formsSubmit[currentList[item]["name"]]["value"]) == JSON.stringify({})){
          									page["redList"][currentList[item]["name"]] = true;
                                              submit = false;
          								}
          							}
          						}
                              }
                              // Recursive call for cards
                              else if(currentList[item]["type"] == "ion-card"){
                                  checkMandatoryAndJustOnebyColumn(currentList[item]["children"], formsSubmit[currentList[item]["name"]]["children"], pages, currentIndex);
                              }   
                          }
                          
                      }
                  }
                  
                      
          		
          
                  let putAttachments = (formSubmit) => {
                      for(let item in formSubmit){
                          if(formSubmit[item]["type"] == "signature" || formSubmit[item]["type"] == "img"){
                              if(formSubmit[item]["value"] != ""){
                                  if(page.local.objAtt == null){
                                      page.local.objAtt = {};
                                  }
          						if(formSubmit[item]["value"] instanceof File || formSubmit[item]["value"] instanceof Blob){
          							page.local.objAtt[formSubmit[item]["name"]]  = 
          								{
                                          	"content_type": formSubmit[item]["value"].type,
                                              "data": formSubmit[item]["value"],
                                             	"name":formSubmit[item]["name"]
                                          }
          						}
          						else{
          							page.local.objAtt[formSubmit[item]["name"]]  = 
          								{
                                          	"content_type": (formSubmit[item]["type"] == "signature" ? ''image/png'' : ''image/jpg''),
                                              "data": (formSubmit[item]["type"] == "img" ? formSubmit[item]["value"] : formSubmit[item]["value"].substring(22)),
                                             	"name":formSubmit[item]["name"]
                                          }
          						}
                                  
                                  }
                              
                          }
                          else if(formSubmit[item]["type"] == "radio" && formSubmit[item]["value"] == "__c8o__unique_other"){
                              formSubmit[item]["children"][formSubmit[item]["children"].length -1].value = page.local[formSubmit[item].name+"_other"];
                              formSubmit[item]["value"] = page.local[formSubmit[item].name+"_other"];
                              formSubmit[item]["children"][formSubmit[item]["children"].length -1].other = true;
                              //page.local[formSubmit[item].name+"_other"]
                          }
                          else if(formSubmit[item]["type"] == "ion-card"){
                              putAttachments(formSubmit[item]["children"]);
                          }
                          }   
                      }
                  
                 /*let getPathById = (id, form = (<any>page).form.formulaire, index = [])=>{
                      for(let elem of form){
                          if(elem.id == id){
                              index.push(elem.name)
                              return index;
                          }
                          else if(elem.type == "ion-card"){
          					let card = getPathById(id, elem.children, [elem.name]);
          					if(card != undefined){
          						return card;
          					}
                          }
                      }
          			return null;
                  }*/
                  let searchForActions = () => {
                      page["local"]["submitActions"] = {}
                      if(page["form"]["actions"] != undefined){
                          for(let elem of page["form"]["actions"]){
                              if(elem["cat"] == "action" && elem["type"] == "submit"){
                                  if(page["local"]["submitActions"][elem["type"]] == null){
                                      page["local"]["submitActions"][elem["type"]] = []
                                  }
          
          						let variables = {};
          						let sources: any = page["searchForSources"](elem, "actions", false);
          						let findVars = sources.findVars;
          						let do_not_touchVars = {};
          						for(let i in findVars){
          							if(findVars[i].from_attachment != undefined && findVars[i].from_attachment){
          								do_not_touchVars[i] = findVars[i];
          								delete findVars[i];
          							}
          						}
          						page["computeVariable"](findVars, variables, elem);
          						variables = Object.assign(variables, do_not_touchVars);
          						let currentAction = JSON.parse(JSON.stringify(elem));
                                  for(let action in currentAction.actions){
                                      if(action == sources.findName){
          								 currentAction.actions[action].vars = variables;
          							}
          							else{
          								delete currentAction.actions[action];
          							}
                                  }
          						page["local"]["submitActions"][elem["type"]].push(currentAction);
                              }
          					else if(elem["cat"] == "action" && elem["type"] == "business_logic"){
          						try{
          							page["local"]["submitActions"][elem["type"]] = page["actions"].filter((x)=> x.type == "business_logic");
          						}
          						catch(e){
          							
          						}
                                 
          					}
                          }
                      }
                  }  
                  
                  // call the function
                  checkMandatoryAndJustOnebyColumn(page["formsList"], page["formsSubmit"], pages, currentIndex);
                  if(doAll == true){
                      putAttachments(page["formsSubmit"]);
                      searchForActions();
                  }
          		
          		page.tick();
          		if(submit && submitDoble){
          		    if(doAll == true){
          		        let translate = page.getInstance(TranslateService);
          	            let obs1 = translate.get(''formSubmitted'');
          	            let obs2 = translate.get(''submitForm'');
          	            let obs3 = translate.get(''sendForm'');
          	            zip(obs1, obs2, obs3).subscribe((res)=>{
          	                page["formSubmittedStr"] = res[0];
          	                page["submitFormStr"] = res[1];
          	                page["sendFormStr"] = res[2];
          	                resolve({"animate":false});
          	            });
          		    }
          		    else{
          		        resolve({"ok": true});
          		    }
          		    
          		  
          		  
          		}
          		else{
          		    resolve({"animate":true, "submit":submit, "submitDoble":submitDoble});
          		}
          '
  page_ts_imports: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: of, zip
            - java.lang.String: 
              - ↑value: rxjs
  ↓ifFormFillesCorrectly [ngx.components.UIDynamicIf-1576329798941]: 
    beanData: '{"ionBean":"IfElseAction","condition":"script:parent.out.animate != true && parent.out.ok != true"}'
    ↓showAlertConfirmation [ngx.components.UIDynamicAction-1576329916201]: 
      beanData: |
        '{
         "ionBean": "AlertAction",
         "header": "script:c8oPage.submitFormStr != undefined ? c8oPage.submitFormStr : c8oPage.pageOwner.submitFormStr ",
         "message": "script:c8oPage.sendFormStr",
         "cssClass": "plain:alertCustom c8o-alert-create-form",
         "button1": "script:page.translate.instant(''non'')",
         "button2": "script:page.translate.instant(''oui'')",
         "value1": "plain:0",
         "value2": "plain:1",
         "cancel1": "plain:cancel",
         "css1": "plain:yesnobt",
         "css2": "plain:yesnobt"
        }'
      ↓IfConfirmed [ngx.components.UIDynamicAction-1576329916204]: 
        beanData: '{"ionBean":"IfAction","condition":"script:parent.out.data == 1"}'
        ↓InitValsForFIles [ngx.components.UICustomAction-1576330045869]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  			if(page["pageOwner"] != undefined){
                  				page = page["pageOwner"];
                  			}
                  			//only for private forms. For anonyous search for processSingature() into CTS1593708089557
                  		    const porcessObjsCameraAndSing = ()=>{
                  			    if(page.local.objAtt != undefined){
                  			        for(let item in page.local.objAtt){					
                  						const name = page.local.objAtt[item]["name"];
                  						let index = page["getElementByNameIntoFormSubmit"](item);
                  						if(index.length == 1){
                  							page["formsSubmit"][index[0]]["value"] = name;
                  							page["formsSubmit"][index[0]]["att_type"] = true;
                  						}
                  						else{
                  							page["formsSubmit"][index[0]]["children"][index[1]]["value"] = name;
                  							page["formsSubmit"][index[0]]["children"][index[1]]["att_type"] = true;
                  						}
                  		            }
                  			    }
                  			}
                  		    const doStuff = ()=>{
                  				//Set globals
                  		    	page.local["epoch2"] = (new Date()).getTime() + "";
                                  page.global['__viewindeok']= [];
                                  let flat = page["flatArray"]();
                                  page.global["__viewerTotal"] = flat[1];
                                  page.global["__viewerarr"] = flat[0];
                                  
                                  page["cpt"] = 0;
                                  
                                  // for any case we define adequat id an formId to use for pushing doc and if there is to push or delete files
                                  if(page.local.anonymous == true){
                                      var array = new Uint32Array(2);
                                      let result = RandomVal(array);
                                      let random = result[0] * result[1];
                                      let formId = page.local.formId.substring(0, page.local.formId.length -10);
                                      page.local.myId = 'anonymous-'+ random +'_'+ formId + '_' + page["epoch"];
                                      page.local.myFormId = formId;
                  					page.local.myFormRev = page.form["parentRev"];
                                      page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0;
                                  }
                                  else{
                  					// now on constructor
                  					/*if(page["navParams"]["data"]["edit"] != null && page["navParams"]["data"]["edit"] != "" && page["navParams"]["data"]["edit"] != ":edit"){
                  						
                  	                    page.local.myId = page["navParams"]["data"]["edit"];
                  	                    page.local.myFormId = page["form"]["_id"];
                  	                }
                  	                else{
                  	                    page.local.myId = page.local.user+'_'+page.local.formId+'_'+page["epoch"];
                  	                    page.local.myFormId = page.local.formId;
                  	                    
                  	                }*/
                  					// in both cases
                  					page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0 || page.local["objAtt"] != undefined && Object.keys(page.local["objAtt"]).length > 0;
                                      if(page.local.grp == undefined){
                  						page.local.grp = {};
                  					}
                                      let grpName = "_C8O_HIDDEN_" + page.local.myFormId;
                                      page.local.grp[grpName] = true;
                  					porcessObjsCameraAndSing();
                  				}
                                  
                                  resolve();
                              }
                  
                  		    
                  			
                  			//call doStuff
                  		    doStuff();
                  		    
                  		    
                              
                  
          package_dependencies: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: get-random-values
                    - java.lang.String: 
                      - ↑value: 1.2.0
          page_ts_imports: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: '* as RandomVal'
                    - java.lang.String: 
                      - ↑value: get-random-values
          ↓IfElse [ngx.components.UIDynamicIf-1593706558809]: 
            beanData: '{"ionBean":"IfElseAction","condition":"script:page.pageOwner != undefined ? page.pageOwner.local.anonymous : page.local.anonymous"}'
            ↓CustomAction [ngx.components.UICustomAction-1593708089557]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '		if(page["pageOwner"] != undefined){
                      			page = page["pageOwner"];
                      		}
                      		page.local.submitActions2 = JSON.stringify(page.local["submitActions"]);
                      		page.local.grp2 = JSON.stringify(page.local.grp);
                      		page.local.filesToSeq = [];
                      		page.local.filesInfoToSeq = [];
                      		// post r
                      		let postRecursive = (arr: any, index: number, total: number, id: any = null) => {
                      		    return new Promise((resolve)=>{
                      		        if(total == 0 || arr == undefined){
                      	                resolve();
                      	            }
                      		        else{
                      	                let ids = id != null ? id: page.local.user+''_''+page.local.edit+''_''+page["epoch"];
                      	                let args;
                      	                let type = (arr[index]["file"].type == undefined || arr[index]["file"].type == "") ? "application/octet-stream":arr[index]["file"].type;
                                          let file: Blob = arr[index]["file"];
                      	                let name = arr[index]["bean"] + "_C80C80_" +arr[index]["file"]["name"]+"_C80C80_"+(new Date).getTime()
                      	                if(name.indexOf("_C80C80_") != -1){
                                              let id = name.substring(0, name.indexOf("_"));
                                              for(let el of page["formsList"]){
                      							try{
                      								if(el != undefined && page["formsSubmit"][el.name] != undefined){
                      									if(+el.id == +id){
                      		                                if(page["formsSubmit"][el.name]["value"] == undefined || page["formsSubmit"][el.name]["value"] == ""){
                      		                                    page["formsSubmit"][el.name]["value"] = [];
                      		                                }
                      		                                page["formsSubmit"][el.name]["value"].push(name);
                      		                            }
                      									if(page["formsSubmit"][el.name]["type"]== "ion-card"){
                      										for(let elem of el.children){
                      											if(+elem.id == +id){
                      												if(page["formsSubmit"][el.name]["children"][elem.name] != undefined){
                      													if(page["formsSubmit"][el.name]["children"][elem.name]["value"] == undefined || page["formsSubmit"][el.name]["children"][elem.name]["value"] == ""){
                      														page["formsSubmit"][el.name]["children"][elem.name]["value"] = [];
                      													}
                      													page["formsSubmit"][el.name]["children"][elem.name]["value"].push(name);
                      												}
                      											}
                      										}
                      									}
                      								}
                      							}
                      							catch(e){
                      								page.c8o.log.warn("an error occured into postRecursive function, this log can be normal", e);
                      							}                            
                                              }
                                          }
                      	                page.local.filesToSeq.push(file);
                      	                page.local.filesInfoToSeq.push({
                                                  "docid":ids,
                                                  "name": name,
                                                  "content_type": type,
                                                  "index":index
                                          }) 
                      	                
                      	                page["cpt"]= page["cpt"]+1;
                                          //console.log("Progress: " +page.cpt+ " / "+ total);
                                          page.global[''cptTotal''] = page.global[''cptTotal''] + 1;
                                          page.global["__viewerProgress"] = page["cpt"];
                                          page.global["__viewerProgressDelete"] = page.global["__viewerProgressDelete"] +page["cpt"];
                                          page.global[''__viewerarr''][index].file["ok"]= true;
                                          page.global[''__viewindeok''][index]= true;
                                          if(page["cpt"] == total){
                                              console.log("finished");
                                              resolve();
                                          }
                                          else{
                                              postRecursive(arr, index + 1, total, ids)
                                              .then(()=>{
                                                  resolve();
                                              });
                      
                                          }
                      	                    
                      	                
                      		        }
                      		    });
                      		}
                      		const b64toBlob = (b64Data, contentType='''', sliceSize=512) => {
                      		  const byteCharacters = atob(b64Data);
                      		  const byteArrays = [];
                      		
                      		  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                      		    const slice = byteCharacters.slice(offset, offset + sliceSize);
                      		
                      		    const byteNumbers = new Array(slice.length);
                      		    for (let i = 0; i < slice.length; i++) {
                      		      byteNumbers[i] = slice.charCodeAt(i);
                      		    }
                      		
                      		    const byteArray = new Uint8Array(byteNumbers);
                      		    byteArrays.push(byteArray);
                      		  }
                      		
                      		  const blob = new Blob(byteArrays, {type: contentType});
                      		  return blob;
                      		}
                      		let processSingature = ()=>{
                      		    if(page.local.objAtt != undefined){
                      				let cpt = 1;
                      		        for(let item in page.local.objAtt){
                      					let start = new Date().getTime();
                      	                //let type = () ? "application/octet-stream":arr[index]["file"].mediaType;
                      					var blob;
                      					if(typeof page.local.objAtt[item]["data"] == "string"){
                      						blob = b64toBlob(page.local.objAtt[item]["data"], page.local.objAtt[item]["content_type"]);
                      					}
                      					else{
                      						blob = page.local.objAtt[item]["data"];
                      					}
                      					 
                      					
                      	                /*page.local.filesToSeq.push(
                      	                        page.local.objAtt[item]["data"]
                      	                );  */
                      
                      					
                      					const name = page.local.objAtt[item]["name"];
                      					page.local.filesToSeq.push(blob);
                      					let index = page["getElementByNameIntoFormSubmit"](item);
                      	                page.local.filesInfoToSeq.push({
                      	                    "docid":page.local.myId,
                                              "name": page.local.objAtt[item]["name"],
                      						"type": "toB64",
                                              "content_type": page.local.objAtt[item]["content_type"],
                      						"index": JSON.stringify(index)
                                      	})
                      					let end = new Date().getTime();
                      					console.log("total process:" + (end - start));
                      					
                      					console.log("index : " + JSON.stringify(index));
                      					if(index.length == 1){
                      						page["formsSubmit"][index[0]]["value"] = name;
                      						page["formsSubmit"][index[0]]["att_type"] = true;
                      					}
                      					else{
                      						page["formsSubmit"][index[0]]["children"][index[1]]["value"] = name;
                      						page["formsSubmit"][index[0]]["children"][index[1]]["att_type"] = true;
                      					}
                      					cpt ++;
                      	            }
                      		    }
                      		}
                      		
                      		 page.global["totalcount"] =  page.global[''__C8O_TODELETE''].length + page.global[''__viewerarr''].length;
                               page.global[''cptTotal''] = 0;   
                               page.local["submitting"] = true;
                               postRecursive(page.global["__viewerarr"], 0, page.global["__viewerTotal"], page.local.myId)
                               .then((res)=>{
                                   processSingature();
                                   page.local.formsSubmit2 = JSON.stringify(page["formsSubmit"]);
                                   page.local.filesInfoToSeq = JSON.stringify(page.local.filesInfoToSeq);
                                   resolve();
                               })
                      		
                      		
                      		
                      '
              ↓CallSequence [ngx.components.UIDynamicAction-1593706618921]: 
                beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:C8Oforms.submitResponseAnonymous"}'
                ↓login [ngx.components.UIControlVariable-1593706635663]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.user
                ↓resp [ngx.components.UIControlVariable-1593706635665]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.formsSubmit2
                ↓grp [ngx.components.UIControlVariable-1593706635677]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.grp2
                ↓myId [ngx.components.UIControlVariable-1593706635679]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.myId
                ↓formId [ngx.components.UIControlVariable-1593706671643]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.form.
                ↓timestamp [ngx.components.UIControlVariable-1593706671646]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.epoch2
                ↓formRev [ngx.components.UIControlVariable-1593706671649]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local._rev
                ↓version [ngx.components.UIControlVariable-1593706671652]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:c8oPage.form?.version != undefined ? c8oPage.form?.version : ''test'''
                ↓actions [ngx.components.UIControlVariable-1593706671655]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.submitActions2
                ↓files [ngx.components.UIControlVariable-1593716868228]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.filesToSeq
                ↓filesInfo [ngx.components.UIControlVariable-1593717582423]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.filesInfoToSeq
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1617356317245]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPageFINISH
            ↓Else_Handler [ngx.components.UIActionElseEvent-1593706568809]: 
              ↓PostData [ngx.components.UIDynamicAction-1576330746736]: 
                beanData: |
                  '{
                   "ionBean": "FullSyncPostAction",
                   "requestable": "plain:C8Oforms.c8oforms_response_fs",
                   "_id": "script:c8oPage.local.myId",
                   "_use_policy": "plain:merge",
                   "c8oGrp": "script:c8oPage.local.grp"
                  }'
                ↓resp [ngx.components.UIControlVariable-1576330746739]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.formsSubmit
                ↓formId [ngx.components.UIControlVariable-1576330746742]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.formId
                ↓timestamp [ngx.components.UIControlVariable-1576330746745]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.epoch2
                ↓formRev [ngx.components.UIControlVariable-1586523081299]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local._rev
                ↓version [ngx.components.UIControlVariable-1580225981752]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:c8oPage.form?.version != undefined ? c8oPage.form?.version : ''test'''
                ↓c8oGrp [ngx.components.UIControlVariable-1582627302373]: 
                  isEnabled: false
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:c8oPage.local.grp
                ↓actions [ngx.components.UIControlVariable-1586512058300]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:page['local']['submitActions']
                ↓finished [ngx.components.UIControlVariable-1601039945190]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:!c8oPage.local.myIsOnModeFile
                ↓IfThereIsFileToSubmitOrDelete [ngx.components.UIDynamicIf-1576330886405]: 
                  beanData: '{"ionBean":"IfElseAction","condition":"script:c8oPage.local.myIsOnModeFile"}'
                  ↓Modal_Page [ngx.components.UIDynamicAction-1576331215971]: 
                    beanData: |
                      '{
                       "ionBean": "ModalAction",
                       "page": "plain:C8Oforms.MobileApplication.Application.progressPage",
                       "data": "script:{''others'':page.local[''objAtt''], ''theme'':page.local.headerColor, ''policyColor'': page.local.policyColor}",
                       "cssClass": "plain:update-profile-modal"
                      }'
                    ↓PostAttachmentImgAndSign [ngx.components.UICustomAction-1581498508095]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '			
                              			//prepare agrs for modal progress
                              			page.global["totalcount"] =  page.global[''__C8O_TODELETE''].length + page.global[''__viewerarr''].length + (page.local["objAtt"] != undefined ? Object.keys(page.local["objAtt"]).length : 0)
                              	        page.global[''cptTotal''] = 0;   
                              	        page.local["submitting"] = true;
                              			page.local.filesArgs = [];
                              			page.global.filesStatus = [];
                              			// prepare to submit files
                              			let id = page.local.myId;
                              			// generate unique id for put
                              			let ids = id != null ? id: page.local.user+''_''+page.local.edit+''_''+page["epoch"];
                              			for(let index in page.global["__viewerarr"]){
                              				let item = page.global["__viewerarr"][index];
                              				// generate args for push
                              				let args;
                              				// handle web mode
                              				if(window[''cordova''] == undefined){
                                                  let type = (item["file"].type == undefined || item["file"].type == "") ? "application/octet-stream":item["file"].type;
                                                  let file: Blob = item["file"];
                                                  args = {
                                                          "docid":ids,
                                                          "name": item["bean"] + "_C80C80_" + item["file"]["name"]+"_C80C80_"+(new Date).getTime(),
                                                          "content_type": type,
                                                          "content":file,
                                                          "index":index
                                                  }
                                              }
                              				// handle cordova mode
                                              else{
                                                  let type = (item["file"].mediaType == undefined || item["file"].mediaType == "") ? "application/octet-stream": item["file"].mediaType;
                                                  args = {
                                                          "docid":ids,
                                                          "name": item["bean"] + "_C80C80_" + item["file"]["name"]+"_C80C80_"+(new Date).getTime(),
                                                          "content_type": type,
                                                          "content": new Blob(item["file"].data, {type: type}),
                                                          "index":index
                                                  }
                                              }
                              				// push args to an array
                              				page.local.filesArgs.push(args);
                              				page.global.filesStatus.push({name:item["file"]["name"]})
                              			}
                              			// prepare to submit images and signatures
                              			if(page.local["objAtt"] != undefined){
                              				for(let index in page.local["objAtt"]){
                              					let item = page.local["objAtt"][index];
                              					item["docid"] = ids;
                              					
                              					
                              					let args = {
                                                      "docid":id,
                                                      "name": item["name"],
                                                      "content_type": item["content_type"],
                                                      "content": item["data"]
                                              	}; 
                              					// push args to an array
                              					page.local.filesArgs.push(args);
                              					page.global.filesStatus.push({name: args["name"]}) 
                              				}
                              			}
                              			let asyncHandler = async ()=>{
                              				for(let index in page.local.filesArgs){
                              					let elem = page.local.filesArgs[index];
                              					try{
                              						let resp = await page.c8o.callJsonObject("fs://c8oforms_response_fs.put_attachment",elem).async();
                              						page.global.filesStatus[index]["ok"] = true;
                              						page.global[''cptTotal''] ++;
                              					}
                              					catch(e){
                              						page.global.filesStatus[index]["error"] = true;
                              						page.global[''cptTotal''] ++;
                              						console.error("error ", e);
                              					}
                              				}
                              				
                              			}
                              			asyncHandler()
                              			.then(()=>{
                              				page.c8o.callJsonObject("fs://c8oforms_response_fs.get", {"docid":page.local.myId, "_attachments":true})
                              	                .then((res)=>{
                                                      console.log("ok@",res);
                                                      for(let i in res["_attachments"]){
                                                          if(i.indexOf("_C80C80_") != -1){
                                                              let id = i.substring(0, i.indexOf("_"));
                                                              for(let el of page["formsList"]){
                              									try{
                              										if(el != undefined && page["formsSubmit"][el.name] != undefined){
                              											if(+el.id == +id){
                              				                                if(page["formsSubmit"][el.name]["value"] == undefined || page["formsSubmit"][el.name]["value"] == ""){
                              				                                    page["formsSubmit"][el.name]["value"] = [];
                              				                                }
                              				                                page["formsSubmit"][el.name]["value"].push(i);
                              				                            }
                              											if(page["formsSubmit"][el.name]["type"]== "ion-card"){
                              												for(let elem of el.children){
                              													if(+elem.id == +id){
                              														if(page["formsSubmit"][el.name]["children"][elem.name] != undefined){
                              															if(page["formsSubmit"][el.name]["children"][elem.name]["value"] == undefined || page["formsSubmit"][el.name]["children"][elem.name]["value"] == ""){
                              																page["formsSubmit"][el.name]["children"][elem.name]["value"] = [];
                              															}
                              															page["formsSubmit"][el.name]["children"][elem.name]["value"].push(i);
                              														}
                              													}
                              												}
                              											}
                              										}
                              									}
                              									catch(e){
                              										page.c8o.log.warn("an error occured into postRecursive function, this log can be normal", e);
                              									}                            
                              		                        }
                                                          }
                                                      }
                                                      
                                                      page.c8o.callJson("fs://c8oforms_response_fs.post", "_id",page.local.myId,"_use_policy","merge", "resp", page["formsSubmit"], "finished", true)
                                                      .then((res)=>{
                              							page.c8o.log.debug("post to "+ page.local.myId + " to validate files upload");
                                                          return null;
                                                      })
                                                      .fail((err)=>{
                              							page.c8o.log.error("post to"+ page.local.myId + " to validate files upload failed ", err);
                                                      })
                                                      return null; 
                                                  })
                                                  .fail((err)=>{
                                                     page.c8o.log.error("inserting file to"+ page.local.myId + " failed ", err);
                                                  })
                              					page.global["totalcount"] = 1;
                              					
                              	                page.global[''cptTotal''] = 1;
                              				resolve();
                              			})
                              			/*
                              		    if(page.local["objAtt"] != undefined){
                              		        let push = async (arr, index) => {
                                                  await page.router.c8o.callJsonObject("fs://c8oforms_response_fs.put_attachment",arr[index]).async()
                                              	if(!(array.length -1 == index)){
                                                      await push(arr, index+1);
                                                  }
                              					else{
                              						console.log("finished123");
                              					}
                                          }
                                          let array = [];
                                          for(let item in page.local.objAtt){
                                              //let type = () ? "application/octet-stream":arr[index]["file"].mediaType;
                                              array.push({
                                                      "docid":page.local.myId,
                                                      "name": page.local.objAtt[item]["name"],
                                                      "content_type": page.local.objAtt[item]["content_type"],
                                                      "content": page.local.objAtt[item]["data"]
                                              });                  
                                          }
                                          push(array, 0).then(()=>{
                              				console.log("then push");
                              				resolve();
                              			})
                              		    }
                              		    else{
                              		        resolve();
                              		    }*/		 
                              '
                      ↓PublishEvent [ngx.components.UIDynamicAction-1624018742341]: 
                        beanData: '{"ionBean":"PublishEventAction","topic":"plain:closeProgressPage"}'
                        ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1624019728273]: 
                          beanData: '{"ionBean":"InvokeAction"}'
                          isEnabled: false
                          stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPageFINISH
                        ↓PushResps [ngx.components.UICustomAsyncAction-1699977003131]: 
                          actionValue: 
                            - xmlizable: 
                              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                                →: |
                                  		try {
                                  			await page["replicatePushResponse"]();
                                  		} catch (e) {
                                  		
                                  		} finally {
                                  			return;
                                  		}
                                  
                          ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1699977003134]: 
                            beanData: '{"ionBean":"InvokeAction"}'
                            stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPageFINISH
                  ↓Else_Handler [ngx.components.UIActionElseEvent-1576330889356]: 
                    ↓PushResps [ngx.components.UICustomAsyncAction-1699976900772]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              		try {
                              			await page["replicatePushResponse"]();
                              		} catch (e) {
                              		
                              		} finally {
                              			return;
                              		}
                              
                      ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1576513320747]: 
                        beanData: '{"ionBean":"InvokeAction"}'
                        stack: C8Oforms.MobileApplication.Application.ProcessSubmitFormViewerPageFINISH
                ↓_rev [ngx.components.UIControlVariable-1700498738858]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:page.local.myRev ?? null
                ↓_use_merge_resp [ngx.components.UIControlVariable-1700500209451]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:override
                ↓_use_merge_timestamp [ngx.components.UIControlVariable-1700500274536]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:override
                ↓_use_merge_actions [ngx.components.UIControlVariable-1700500324697]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:override
                ↓_use_merge_finished [ngx.components.UIControlVariable-1700500358341]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:override
    ↓Else_Handler [ngx.components.UIActionElseEvent-1576329803906]: 
      ↓IfElse [ngx.components.UIDynamicIf-1592831596052]: 
        beanData: '{"ionBean":"IfElseAction","condition":"script:stack[''CheckMandatoryAndUniqueColumn''].out.animate == true"}'
        ↓SetRedAndAnimate [ngx.components.UICustomAction-1576329825047]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '		try{
                  			let id = "#c8oSpinnerRgaa";
                  			document.getElementById(id).innerHTML = page["translate"].instant("error_form");
                  			setTimeout(()=>{
                  				document.getElementById(id).innerHTML = "";
                  			}, 1000)
                  		}
                  		catch(e){
                  			
                  		}
                  		    let first = false;
                  			page.local.shake = (item: any, type = null)=>{
                  		        item.nativeElement.classList.remove("animate__animated");
                                  item.nativeElement.classList.remove("animate__shakeX");
                                  let focus = false;
                                  if(!first){
                                      item.nativeElement.scrollIntoView({block: "center", inline: "nearest", behavior:"smooth"});   
                                  	first = true;
                                  	focus = true;
                                  }
                                  setTimeout(() => {
                                      item.nativeElement.classList.add("animate__animated");
                                      item.nativeElement.classList.add("animate__shakeX");
                                      setTimeout(() => {
                  	                    item.nativeElement.classList.remove("animate__animated");
                  	                    item.nativeElement.classList.remove("animate__shakeX");
                  	                }, 1000);
                  	                if(focus){
                  						try{
                  							let focusElement = page["getFocusElement"](type);
                  							if(focusElement.dom != undefined){
                  								if(focusElement.shadowDom != undefined){
                  									item.nativeElement.querySelectorAll(focusElement.dom)[0].shadowRoot.querySelector(focusElement.shadowDom).focus();
                  								}
                  								else{
                  									item.nativeElement.querySelectorAll(focusElement.dom)[0].focus();
                  								}
                  							}
                  						}
                  						catch(e){
                  							
                  						}
                  						
                  					}
                                  });
                  		    }
                  			try{
                  				let reds = Object.keys(page["redList"]).filter(x => page["redList"][x] == true);
                  				for(let el of reds){
                  					page.local.shake({nativeElement: document.getElementById(""+el)}, page["formsSubmit"][el].type);
                  				}
                  				if(page["local"]["redListTwoSameColumn"] != undefined){
                  					let redSameColumn = Object.keys(page["local"]["redListTwoSameColumn"]).filter(x => page["local"]["redListTwoSameColumn"][x] == true);
                  					for(let el of redSameColumn){
                  						page.local.shake({nativeElement: document.getElementById(""+el)}, page["formsSubmit"][el].type);
                  					}
                  				}
                  				
                  			}
                  			catch(e){
                  				
                  			}
                  			resolve();
                  '
        ↓Else_Handler [ngx.components.UIActionElseEvent-1592831633547]: 
          ↓CustomAction [ngx.components.UICustomAction-1592831642675]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		resolve({"nextPage":true});
                    
  ↓indexPage [ngx.components.UIControlVariable-1592830860163]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.indexPage
  ↓pages [ngx.components.UIControlVariable-1592830962017]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.pages
  ↓doAll [ngx.components.UIControlVariable-1592831552052]: 
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.doAll
↓indexPage [ngx.components.UIStackVariable-1592830817786]: 
  value: page.local.currentIndex
↓pages [ngx.components.UIStackVariable-1592830949002]: 
  value: page.local.pages
↓doAll [ngx.components.UIStackVariable-1592831535509]: 
  value: true