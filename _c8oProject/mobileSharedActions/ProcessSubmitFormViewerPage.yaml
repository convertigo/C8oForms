↓CheckMandatoryAndUniqueColumn [mobile.components.UICustomAction-1576329582936]: 
  actionValue: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
      - com.twinsoft.convertigo.beans.common.FormatedContent: 
        →: |
          '		let submit = true;
          		let submitDoble = true;
          		page.local.redListTwoSameColumn = {};
          		
          		const checkNotEmptyCheckboxGroup = (arg1: any, itemName: string)=>{
          		    for(let line in arg1){
                          let ok = false;
                          for(let things of arg1[line]){
                              if(things.selected){
                                  ok = true;
                              }
                          }
                          if(!ok){
                              page["redList"][itemName] = true;
                              submit = false; 
                          }
                      }
          		};
          		
          		const checkNotEmptyRadioGroup = (arg1: any, itemName: string)=>{
          		    for(let line in arg1){
                          if(arg1[line] == ""){
                              page["redList"][itemName] = true;
                              submit = false; 
                          }
                      }
                  };
                  
                  const checkNotEmptyFile = (arg1) => {
                      if(page.global[page["idFiles"]][arg1["id"]].length == 0){
                          page["redList"][arg1["name"]] = true;
                          submit = false; 
                      }
                  }
          
                  const checkJustOneByColumnRadioGroup = (arg1: any, itemName: string)=>{
                      for(let i in arg1){
                          let current = arg1[i];
                          let find = Object.keys(arg1).map(key => arg1[key]).filter(res => res == current && res != "").length > 1;
                          if(find == true){
                            page.local.redListTwoSameColumn[itemName] = true;
                            submitDoble = false;
                            break;
                          }
                      }
                  };
                  
                  
                  const checkJustOneByColumnCheckboxGroup = (arg1: any, itemName: string, formsSubmit)=>{
                      for(let i in arg1){
                          let find = Object.keys(formsSubmit[itemName]["children"]).map(k =>formsSubmit[itemName]["children"][k][i]).filter(obj => obj.selected).length > 1;
                          if(find == true){
                            page.local.redListTwoSameColumn[itemName] = true;
                            submitDoble = false;
                            break;
                          }
                      } 
                  };
                  
                  const checkMandatoryAndJustOnebyColumn = (currentList, formsSubmit)=>{
                      for(let item in currentList){
                          // Reassign each value as virgin
                          page["redList"][currentList[item]["name"]] = false;
                          
                          // Process just one by column
                          if(currentList[item]["config"]["different"] == true){
                              
                              switch (formsSubmit[currentList[item]["name"]]["type"]) {
                                  case ''radio_group'':
                                      checkJustOneByColumnRadioGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                      break;
                                  case ''checkbox_group'':
                                      checkJustOneByColumnCheckboxGroup(currentList[item]["children"], currentList[item]["name"], formsSubmit);
                                      break;
                                  default:
                                      break;
                              }
                          
                          }
                          // Process check mandatory
                          if(currentList[item]["config"]["mandatory"] == true){
                              if(formsSubmit[currentList[item]["name"]]["value"] === "" || formsSubmit[currentList[item]["name"]]["value"] === undefined){
                                  
                                  switch (currentList[item]["type"]) {
                                      case ''radio_group'':
                                          checkNotEmptyRadioGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                          break;
                                      case ''checkbox_group'':
                                          checkNotEmptyCheckboxGroup(formsSubmit[currentList[item]["name"]]["children"], currentList[item]["name"]);
                                          break;
                                      case ''file'':
                                          checkNotEmptyFile(currentList[item]);
                                          break;
                                      default:
                                          page["redList"][currentList[item]["name"]] = true;
                                          submit = false;
                                          break;
                              }
                                  
                              }
                          }
                          // Recursive call for cards
                          else if(currentList[item]["type"] == "ion-card"){
                              checkMandatoryAndJustOnebyColumn(currentList[item]["children"], formsSubmit[currentList[item]["name"]]["children"]);
                          }
                          
                          
                      }
                  }
                  
                  // call the function
                  checkMandatoryAndJustOnebyColumn(page["formsList"], page["formsSubmit"]);
          		
          		page.tick();
          		if(submit && submitDoble){
          		    let translate = page.getInstance(TranslateService);
          		    let obs1 = translate.get(''formSubmitted'');
          		    let obs2 = translate.get(''submitForm'');
          		    let obs3 = translate.get(''sendForm'');
          		    zip(obs1, obs2, obs3).subscribe((res)=>{
          		        page["formSubmittedStr"] = res[0];
          		        page["this.submitFormStr"] = res[1];
          		        page["sendFormStr"] = res[2];
          		        resolve({"animate":false});
          		    });
          		  
          		  
          		}
          		else{
          		    resolve({"animate":true, "submit":submit, "submitDoble":submitDoble});
          		}
          '
  page_ts_imports: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: of, zip
            - java.lang.String: 
              - ↑value: rxjs
  ↓ifFormFillesCorrectly [mobile.components.UIDynamicIf-1576329798941]: 
    beanData: '{"ionBean":"IfElseAction","condition":"script:parent.out.animate != true"}'
    ↓showAlertConfirmation [mobile.components.UIDynamicAction-1576329916201]: 
      beanData: |
        '{
         "ionBean": "AlertAction",
         "title": "script:c8oPage.submitFormStr",
         "subTitle": "script:c8oPage.sendFormStr",
         "message": "plain:",
         "cssClass": "plain:alertCustomCss",
         "button1": "plain:CANCEL",
         "button2": "plain:OK",
         "value1": "plain:0",
         "value2": "plain:1",
         "cancel1": "plain:cancel"
        }'
      ↓IfConfirmed [mobile.components.UIDynamicAction-1576329916204]: 
        beanData: '{"ionBean":"IfAction","condition":"script:parent.out == 1"}'
        ↓InitValsForFIles [mobile.components.UICustomAction-1576330045869]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  		    //Set globals
                              page.global['__viewindeok']= [];
                              let flat = page["flatArray"]();
                              page.global["__viewerTotal"] = flat[1];
                              page.global["__viewerarr"] = flat[0];
                              
                              page["cpt"] = 0;
                              
                              // for any case we define adequat id an formId to use for pushing doc and if there is to push or delete files
                              if(page.local.anonymous == true){
                                  var array = new Uint32Array(2);
                                  let result = RandomVal(array);
                                  let random = result[0] * result[1];
                                  let formId = page.local.formId.substring(0, page.local.formId.length -10);
                                  page.local.myId = 'anonymous-'+ random +'_'+ formId + '_' + page["epoch"];
                                  page.local.myFormId = formId;
                                  page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0;
                              }
                              else if(page["edit"] == true){
                                  page.local.myId = page["navParams"]["data"]["edit"];
                                  page.local.myFormId = page["form"]["_id"];
                                  page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0 ||  page.global["__C8O_TODELETE"].length >0;
                                  
                              }
                              else{
                                  page.local.myId = page.local.user+'_'+page.local.formId+'_'+page["epoch"];
                                  page.local.myFormId = page.local.formId;
                                  page.local.myIsOnModeFile = page.global["__viewerTotal"] > 0;
                              }
                              
                              resolve();
                  
          package_dependencies: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: get-random-values
                    - java.lang.String: 
                      - ↑value: 1.2.0
          page_ts_imports: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: '* as RandomVal'
                    - java.lang.String: 
                      - ↑value: get-random-values
          ↓PostData [mobile.components.UIDynamicAction-1576330746736]: 
            beanData: |
              '{
               "ionBean": "FullSyncPostAction",
               "requestable": "plain:C8Oforms.c8oforms_response_fs",
               "_id": "script:c8oPage.local.myId",
               "_use_policy": "plain:merge"
              }'
            ↓resp [mobile.components.UIControlVariable-1576330746739]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:c8oPage.formsSubmit
            ↓formId [mobile.components.UIControlVariable-1576330746742]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:c8oPage.local.myFormId
            ↓timestamp [mobile.components.UIControlVariable-1576330746745]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:c8oPage.epoch
            ↓IfThereIsFileToSubmitOrDelete [mobile.components.UIDynamicIf-1576330886405]: 
              beanData: '{"ionBean":"IfElseAction","condition":"script:c8oPage.local.myIsOnModeFile"}'
              ↓Modal_Page [mobile.components.UIDynamicAction-1576331215971]: 
                beanData: |
                  '{
                   "ionBean": "ModalAction",
                   "page": "plain:C8Oforms.MobileApplication.Application.progressPage",
                   "blockWhileDisplayed": "plain:true",
                   "cssClass": "plain:update-profile-modal"
                  }'
              ↓PostAttachment [mobile.components.UICustomAction-1576331215977]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		    if(page["edit"] == true){
                        		        page.global["totalcount"] =  page.global['__C8O_TODELETE'].length + page.global['__viewerarr'].length;
                        		        page.global['cptTotal'] = 0;   
                        		        page.local["submitting"] = true;
                        		        if(page.global["__viewerarr"] == undefined){
                        		            page.global["__viewerarr"] == [];
                        		        }
                        		        page.global["__viewerProgressDelete"] = 0;
                        		        page.global["viewerTotalDelAdd"] =  page.global["__C8O_TODELETE"].length + page.global["__viewerTotal"];
                        		        page["deleteRecursive"](page.global["__C8O_TODELETE"], 0, page.global["__C8O_TODELETE"].length, page.local.myId)
                        		        .then(()=>{
                        		            page["postRecursive"](page.global["__viewerarr"], 0, page.global["__viewerTotal"],page.local.myId)
                        		            .then(()=>{
                        		                page.global["totalcount"] = 1;
                        		                page.global['cptTotal'] = 1;
                        		               resolve(); 
                        		            });
                        		        });
                        		    }
                        		    else{
                        		        //page.local.myId
                        		        page.global["totalcount"] =  page.global['__C8O_TODELETE'].length + page.global['__viewerarr'].length;
                        		        page.global['cptTotal'] = 0;   
                        		        page.local["submitting"] = true;
                        		        page["postRecursive"](page.global["__viewerarr"], 0, page.global["__viewerTotal"], page.local.myId)
                        	            .then(()=>{
                        	                page.global["totalcount"] = 1;
                        	                page.global['cptTotal'] = 1;
                        	               resolve(); 
                        	            });
                        		    }
                                        
                        		 
                        
              ↓Else_Handler [mobile.components.UIActionElseEvent-1576330889356]: 
                ↓PublishEvent [mobile.components.UIDynamicAction-1576332598975]: 
                  beanData: '{"ionBean":"PublishEventAction","topic":"plain:closeProgress"}'
    ↓Else_Handler [mobile.components.UIActionElseEvent-1576329803906]: 
      ↓SetRedAndAnimate [mobile.components.UICustomAction-1576329825047]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '		    let first = false;
                		    /* if(this.redList[''respNameRequired'']){
                		        this.divResponseName.nativeElement.classList.remove("animated");
                                this.divResponseName.nativeElement.classList.remove("shake");
                                if(!first){
                                    this.divResponseName.nativeElement.scrollIntoView({block: "center", inline: "nearest", behavior:"smooth"});   
                                    first = true;
                                }
                                setTimeout(() => {
                                    this.divResponseName.nativeElement.classList.add("animated");
                                    this.divResponseName.nativeElement.classList.add("shake");
                                    
                                }, 50);
                		    }*/
                		    
                		    //this.setRedSpecs(this.all_divtext[''_results''], first);
                            //this.setRedSpecs(this.all_divimg[''_results''], first);
                		    let shake = (item: any)=>{
                		        item.nativeElement.classList.remove("animated");
                                item.nativeElement.classList.remove("shake");
                                if(!first){
                                    item.nativeElement.scrollIntoView({block: "center", inline: "nearest", behavior:"smooth"});   
                                    first = true;
                                }
                                setTimeout(() => {
                                    item.nativeElement.classList.add("animated");
                                    item.nativeElement.classList.add("shake");
                                    
                                }, 50);
                		    }
                		    
                		    for(let item of page["all_divtext"][''_results'']){
                		        let find;
                		        let findDobleColumn;
                		        if(item.nativeElement.id.indexOf("_C8o#") != -1){
                		            find = page["redList"][item.nativeElement.id.substring(0,item.nativeElement.id.indexOf("_C8o#"))][item.nativeElement.id.substring(item.nativeElement.id.indexOf("_C8o#")+5)];
                		            findDobleColumn = page.local.redListTwoSameColumn[item.nativeElement.id.substring(0,item.nativeElement.id.indexOf("_C8o#"))][item.nativeElement.id.substring(item.nativeElement.id.indexOf("_C8o#")+5)];
                		        }
                		        else{
                		            find = page["redList"][item.nativeElement.id];
                		            findDobleColumn = page.local.redListTwoSameColumn[item.nativeElement.id];
                		        }
                                if(find && findDobleColumn){
                                    shake(item);
                                }
                                else if(find){
                                    shake(item);
                                }
                                else if(findDobleColumn){
                                    shake(item);
                                }
                                
                            }
                		   
                		resolve();
                '