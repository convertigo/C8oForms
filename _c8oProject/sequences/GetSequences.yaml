comment: List all sequences that match a pattern
↓projects [steps.XMLComplexStep-1586439398035]: 
  nodeName: projects
  ↓sequenceArray [steps.XMLAttributeStep-1586439398038]: 
    nodeName: type
    nodeText: array
  ↓iProjects [steps.SimpleIteratorStep-1586439398041]: 
    expression: com.twinsoft.convertigo.engine.Engine.theApp.databaseObjectsManager.getAllProjectNamesList()
    ↓filterProject [steps.IfStep-1586439398044]: 
      condition: 'projectName = item; projectFilter ? projectName.match(new RegExp(projectFilter)) != null : true'
      ↓project [steps.XMLComplexStep-1586439398047]: 
        nodeName: project
        ↓sequenceArray [steps.XMLAttributeStep-1586439398050]: 
          nodeName: type
          nodeText: object
        ↓projectName [steps.ElementStep-1586439398053]: 
          expression: projectName
          nodeName: name
        ↓projectComment [steps.ElementStep-1586439398056]: 
          expression: prj = com.twinsoft.convertigo.engine.Engine.theApp.databaseObjectsManager.getOriginalProjectByName(projectName) ; prj.getComment()
          nodeName: comment
        ↓sequences [steps.XMLComplexStep-1586439398059]: 
          nodeName: sequences
          ↓sequenceArray [steps.XMLAttributeStep-1586439398062]: 
            nodeName: type
            nodeText: array
          ↓iSequences [steps.SimpleIteratorStep-1586439398065]: 
            expression: prj.getSequencesList()
            ↓filterSequence [steps.IfStep-1586439398068]: 
              condition: 'sequenceName = item.getName(); sequenceFilter ? sequenceName.match(new RegExp(sequenceFilter)) != null : true'
              ↓filterVariables [steps.SimpleStep-1594111372318]: 
                expression: |
                  'var list = [];
                  
                  for (var i = 0; i < item.getVariables().size(); i++) {
                  	var name = (String) ((item.getVariablesList().get(i)).getName());
                  	if(name.match(new RegExp(variableFilter)) != null){
                  		var comment = (String) ((item.getVariablesList().get(i)).getComment());
                  		var description = (String) ((item.getVariablesList().get(i)).getDescription());
                  		list.push({"name":name, "comment":comment, "description": description});
                  	}
                  }'
              ↓sequence [steps.XMLComplexStep-1586439398071]: 
                nodeName: sequence
                ↓sequenceArray [steps.XMLAttributeStep-1586439398074]: 
                  nodeName: type
                  nodeText: object
                ↓sequenceName [steps.ElementStep-1586439398077]: 
                  expression: sequenceName
                  nodeName: name
                ↓sequenceComment [steps.ElementStep-1586439398080]: 
                  expression: item.getComment()
                  nodeName: comment
                ↓variables1 [steps.XMLComplexStep-1612775679249]: 
                  nodeName: variables
                  ↓sequenceArray [steps.XMLAttributeStep-1612775679252]: 
                    nodeName: type
                    nodeText: object
                  ↓Complex [steps.XMLComplexStep-1612775679267]: 
                    nodeName: name
                    ↓Attribute [steps.XMLAttributeStep-1612775679270]: 
                      nodeName: type
                      nodeText: array
                    ↓jIterator [steps.SimpleIteratorStep-1612775679273]: 
                      expression: list
                      ↓jElement [steps.ElementStep-1612775679276]: 
                        expression: list[index].name
                        nodeName: name
                        ↓Attribute [steps.XMLAttributeStep-1612775679279]: 
                          nodeName: type
                          nodeText: string
                  ↓Complex1 [steps.XMLComplexStep-1612775679282]: 
                    nodeName: comment
                    ↓Attribute [steps.XMLAttributeStep-1612775679285]: 
                      nodeName: type
                      nodeText: array
                    ↓jIterator [steps.SimpleIteratorStep-1612775679288]: 
                      expression: list
                      ↓jElement1 [steps.ElementStep-1612775679291]: 
                        expression: list[index].comment
                        nodeName: comment
                        ↓Attribute [steps.XMLAttributeStep-1612775679294]: 
                          nodeName: type
                          nodeText: string
                  ↓Complex11 [steps.XMLComplexStep-1612775679297]: 
                    nodeName: type
                    ↓Attribute [steps.XMLAttributeStep-1612775679300]: 
                      nodeName: type
                      nodeText: array
                    ↓jIterator [steps.SimpleIteratorStep-1612775679303]: 
                      expression: list
                      ↓jElement2 [steps.ElementStep-1612775679306]: 
                        expression: list[index].description
                        nodeName: type
                        ↓Attribute [steps.XMLAttributeStep-1612775679309]: 
                          nodeName: type
                          nodeText: string
        ↓sequences1 [steps.XMLComplexStep-1621525197990]: 
          isEnabled: false
          nodeName: views
          ↓sequenceArray [steps.XMLAttributeStep-1621525197993]: 
            nodeName: type
            nodeText: array
          ↓Sequence_JS [steps.SimpleStep-1621525198068]: 
            expression: |
              '//var list = prj.getConnectorsList();
              var key = com.twinsoft.convertigo.engine.enums.CouchKey.views;
              /*for(var i= 0; i< list.size(); i++){
              	var current = list.get(i);
              	log.warn("thenow "+ current.getName());
              	if(current instanceof com.twinsoft.convertigo.beans.connectors.FullSyncConnector){
              		log.warn(current + " is fullsync");
              		var ddocList = current.getDocumentsList();
              		for(var j= 0; j< ddocList.size(); j++){
              			var document = ddocList.get(j);
              			if(document instanceof com.twinsoft.convertigo.beans.couchdb.DesignDocument) {
              				var views = key.JSONObject((document).getJSONObject());
              				if (views != null) {
              					for (var k = com.twinsoft.convertigo.engine.util.GenericUtils.cast(views.keys()); k.hasNext(); ) {
              						log.warn("therrreSOLO "+ document.getName() + "/" + k.next())
              						//values.add(document.getName() + "/" + k.next());
              					}
              				}
              			}
              		}
              	}
              	/*else{
              		log.warn(current + " is not fullsync");
              	}
              }*/'
          ↓iSequences [steps.SimpleIteratorStep-1621525236496]: 
            expression: prj.getConnectorsList()
            ↓filterSequence [steps.IfStep-1621525236499]: 
              condition: connectorName = item.getName(); item instanceof com.twinsoft.convertigo.beans.connectors.FullSyncConnector
              ↓Log0 [steps.SimpleStep-1621526229095]: 
                expression: |
                  //todo
                  log.warn("there 0")
              ↓jIterator [steps.SimpleIteratorStep-1621525622061]: 
                expression: item.getDocumentsList()
                ↓Log1 [steps.SimpleStep-1621526261175]: 
                  expression: |
                    //todo
                    log.warn("there 1")
                ↓jIf [steps.IfStep-1621525691904]: 
                  condition: (document = item) instanceof com.twinsoft.convertigo.beans.couchdb.DesignDocument && (views = key.JSONObject((item).getJSONObject())) != null
                  ↓Log2 [steps.SimpleStep-1621526293168]: 
                    expression: |
                      //todo
                      log.warn("There 2")
                  ↓jIterator [steps.SimpleIteratorStep-1621525901915]: 
                    expression: var k = com.twinsoft.convertigo.engine.util.GenericUtils.cast(views.keys()); k.hasNext();
                    ↓Log3 [steps.SimpleStep-1621526305626]: 
                      expression: |
                        //todo
                        
                    ↓jIf [steps.IfStep-1621585576806]: 
                      condition: 'viewName = k.next(); sequenceFilter ? viewName.match(new RegExp(sequenceFilter)) != null : true'
                      ↓sequence [steps.XMLComplexStep-1621525236505]: 
                        nodeName: view
                        ↓sequenceArray [steps.XMLAttributeStep-1621525236508]: 
                          nodeName: type
                          nodeText: object
                        ↓sequenceName [steps.ElementStep-1621525236511]: 
                          expression: document.getName() + "/" + viewName
                          nodeName: name
                        ↓sequenceComment [steps.ElementStep-1621525236514]: 
                          expression: item.getComment()
                          isEnabled: false
                          nodeName: comment
                        ↓variables1 [steps.XMLComplexStep-1621525236517]: 
                          isEnabled: false
                          nodeName: variables
                          ↓sequenceArray [steps.XMLAttributeStep-1621525236520]: 
                            nodeName: type
                            nodeText: object
                          ↓Complex [steps.XMLComplexStep-1621525236523]: 
                            nodeName: name
                            ↓Attribute [steps.XMLAttributeStep-1621525236526]: 
                              nodeName: type
                              nodeText: array
                            ↓jIterator [steps.SimpleIteratorStep-1621525236529]: 
                              expression: list
                              ↓jElement [steps.ElementStep-1621525236532]: 
                                expression: list[index].name
                                nodeName: name
                                ↓Attribute [steps.XMLAttributeStep-1621525236535]: 
                                  nodeName: type
                                  nodeText: string
                          ↓Complex1 [steps.XMLComplexStep-1621525236538]: 
                            nodeName: comment
                            ↓Attribute [steps.XMLAttributeStep-1621525236541]: 
                              nodeName: type
                              nodeText: array
                            ↓jIterator [steps.SimpleIteratorStep-1621525236544]: 
                              expression: list
                              ↓jElement1 [steps.ElementStep-1621525236547]: 
                                expression: list[index].comment
                                nodeName: comment
                                ↓Attribute [steps.XMLAttributeStep-1621525236550]: 
                                  nodeName: type
                                  nodeText: string
                          ↓Complex11 [steps.XMLComplexStep-1621525236553]: 
                            nodeName: type
                            ↓Attribute [steps.XMLAttributeStep-1621525236556]: 
                              nodeName: type
                              nodeText: array
                            ↓jIterator [steps.SimpleIteratorStep-1621525236559]: 
                              expression: list
                              ↓jElement2 [steps.ElementStep-1621525236562]: 
                                expression: list[index].description
                                nodeName: type
                                ↓Attribute [steps.XMLAttributeStep-1621525236565]: 
                                  nodeName: type
                                  nodeText: string
              ↓filterVariables [steps.SimpleStep-1621525236502]: 
                expression: |
                  'var list = [];
                  
                  for (var i = 0; i < item.getVariables().size(); i++) {
                  	var name = (String) ((item.getVariablesList().get(i)).getName());
                  	if(name.match(new RegExp(variableFilter)) != null){
                  		var comment = (String) ((item.getVariablesList().get(i)).getComment());
                  		var description = (String) ((item.getVariablesList().get(i)).getDescription());
                  		list.push({"name":name, "comment":comment, "description": description});
                  	}
                  }'
                isEnabled: false
↓Cleanup [steps.SimpleStep-1586439398083]: 
  expression: |
    'var list = context.getXpathApi().selectList(dom.getDocumentElement(), "./projects/project[not(sequences/sequence)]");
    var i = list.iterator();
    while (i.hasNext()) {
    	var elt = i.next();
    	var parent = elt.getParentNode();
    	parent.removeChild(elt);
    }'
↓projectFilter [variables.RequestableVariable-1586439398086]: 
↓sequenceFilter [variables.RequestableVariable-1586439398089]: 
↓variableFilter [variables.RequestableVariable-1594112846744]: 
  value: ^forms_
↓Test_Case [core.TestCase]: 
  ↓projectFilter [variables.TestCaseVariable-1586439434932]: 
  ↓sequenceFilter [variables.TestCaseVariable-1586439434934]: 
    value: ^forms_
  ↓variableFilter [variables.TestCaseVariable-1594113181733]: 
    value: ^forms_