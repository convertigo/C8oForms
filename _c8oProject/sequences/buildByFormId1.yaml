↓Input_variables [steps.InputVariablesStep-1574348044926]: 
↓idForV [steps.SimpleSourceStep-1574348044929]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1574348044926
        - java.lang.String: 
          - ↑value: ./formId/text()
  variableName: idForV
↓Sequence_JS1 [steps.SimpleStep-1574348044932]: 
  expression: |
    //todo
    var idForView = '"'+idForV+'"';
↓jElement [steps.ElementStep-1574348044935]: 
  expression: idForView
  nodeName: myIdForView
  output: false
↓Call_Transaction1 [steps.TransactionStep-1574348044938]: 
  sourceTransaction: C8Oforms.c8oforms_response_fs.GetView
  ↓_use_key [variables.StepVariable-1574348044941]: 
    description: (string) – Return only documents that match the specified key. Optional
    sourceDefinition: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ↑value: 1574348044935
          - java.lang.String: 
            - ↑value: ./text()
    value: 
↓jSource [steps.SourceStep-1574348044944]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1574348044938
        - java.lang.String: 
          - ↑value: ./document/couchdb_output/rows
  variableName: rows
↓Complex1 [steps.XMLComplexStep-1574348044947]: 
↓jSource1 [steps.SourceStep-1574348044950]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1574348044947
        - java.lang.String: 
          - ↑value: .
↓Sequence_JS2 [steps.SimpleStep-1574348044953]: 
  expression: |
    '//todo
    function searchRecursive(nodeList, nodePath, lvl){
    	for(var i = 0; i< nodeList.length; i++){
    		var level = lvl;
    		if(level == null){
    			tab.push([]);
    			level = i;
    		}
    		var type = nodeList.item(i).getNodeType();
    		var hasChild = nodeList.item(i).hasChildNodes();
    		
    		 if (hasChild && type != 3) {
    			var paf = nodePath;
    			var nodeName = nodeList.item(i).getNodeName();
    			if(nodeName != "resp"){
    				paf != "" ? paf += separator : null;
    				paf += nodeName; 
    			}
    			searchRecursive(nodeList.item(i), paf, level);
    		}
    		else{
    			var value = "" + nodeList.item(i).getTextContent();
    			if(nodePath != "" && value != ""){
    				var data = {};
    				data.key = nodePath;
    	            data.value = value;
    	            tab[level].push(data);
    			}  
    		}
    	}
    }
    
    
    function createNodeXml(arr){
    	// create parent node
    	//var node = context.addTextNodeUnderRoot("resp", "");
    	var node = myNodeList.item(0);
    	for(var i = 0; i< arr.length; i++){
    		var item = context.addTextNode(node, "item", "");
    		for(var j = 0; j< arr[i].length; j++){
    			log.warning("elem => key: " + arr[i][j]["key"]+" value: "+ arr[i][j]["value"]);
    			var elem = context.addTextNode(item, arr[i][j]["key"].replace(/\/|é|è|@|ê| /g, ""),arr[i][j]["value"]);			
    		}
    	}
    }
    
    function searchFlat(nodeList, nodePath, lvl){
    	log.warning("searchFlat: " + nodeList.length);
    		for(var i = 0; i< nodeList.length; i++){
    			log.warning("create tab at" + i )
    			tab.push([]);
    			log.warning("length current: " +nodeList.item(i).length);
    			for(var j = 0; j< nodeList.item(i).length; j++){
    				var hasChild = nodeList.item(i).hasChildNodes();
    				var a = "" + nodeList.item(i).getElementsByTagName("key").item(j).getTextContent();
    				var b = "" + nodeList.item(i).getElementsByTagName("value").item(j).getTextContent();
    				log.warning("key: " + a)
    				log.warning("value: " + b)
    				var data = {};
    				data.key = a;
    	            data.value = b;
    	            tab[i].push(data);
    	            if(uniquesKeys[data.key] == undefined){
    	            	uniquesKeys[data.key] = true;
    	            }
    	            log.warning("push data at" + i + " " + JSON.stringify(data))
    			}
    			
    		
    	}
    	
    }
    function fillFlat(arr){
    		for(var i = 0; i< arr.length; i++){
    			if(arr[i].length == uniquesKeys.length){
    				
    			}
    			else{
    				var objTemp = uniquesKeys;
    				for(var j = 0; j< arr[i].length; j++){
    					if(objTemp[arr[i][j]["key"]] == true){
    						delete objTemp[arr[i][j]["key"]];
    					}
    				}
    				for(var prop in objTemp){
    					arr[i].push({''key'':prop,''value'':''''});
    				}
    			}
    	}
    	
    }
    
    const separator = "_";
    var tab = [];
    var uniquesKeys = {};
    var list = rows.item(0).getElementsByTagName("doc");
    searchFlat(list);
    log.warning("searchflat finished");
    fillFlat(tab);
    log.warning("tab result: " + JSON.stringify(tab));
    var length =rows.item(0).length;
    log.warning("resultat length: " + length);
    //log.warning("resultat lengt2h: " + JSON.stringify(rows.item(0).getElementsByTagName("resp")));
    
    //searchRecursive(list, "", null);
    log.warning("resultat: " + JSON.stringify(tab))
    createNodeXml(tab);
    /*log.warning("resultat: " + JSON.stringify(tab));
    var tab = JSON.stringify({tab: tab});*/
    /*
    var xmlUtils = use("com.twinsoft.convertigo.engine.util.XMLUtils");
    var jsonObject = new org.codehaus.jettison.json.JSONObject(JSON.stringify(tab));
    xmlUtils.jsonToXml(jsonObject, dom.getDocumentElement());
    
    */
    /*
    function searchRecursive(nodeList, nodePath, lvl){
    for(var i = 0; i< nodeList.length; i++){
    	var level = lvl;
    	if(level == null){
    		tab.push([]);
    		level = i;
    	}
    	var type = nodeList.item(i).getNodeType();
    	var hasChild = nodeList.item(i).hasChildNodes();
    	
    	 if (hasChild && type != 3) {
    		var paf = nodePath;
    		var nodeName = nodeList.item(i).getNodeName();
    		if(nodeName != "resp"){
    			paf != "" ? paf += separator : null;
    			paf += nodeName; 
    		}
    		searchRecursive(nodeList.item(i), paf, level);
    	}
    	else{
    		var value = "" + nodeList.item(i).getTextContent();
    		var data = {};
            data.key = nodePath;
            data.value = value;
            tab[level].push(data);
            
    	}
    }
    }
    */'
↓Write_CSV [steps.WriteCSVStep-1574348044956]: 
  dataFile: '".//csv/" + formId + ".csv"'
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1574348044947
        - java.lang.String: 
          - ↑value: ./item
  titleLine: true
↓Concat [steps.XMLConcatStep-1574348044959]: 
  output: false
  separator: 
  sourcesDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: description
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: 1574348044926
                - java.lang.String: 
                  - ↑value: ./formId/text()
            - java.lang.String: 
              - ↑value: ''
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: description
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: .csv
↓jSimpleSource [steps.SimpleSourceStep-1574348044962]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1574348044959
        - java.lang.String: 
          - ↑value: ./text()
  variableName: id
↓Element [steps.XMLElementStep-1574348044965]: 
  nodeName: attachment
  ↓jAttribute [steps.AttributeStep-1574348044968]: 
    nodeName: content-type
    nodeText: application/csv
  ↓jAttribute1 [steps.AttributeStep-1574348044971]: 
    expression: context.getProjectDirectory() + "/csv/"+ id
    nodeName: local-url
  ↓jAttribute2 [steps.AttributeStep-1574348044974]: 
    expression: name+".csv"
    nodeName: name
  ↓jAttribute3 [steps.AttributeStep-1574348044977]: 
    nodeName: type
    nodeText: attachment
↓Sequence_JS21 [steps.SimpleStep-1574348044980]: 
  expression: |
    '//todo
    function searchRecursive(nodeList, nodePath, lvl){
    	for(var i = 0; i< nodeList.length; i++){
    		var level = lvl;
    		if(level == null){
    			tab.push([]);
    			level = i;
    		}
    		var type = nodeList.item(i).getNodeType();
    		var hasChild = nodeList.item(i).hasChildNodes();
    		
    		 if (hasChild && type != 3) {
    			var paf = nodePath;
    			var nodeName = nodeList.item(i).getNodeName();
    			if(nodeName != "resp"){
    				paf != "" ? paf += separator : null;
    				paf += nodeName; 
    			}
    			searchRecursive(nodeList.item(i), paf, level);
    		}
    		else{
    			var value = "" + nodeList.item(i).getTextContent();
    			if(nodePath != "" && value != ""){
    				var data = {};
    				data.key = nodePath;
    	            data.value = value;
    	            tab[level].push(data);
    			}  
    		}
    	}
    }
    
    
    function createNodeXml(arr){
    	// create parent node
    	//var node = context.addTextNodeUnderRoot("resp", "");
    	var node = myNodeList.item(0);
    	for(var i = 0; i< arr.length; i++){
    		var item = context.addTextNode(node, "item", "");
    		for(var j = 0; j< arr[i].length; j++){
    			log.warning("elem => key: " + arr[i][j]["key"]+" value: "+ arr[i][j]["value"]);
    			var elem = context.addTextNode(item, arr[i][j]["key"],arr[i][j]["value"]);			
    		}
    	}
    }
    
    function searchFlat(nodeList, nodePath, lvl){
    	log.warning("searchFlat: " + nodeList.length);
    		for(var i = 0; i< nodeList.length; i++){
    			log.warning("create tab at" + i )
    			tab.push([]);
    			log.warning("length current: " +nodeList.item(i).length);
    			for(var j = 0; j< nodeList.item(i).length; j++){
    				var hasChild = nodeList.item(i).hasChildNodes();
    				var a = "" + nodeList.item(i).getElementsByTagName("key").item(j).getTextContent();
    				var b = "" + nodeList.item(i).getElementsByTagName("value").item(j).getTextContent();
    				log.warning("key: " + a)
    				log.warning("value: " + b)
    				var data = {};
    				data.key = a;
    	            data.value = b;
    	            tab[i].push(data);
    	            if(uniquesKeys[data.key] == undefined){
    	            	uniquesKeys[data.key] = true;
    	            }
    	            log.warning("push data at" + i + " " + JSON.stringify(data))
    			}
    			
    		
    	}
    	
    }
    function fillFlat(arr){
    		for(var i = 0; i< arr.length; i++){
    			if(arr[i].length == uniquesKeys.length){
    				
    			}
    			else{
    				var objTemp = uniquesKeys;
    				for(var j = 0; j< arr[i].length; j++){
    					if(objTemp[arr[i][j]["key"]] == true){
    						delete objTemp[arr[i][j]["key"]];
    					}
    				}
    				for(var prop in objTemp){
    					arr[i].push({''key'':prop,''value'':''''});
    				}
    			}
    	}
    	
    }
    
    const separator = "_";
    var tab = [];
    var uniquesKeys = {};
    var list = rows.item(0).getElementsByTagName("doc");
    searchFlat(list);
    fillFlat(tab);
    log.warning("tab result: " + JSON.stringify(tab));
    var length =rows.item(0).length;
    log.warning("resultat length: " + length);
    //log.warning("resultat lengt2h: " + JSON.stringify(rows.item(0).getElementsByTagName("resp")));
    
    //searchRecursive(list, "", null);
    log.warning("resultat: " + JSON.stringify(tab))
    createNodeXml(tab);
    /*log.warning("resultat: " + JSON.stringify(tab));
    var tab = JSON.stringify({tab: tab});*/
    /*
    var xmlUtils = use("com.twinsoft.convertigo.engine.util.XMLUtils");
    var jsonObject = new org.codehaus.jettison.json.JSONObject(JSON.stringify(tab));
    xmlUtils.jsonToXml(jsonObject, dom.getDocumentElement());
    
    */
    /*
    function searchRecursive(nodeList, nodePath, lvl){
    for(var i = 0; i< nodeList.length; i++){
    	var level = lvl;
    	if(level == null){
    		tab.push([]);
    		level = i;
    	}
    	var type = nodeList.item(i).getNodeType();
    	var hasChild = nodeList.item(i).hasChildNodes();
    	
    	 if (hasChild && type != 3) {
    		var paf = nodePath;
    		var nodeName = nodeList.item(i).getNodeName();
    		if(nodeName != "resp"){
    			paf != "" ? paf += separator : null;
    			paf += nodeName; 
    		}
    		searchRecursive(nodeList.item(i), paf, level);
    	}
    	else{
    		var value = "" + nodeList.item(i).getTextContent();
    		var data = {};
            data.key = nodePath;
            data.value = value;
            tab[level].push(data);
            
    	}
    }
    }
    */'
  isEnabled: false
↓writeCsv [steps.SimpleStep-1574348044983]: 
  expression: |
    'List<List<String>> rows = Arrays.asList(
        Arrays.asList("Jean", "author", "Java"),
        Arrays.asList("David", "editor", "Python"),
        Arrays.asList("Scott", "editor", "Node.js")
    );
    
    FileWriter csvWriter = new FileWriter("new.csv");
    csvWriter.append("Name");
    csvWriter.append(",");
    csvWriter.append("Role");
    csvWriter.append(",");
    csvWriter.append("Topic");
    csvWriter.append("\n");
    
    for (List<String> rowData : rows) {
        csvWriter.append(String.join(",", rowData));
        csvWriter.append("\n");
    }
    
    csvWriter.flush();
    csvWriter.close();'
  isEnabled: false
↓formId [variables.RequestableVariable-1574348044986]: 
↓name [variables.RequestableVariable-1574348044989]: 
↓Test_Case [core.TestCase]: 
  ↓formId [variables.TestCaseVariable-1574348044993]: 
    value: published_1570197503511
  ↓name [variables.TestCaseVariable-1574348044996]: 
    value: a