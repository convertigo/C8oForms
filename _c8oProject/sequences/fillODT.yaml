↓Sequence_JS [steps.SimpleStep-1532352015142]: 
  expression: |
    'var proj = context.getProjectDirectory();
    var wks = (proj.substring(0, proj.indexOf("/"))).replace(''\\'',''/'') + "/";
    //var tpl = "template_F1.ott";
    var tpl = "EtatDesLieux.ott";
    var tgt = "EtatDesLieux.odt";
    var pdf = "EtatDesLieux.pdf"
    var srcFile = wks + tpl;
    var dstFile = wks + tgt;
    var pdfFile = wks + pdf;
    var imgs = wks + "form_EtatDesLieux/images/";
    
    //log.warning(">>>> project:"+proj);
    //log.warning(">>>> wks:"+wks);
    
    var job = JSON.parse(replacements);
    var regex = "\\$\\{(.*?=?.*?)\\}";
    var pattern = java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.MULTILINE);
    
    //log.warning(">>>>" + job);
    
    function searchKey(key, defKey){
    	for(var i=0; i<job.length;i++){
    		if(job[i].hasOwnProperty(key)){
    			return job[i][key]; 
    		}
    	}
    	return (defKey !== undefined)?{"value": defKey, "type": "text"}:{"value": "<not_found>", "type": "error"};
    }
    
    
    // TEMPLATING OTT FILE
    try {
    	var oodt = org.odftoolkit.simple.TextDocument.loadDocument(srcFile) ;
    
    	search = new org.odftoolkit.simple.common.navigation.TextNavigation(regex, oodt);
    //	log.warning(">>>> search next:"+search.hasNext());
    	while(search.hasNext()){
    		var item = search.nextSelection();
    		log.warning(">>>> item:"+item.getText());
    		var matcher = pattern.matcher(item.getText());
    		var arKey, defKey, key;
    		while (matcher.find()) {
    			arKey = ((matcher.group(1)).split(''=''));
    			key = arKey[0];
    			defKey = arKey[1];
    			log.warning(">>>>key:" + key);
    			log.warning(">>>>defKey:" + (defKey !== undefined));
    		}
    		
    		var result = searchKey(key, defKey);
    		
    		switch(result.type){
    			case "text":
    //				log.warning(">>>>Replacing text " + key + " with " +  result.value);
    				item.replaceWith(result.value);
    				break;
    			case "img":
    //				log.warning(">>>>Replacing img src " + key + " with " +  result.value);
    //				log.warning(">>>>" + (new java.net.URI("file:/" + wks + result.value).getPath()));
    				item.replaceWith(new java.net.URI("file:/" + wks + result.value));
    				break;
    			case "checkbox":
    				log.warning(">>>>Replacing img src " + key + " with " +  result.value);
    //				log.warning(">>>>" + (new java.net.URI("file:/" + wks + result.value).getPath()));
    				var typCheck = (result.value == "0")?"unchecked-box.svg":"checked-box.svg";
    				
    				
    //				Replace text with img
    				var checkImg = item.replaceWith(new java.net.URI("file:///" + imgs + typCheck));
    				log.warning("IMG: >>>" + checkImg);
    				log.warning("IMG URI: >>>" + "file:/" + imgs + typCheck);
    				
    //				var checkImg = item.replaceWith(org.odftoolkit.simple.draw.Image.newImage(oodt.getParagraphByIndex(0, true), new java.net.URI("file:/" + imgs + typCheck)));
    //				log.warning(">>>"+checkImg);
    				
    //				log.warning(">>>"+checkImg.getRectangle().getHeigthDesc());
    				break;
    			default:
    				log.warning(">>>> KEY " + "" + " NOT FOUND");
    		}
    		
    	}
    	oodt.save(dstFile);
    } catch (e) {
    	log.warning("ERROR: " + e);
    }
    
    //java.lang.Thread.sleep(2000);
    
    //try {
    //	var document = org.odftoolkit.odfdom.doc.OdfTextDocument.loadDocument(dstFile) ;
    //	var container = document.getContentRoot();
    //	log.warning(">>>container:" + container.toString());
    //	var outFile = new java.io.File( pdfFile );
    //    outFile.getParentFile().mkdirs();
    
    //    var out = new java.io.FileOutputStream( outFile );
    //    var options = org.odftoolkit.odfdom.converter.pdf.PdfOptions.create().fontEncoding( "windows-1252" );
    //    org.odftoolkit.odfdom.converter.pdf.PdfConverter.getInstance().convert( document, out, options );
    //} catch (e){
    //	log.warning("ERROR: " + e);
    //}
    '
↓replacements [variables.RequestableVariable-1532358833531]: 
↓Test_Case_NEW [core.TestCase]: 
  ↓replacements [variables.TestCaseVariable-1532444062235]: 
    value: '[{"entree": { "value": "1", "type": "checkbox"}}, {"sortie": { "value": "0", "type": "checkbox"}}]'