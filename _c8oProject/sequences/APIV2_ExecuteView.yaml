↓buildBaseMangoQuery [steps.SimpleStep-1694097428016]: 
  expression: |
    '// Imports and helpers functions
    include("js/common.js");
    
    
    
    let authenticatedUserID = context.getAuthenticatedUser();
    // get dynamic params
    let params = {};
    try {
    	params = JSON.parse(dynamicParams);
    }
    catch (e) {
    	log.warn("parse failed" + JSON.stringify(e));
    }
    let targetDB = "c8oforms_fs";
    if (fromResponses == "true") {
    	targetDB = "c8oforms_response_fs";
    }
    // Requests definitions
    let requests = {
    	"formsV2/out_folder": {
    		selector: [
    
    			{
    				"$or": [
    					{
    						"c8o_view_type_drafts_form": true
    					},
    					{
    						"c8o_view_type_drafts_folder": true
    					}
    				]
    			}
    		],
    		fields: [
    			"_id", "_rev", "thumbnail", "wallpaper", "collabs", "collabsResponse", "shared", "creator", "name", "pwa_enabled", "pwa_subPath", "tag"
    		],
    		sort: [
    			{ "_id": "desc" }
    		]
    	},
    	"published_formsV2/out_folder": {
    		selector: [
    			{
    				"$or": [
    					{
    						"c8o_view_type_published_form": true
    					},
    					{
    						"c8o_view_type_published_folder": true
    					}
    				]
    			}
    		],
    		fields: [
    			"_id", "_rev", "thumbnail", "wallpaper", "collabs", "collabsResponse", "shared", "creator", "name", "pwa_enabled", "pwa_subPath", "version", "tag", "status"
    		],
    		sort: [
    			{ "_id": "desc" }
    		]
    	},
    	"formsV2/in_folders": {
    		selector: [
    			{
    				"c8o_view_type_drafts_form": true
    			},
    			{
    				"tag": {
    					"$exists": true,
    					"$ne": [],
    					"$type": "array"
    				}
    			}
    		],
    		fields: [
    			"_id", "_rev", "thumbnail", "wallpaper", "collabs", "collabsResponse", "shared", "creator", "name", "pwa_enabled", "pwa_subPath", "tag", "status"
    		],
    		sort: [
    			{ "_id": "desc" }
    		]
    	},
    	"published_formsV2/in_folders": {
    		selector: [
    			{
    				"c8o_view_type_published_form": true
    			},
    			{
    				"tag": {
    					"$exists": true,
    					"$ne": [],
    					"$type": "array"
    				}
    			}
    		],
    		fields: [
    			"_id", "_rev", "thumbnail", "wallpaper", "collabs", "collabsResponse", "shared", "creator", "name", "pwa_enabled", "pwa_subPath", "version", "tag", "status"
    		],
    		sort: [
    			{ "_id": "desc" }
    		]
    	},
    	"formsV2/search": {
    		selector: [
    			{
    				"c8o_view_type_drafts_form": true
    			}
    		],
    		fields: [
    			"_id", "_rev", "thumbnail", "wallpaper", "collabs", "collabsResponse", "shared", "creator", "name", "pwa_enabled", "pwa_subPath", "tag", "status"
    		],
    		sort: [
    			{ "_id": "desc" }
    		]
    	},
    	"published_formsV2/search": {
    		selector: [
    			{
    				"c8o_view_type_published_form": true
    			}
    		],
    		fields: [
    			"_id", "_rev", "thumbnail", "wallpaper", "collabs", "collabsResponse", "shared", "creator", "name", "pwa_enabled", "pwa_subPath", "version", "tag", "status"
    		],
    		sort: [
    			{ "_id": "desc" }
    		]
    	},
    	"templatesEN": {
    		acl: false,
    		selector: [
    			{
    				"c8o_view_type_template": true
    			},
    			{
    				"lang": "en"
    			}
    		],
    		"fields": ["name", "_id"]
    	},
    	"templatesFR": {
    		acl: false,
    		selector: [
    			{
    				"c8o_view_type_template": true
    			},
    			{
    				"lang": "fr"
    			}
    		],
    		"fields": ["name", "_id"]
    	},
    	"getResponseByVersion": {
    		selector: [],
    	}
    }
    
    let mangoquery = {
    	selector: {
    		"$and": []
    	}
    };
    
    // get admin attr
    let admin = authenticatedUserID == "c8o:admin";
    
    
    // request is acl or group based create filter
    if (!admin && requests[target]["acl"] != false) {
    	// call c8ofullsyncgrp =>  design/get_groups_by_user
    	query = new java.util.HashMap();
    	query.put(''reduce'', ''false'');
    	keys = toJettison([authenticatedUserID]);
    	rows = toJSON(fsclient.postView("c8ofullsyncgrp", ''design'', ''get_groups_by_user'', query, keys)).rows;
    	// call c8oforms_fs =>  authentication/distinctGroups
    	query = new java.util.HashMap();
    	query.put(''reduce'', ''true'');
    	query.put(''group'', ''true'');
    	_use_keys = rows.map((x) => { return x.value });
    	keys = toJettison(_use_keys);
    	usedGroups = toJSON(fsclient.postView(targetDB, ''authentication'', ''distinctGroups'', query, keys));
    	usedGroups = usedGroups.rows.map((x) => { return x.key.replace(/\./g, ''\\.'') });
    
    	// build mangofilter
    	mangoquery.selector["$and"] = [
    		{
    			"_deleted": {
    				"$exists": false
    			}
    		},
    		{
    			"$or": [
    				{
    					"~c8oAcl": {
    						"$exists": false
    					},
    					"c8oGrp": {
    						"$exists": false
    					}
    				},
    				{
    					"~c8oAcl": {
    						"$eq": authenticatedUserID
    					}
    				}
    			]
    		}
    	];
    
    	for (let elem of usedGroups) {
    		let obj =
    		{
    			"c8oGrp": {
    				"$or": [
    					{
    
    					},
    					{
    						"$eq": elem
    					}
    				]
    			}
    		}
    		obj.c8oGrp["$or"][0][elem] = {
    			"$in": [
    				true,
    				"true"
    			]
    		}
    		mangoquery.selector["$and"][1]["$or"].push(obj)
    	}
    }
    
    
    // now request
    mangoquery.selector["$and"] = requests[target].selector.concat(mangoquery.selector["$and"]);
    // if it''s type for in_folders add the key
    if (target == "formsV2/in_folders" || target == "published_formsV2/in_folders") {
    	mangoquery.selector["$and"][1]["tag"]["$elemMatch"] = {
    		"$eq": params["folder"]
    	}
    }
    if (target == "formsV2/search" || target == "published_formsV2/search") {
    	if (params["query"] != undefined && params["query"] != "undefined" && params["query"] != "") {
    		mangoquery.selector["$and"].push({ "name": { "$regex": params["query"] } })
    	}
    	try {
    		params["tag"] = JSON.parse(params["tag"]);
    	}
    	catch (e) {
    
    	}
    	if (params["tag"] != undefined && params["tag"] != "undefined" && params["tag"] != "" && params["tag"] != "[]") {
    		let res = { "$or": [] };
    		for (var i = 0; i < params["tag"].length; i++) {
    			res.$or.push({
    				"tag": {
    					"$type": "array", "$elemMatch": {
    						"$eq": params["tag"][i]
    					}
    				}
    			})
    		}
    		mangoquery.selector["$and"].push(res);
    	}
    	try {
    		params["subTag"] = JSON.parse(params["subTag"]);
    	}
    	catch (e) {
    
    	}
    	if (params["subTag"] != undefined && params["subTag"] != "undefined" && params["subTag"] != "" && params["subTag"] != "[]") {
    		let res = { "$or": [] };
    		for (var i = 0; i < params["subTag"].length; i++) {
    			res.$or.push({
    				"subTag": {
    					"$type": "array", "$elemMatch": {
    						"$eq": params["subTag"][i]
    					}
    				}
    			})
    		}
    		mangoquery.selector["$and"].push(res);
    	}
    
    }
    if (target == "getResponseByVersion") {
    
    	mangoquery.selector["$and"].push({ "formId": params["formId"] });
    
    }
    mangoquery.fields = requests[target].fields;
    mangoquery.sort = requests[target].sort;
    mangoquery.limit = 10000;
    mangoquery.execution_stats = true;
    
    let res = toJSON(fsclient.postFind(targetDB, toJettison(mangoquery)));
    
    
    if ((target == "formsV2/out_folder" || target == "published_formsV2/out_folder") && res.docs) {
    	var tagsUsed = {};
    	var transformed = [];
    	var transformedFold = [];
    	for (var i = 0; i < res.docs.length; i++) {
    		var item = res.docs[i];
    		if (item.tag && Array.isArray(item.tag) && item.tag.length > 0) {
    			for (var j = 0; j < item.tag.length; j++) {
    				var tag = item.tag[j];
    				if (!tagsUsed[tag]) {
    					tagsUsed[tag] = true;
    					var newItem = {
    						isAtag: true,
    						key: tag
    					};
    					transformedFold.push(newItem);
    				}
    			}
    		} else {
    			transformed.push(item);
    		}
    	}
    
    	res.docs = transformedFold.concat(transformed);
    }
    //else if ((target == "formsV2/in_folders" || target == "published_formsV2/in_folders") && res.docs) {
    //	let _docs = [];
    //   for (var i = 0; i < res.docs.length; i++) {
    //      var item = res.docs[i];
    //      if (!item.c8o_just_folder) {
    //         _docs.push(item);
    //      }
    //   }
    //   res.docs = _docs;
    //}
    '
↓object [steps.JsonToXmlStep-1694169429816]: 
  isEnabled: false
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: usedGroups
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: usedGroups
↓object1 [steps.JsonToXmlStep-1694170286885]: 
  isEnabled: false
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: mangoquery
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: mangoquery
↓object2 [steps.JsonToXmlStep-1694171337581]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: res
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: res
↓target [variables.RequestableVariable-1694183672486]: 
↓dynamicParams [variables.RequestableVariable-1694446121764]: 
↓fromResponses [variables.RequestableVariable-1697534800512]: 
  value: false