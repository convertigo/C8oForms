â†“computeResponses [steps.SimpleStep-1697532248606]: 
  expression: |
    '// Imports and helpers functions
    include("js/common.js");
    Otherkey = "Other";
    const logLevel = "warn";
    let res = {};
    let i = 0; 
    let flatResponses = [];
    let table = [];
    // start functions
    // used to format responses, will be used recursively
    let extractResponse = (response, j, type, _id)=>{
    		switch(type){
    			case "text":
    			case "datetime":
    			case "time":
    			case "barcode":
    				if(response.value != ""){
    					flatResponses[j].value.push(response.value);
    				}
    				break;
    			case "signature":
    			case "img":
    				let att_type = false;
    				try { att_type = response.att_type == true; }catch (e) {}
                    response.att_type = att_type;
                    flatResponses[j].value.push(response);
    				break;
    			case "location":
    				if (Object.keys(response.value.gps).length > 0) {
    					if (response["value"]["bounding_box"] != undefined) {
    						response.value = JSON.stringify(response["value"]["bounding_box"]);
    					}
    					else if (response["value"]["addr"] != undefined && response["value"]["addr"]["FormattedAddress"] != undefined && response["value"]["addr"]["FormattedAddress"] != "") {
    						response.value = response["value"]["addr"]["FormattedAddress"];
    					}
    					else {
    						response.value = "latitude: " + response["value"]["gps"]["latitude"] + ", longitude: " + response["value"]["gps"]["longitude"];
    					}
    					flatResponses[j].value.push(response);
                    }
    				break;
    			case "grid":
    				if(response.value != "" && JSON.stringify(response.value) != "{}"){
    					if (!(response.value instanceof String)) {
                            response.value = JSON.stringify(response.value);
                        }
                        flatResponses[j].value.push(response);
    				}
    				break;
    			case "file":
    				if(response.value != ""){
    					let first = true;
    					if (response.value instanceof Array) {
    						for (let thing of response.value) {
    							try {
    								let url = context.getConvertigoUrl() + "fullsync/c8oforms_response_fs/" + encodeURIComponent(_id) + "/" + encodeURIComponent(thing);
    								let file_name = thing.split("_C80C80_")[1];
    
    								if (first) {
    									response.value = ''<ul> <li><a download="'' + file_name + ''" href="'' + url + ''" target="_blank">'' + file_name + ''</a> </li>'';
    									first = false;
    								}
    								else {
    									response.value = response.value + ''<li><a download="'' + file_name + ''" href="'' + url + ''" target="_blank">'' + file_name + ''</a></li>'';
    								}
    							}
    							catch (e) {}
    						}
    						if (response.value != undefined && response.value != "") {
    							response.value += "</ul>";
    						}
    					}
    					flatResponses[j].value.push(response.value);
    				}
    				break;
    			case "checkbox":
    			case "radio":
    			case "select":
    				for (let k in response["children"]) {
                        if (i == 0) {
                            if (flatResponses[j].value[k] == undefined) {
                                flatResponses[j].value[k] = 0;
                            }
                            if (response["children"][k].other == true) {
                                flatResponses[j].sets[k] = Otherkey;
                            }
                            else {
                                flatResponses[j].sets[k] = response["children"][k]["value"].length > 12 ? response["children"][k]["value"].substring(0, 12) + "..." : response["children"][k]["value"];
                            }
                        }
                        if (response["children"][k]["selected"] == true) {
                            flatResponses[j].value[k]++
                        }
                    }
    				break;
    			case "checkbox_group":
                    let m = 0;
                    for (let k in response["children"]) {
                        //k == Line1 ... etc
                        if (flatResponses[j]["sets"][m] == undefined) {
                            flatResponses[j]["color"] = [{ backgroundColor: [''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)''] }, { backgroundColor: [''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)''] }, { backgroundColor: [''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)''] }, { backgroundColor: [''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)''] }, { backgroundColor: [''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)''] }, { backgroundColor: [''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)''] }, { backgroundColor: [''rgba(255,99,132,1)''] }, { backgroundColor: [''rgba(54, 162, 235, 1)''] }, { backgroundColor: [''rgba(255, 206, 86, 1)''] }, { backgroundColor: [''rgba(75, 192, 192, 1)''] }, { backgroundColor: [''rgba(153, 102, 255, 1)''] }, { backgroundColor: [''rgba(255, 159, 64, 1)''] }];
                        }
                        flatResponses[j]["sets"][m] = k.length > 12 ? k.substring(0, 12) + "..." : k;
                        for (let l in response["children"][k]) {
                            if (flatResponses[j]["value"][+l] == undefined) {
                                flatResponses[j]["value"][+l] = [];
                            }
                            if (flatResponses[j]["value"][+l]["label"] == undefined) {
                                flatResponses[j]["value"][+l]["label"] = response["children"][k][l]["value"].length > 12 ? response["children"][k][l]["value"].substring(0, 12) + "..." : response["children"][k][l]["value"];
                            }
                            if (flatResponses[j]["value"][+l]["data"] == undefined) {
                                flatResponses[j]["value"][+l]["data"] = [];
                            }
                            if (flatResponses[j]["value"][+l]["data"][m] == undefined) {
                                flatResponses[j]["value"][+l]["data"][m] = 0;
                            }
                            if (response["children"][k][l]["selected"] == true) {
                                flatResponses[j]["value"][+l]["data"][m]++;
                            }
                        }
                        m++;
                    }
    				break;
    			case "radio_group":
    				m = 0;
                    for (let k in response["children"]) {
                        //k == Line1 ... etc
                        if (flatResponses[j]["sets"][m] == undefined) {
                            flatResponses[j]["color"] = [{ backgroundColor: [''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)'', ''rgba(255, 99, 132, 1)''] }, { backgroundColor: [''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)'', ''rgba(54, 162, 235, 1)''] }, { backgroundColor: [''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)'', ''rgba(255, 206, 86, 1)''] }, { backgroundColor: [''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)'', ''rgba(75, 192, 192, 1)''] }, { backgroundColor: [''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)'', ''rgba(153, 102, 255, 1)''] }, { backgroundColor: [''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)'', ''rgba(255, 159, 64, 1)''] }, { backgroundColor: [''rgba(255,99,132,1)''] }, { backgroundColor: [''rgba(54, 162, 235, 1)''] }, { backgroundColor: [''rgba(255, 206, 86, 1)''] }, { backgroundColor: [''rgba(75, 192, 192, 1)''] }, { backgroundColor: [''rgba(153, 102, 255, 1)''] }, { backgroundColor: [''rgba(255, 159, 64, 1)''] }];
                        }
                        flatResponses[j]["sets"][m] = k.substring(0, 12) + "...";
                        for (let l in response["children_label"]) {
                            if (flatResponses[j]["value"][+l] == undefined) {
                                flatResponses[j]["value"][+l] = [];
                            }
                            if (flatResponses[j]["value"][+l]["label"] == undefined) {
                                flatResponses[j]["value"][+l]["label"] = response["children_label"][+l]["value"].length > 12 ? response["children_label"][+l]["value"].substring(0, 12) + "..." : response["children_label"][+l]["value"];
                            }
                            if (flatResponses[j]["value"][+l]["data"] == undefined) {
                                flatResponses[j]["value"][+l]["data"] = [];
                            }
                            if (flatResponses[j]["value"][+l]["data"][m] == undefined) {
                                flatResponses[j]["value"][+l]["data"][m] = 0;
                            }
                            if (response["children_label"][l].value == response["children"][k]) {
                                flatResponses[j]["value"][+l]["data"][m]++;
                            }
                        }
                        m++;
                    }
    				break;
    			case "slider":
                    if (response["value"] !== "") {
                        if (table == undefined) {
                            table = [];
                        }
                        if (table[j] == undefined) {
                            table[j] = {};
                        }
                        if (table[j][response["value"]] == undefined) {
                            table[j][response["value"]] = flatResponses[j]["value"].push({ data: [1], label: response["value"] }) - 1;
                        }
                        else {
                            let index = table[j][response["value"]];
                            let count = flatResponses[j]["value"][index]["data"][0];
                            flatResponses[j]["value"][index]["data"] = [count + 1]; 
                        }
                    }
    				break;
    		}
    }
    //start code
    let resp;
    try{
    	resp = (callSequence("C8Oforms", "APIV2_getDocument", {id: formId})).document.res;
    }
    catch(e){
    	
    }
    // if authorized and exists doc
    if(resp){
    	res["published_form"]  = resp;
    	let currentVersion;
    	// define all existing version for this form
    	res["versions"] = createArray(resp.version);
    	if(version && res.versions.indexOf(+version) != -1){
    		currentVersion = +version;
    	}
    	else{
    		currentVersion = +resp.version;
    	}
    	console.log("currentVersion",currentVersion,logLevel)
    	query = new java.util.HashMap();
    	query.put(''reduce'', ''false'');
    	query.put(''startkey'', JSON.stringify([formId, ""+currentVersion]));
    	query.put(''endkey'', JSON.stringify([formId, ""+currentVersion]));
    	query.put("include_docs", "true");
    	let responses;
    	responses = toJSON(fsclient.getView("c8oforms_response_fs", ''read_responses'', ''getResponsesByVersion'', query)).rows;
    	res.response = {length: responses.length};
    	
    	let sortedsIds = [];
    	const pageOrder = {};
    	
    	res["published_form"].pages.forEach((page, index) => {
    		let _tempArr = res["published_form"].formulaire.filter((x)=>{
    			return x.config.page == page.pageTechName;
    		}).flatMap((x)=>{
    			if(x.type === "ion-card"){
    				let prefix = x.name;
    				const _temp_subArray = x.children.map((y)=>{
    					return {path: prefix + ".children." + y.name, type: y.type};
    				});
    				return _temp_subArray;
    			}
    			else{
    				return {path: x.name, type: x.type};
    				 
    			}
    		});
    		sortedsIds = sortedsIds.concat(_tempArr);
    	});
    	// sorted responses for current versions
    	//res["sorted"] = sortedsIds;
    	
    	let len = sortedsIds.length;
    	let lenResponses = responses.length;
    
    	// go over each fields of the form
    	for(let i = 0; i < len; i++){
    		// go over each responses
    		for(let j=0; j < lenResponses; j++){
    			// create resp struct
    			let s = sortedsIds[i].path.split(".");
    			let response  = responses[j].doc.resp;
    			let elem;
    			for (let part of s) {
    				response = response[part];
    				elem = part;
    			}
    			if(response){
    				if(j == 0){
    					flatResponses[i] = { "id": elem, att_type: false, "label": response.label, "labelHtml": response.labelHtml, "type": response.type, value: [], sets: [], "name": response.name, color:[] };
    				}
    				extractResponse(response, i, sortedsIds[i].type, responses[j].id);
    			}
    		}
    	}
    	res.response.value = flatResponses;
    	res["currentVersion"] = currentVersion;
    	
    }
    
    '
â†“object2 [steps.JsonToXmlStep-1697532248609]: 
  jsonObject: 
    - xmlizable: 
      - â†‘classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - â†‘mode: JS
        - â†’â†’: res
  key: 
    - xmlizable: 
      - â†‘classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - â†‘mode: PLAIN
        - â†’â†’: res
â†“formId [variables.RequestableVariable-1697532236824]: 
  value: published_1697531850821
â†“version [variables.RequestableVariable-1697536095803]: 