↓computeResponses [steps.SimpleStep-1697532248606]: 
  expression: |
    '// Imports and helpers functions
    include("js/common.js");
    Otherkey = "Other";
    const logLevel = "warn";
    let res = {};
    let i = 0;
    let table = [];
    csv = csv == "true";
    // start functions
    // used to format responses, will be used recursively
    let extractResponse = (response, j, type, _id, responseArray, structure, csv) => {
    	switch (type) {
    		case "text":
    		case "datetime":
    		case "time":
    		case "barcode":
    			if (response.value != "") {
    				responseArray[j].value.push(response.value);
    			}
    			break;
    		case "signature":
    		case "img":
    			if (response.value != "") {
    				if (i == 0) {
    					try { structure[j].att_type = response.att_type == true; } catch (e) { }
    				}
    				if (structure[j].att_type) {
    					let _val = context.getConvertigoUrl() + "fullsync/c8oforms_response_fs/" + encodeURIComponent(_id) + "/" + encodeURIComponent(response.name);
    					responseArray[j].value.push(_val);
    				}
    				else {
    					responseArray[j].value.push(response.value);
    				}
    			}
    			break;
    		case "location":
    			if (Object.keys(response.value.gps).length > 0) {
    				if (response["value"]["bounding_box"] != undefined) {
    					response.value = JSON.stringify(response["value"]["bounding_box"]);
    				}
    				else if (response["value"]["addr"] != undefined && response["value"]["addr"]["FormattedAddress"] != undefined && response["value"]["addr"]["FormattedAddress"] != "") {
    					response.value = response["value"]["addr"]["FormattedAddress"];
    				}
    				else {
    					response.value = { text: "Latitude : " + response["value"]["gps"]["latitude"] + ", Longitude : " + response["value"]["gps"]["longitude"] + ", précision : " + ("" + response["value"]["gps"]["accuracy"]).split(".")[0] + " métres", gps: response["value"]["gps"] };
    				}
    				responseArray[j].value.push(response.value);
    			}
    			break;
    		case "grid":
    			if (response.value != null && response.value != "" && JSON.stringify(response.value) != "{}") {
    				let val;
    				if (!(response.value instanceof String)) {
    					val = JSON.stringify(response.value);
    				}
    				else {
    					val = response.value;
    				}
    				responseArray[j].value.push(val);
    			}
    			break;
    		case "file":
    			if (response.value != "") {
    				let first = true;
    				let values = [];
    				if (response.value instanceof Array) {
    					for (let entryFile of response.value) {
    						if (typeof (entryFile) === "string") {
    							values.push({ "name": entryFile.split("_C80C80_")[1], "url": context.getConvertigoUrl() + "fullsync/c8oforms_response_fs/" + encodeURIComponent(_id) + "/" + encodeURIComponent(entryFile) });
    						}
    					}
    				}
    				responseArray[j].value = responseArray[j].value.concat(values);
    			}
    			break;
    		case "checkbox":
    		case "radio":
    		case "select":
    			for (let k in response["children"]) {
    				if (i == 0) {
    					if (responseArray[j].value[k] == undefined) {
    						responseArray[j].value[k] = 0;
    					}
    					if (response["children"][k].other == true) {
    						structure[j].categories[k] = Otherkey;
    					}
    					else {
    						structure[j].categories[k] = response["children"][k]["value"].length > 12 ? response["children"][k]["value"].substring(0, 12) + "..." : response["children"][k]["value"];
    					}
    				}
    				if (response["children"][k]["selected"] == true) {
    					responseArray[j].value[k]++
    				}
    				if(csv){
    					let val = responseArray[j].value;
    					let cat = structure[j].categories;
    					let _temp = [];
    					for(let l = 0; l < val.length; l++){
    						if(val[l] == 1){
    							_temp.push(cat[l]);
    						}
    					}
    					responseArray[j].value = _temp;
    				}
    			}
    			break;
    		case "checkbox_group":
    			let offsetCreated = 0;
    			let m = 0;
    			for (let k in response["children"]) {
    				structure[j]["categories"][m] = k.length > 12 ? k.substring(0, 12) + "..." : k;
    				for (let l in response["children"][k]) {
    					if (responseArray[j]["value"][+l] == undefined) {
    						responseArray[j]["value"][+l] = {};
    					}
    					if (responseArray[j]["value"][+l]["name"] == undefined) {
    						responseArray[j]["value"][+l]["name"] = response["children"][k][l]["value"].length > 12 ? response["children"][k][l]["value"].substring(0, 12) + "..." : response["children"][k][l]["value"];
    					}
    					if (responseArray[j]["value"][+l]["data"] == undefined) {
    						responseArray[j]["value"][+l]["data"] = [];
    					}
    					if (responseArray[j]["value"][+l]["data"][m] == undefined) {
    						responseArray[j]["value"][+l]["data"][m] = 0;
    					}
    					if (response["children"][k][l]["selected"] == true) {
    						responseArray[j]["value"][+l]["data"][m]++;
    					}
    				}
    				m++;
    			}
    			break;
    		case "radio_group":
    			m = 0;
    			for (let k in response["children"]) {
    				structure[j]["categories"][m] = k.substring(0, 12) + "...";
    				for (let l in response["children_label"]) {
    					if (responseArray[j]["value"][+l] == undefined) {
    						responseArray[j]["value"][+l] = {};
    					}
    					if (responseArray[j]["value"][+l]["name"] == undefined) {
    						responseArray[j]["value"][+l]["name"] = response["children_label"][+l]["value"].length > 12 ? response["children_label"][+l]["value"].substring(0, 12) + "..." : response["children_label"][+l]["value"];
    					}
    					if (responseArray[j]["value"][+l]["data"] == undefined) {
    						responseArray[j]["value"][+l]["data"] = [];
    					}
    					if (responseArray[j]["value"][+l]["data"][m] == undefined) {
    						responseArray[j]["value"][+l]["data"][m] = 0;
    					}
    					if (response["children_label"][l].value == response["children"][k]) {
    						responseArray[j]["value"][+l]["data"][m]++;
    					}
    				}
    				m++;
    			}
    			break;
    		case "slider":
    			if (response["value"] !== "") {
    				if (structure[j]["categories"].length === 0) {
    					structure[j]["categories"].push("");
    				}
    				if (table == undefined) {
    					table = [];
    				}
    				if (table[j] == undefined) {
    					table[j] = {};
    				}
    				if (table[j][response["value"]] == undefined) {
    					table[j][response["value"]] = responseArray[j]["value"].push({ data: [1], name: response["value"] }) - 1;
    				}
    				else {
    					let index = table[j][response["value"]];
    					let count = responseArray[j]["value"][index]["data"][0];
    					responseArray[j]["value"][index]["data"] = [count + 1];
    				}
    			}
    			break;
    		case "actionValue":
    			if (response["valueType"] == "attachment") {
    				if (i == 0) {
    					structure[j].att_type = true;
    				}
    				responseArray[j].value.push({ "name": response.value, "url": context.getConvertigoUrl() + "fullsync/c8oforms_response_fs/" + encodeURIComponent(_id) + "/" + encodeURIComponent(response.value) });
    			}
    			else {
    				responseArray[j].value.push(response.value);
    			}
    			break;
    	}
    }
    //start code
    let published_form;
    try {
    	published_form = (callSequence("C8Oforms", "APIV2_getDocument", { id: formId })).document.res;
    }
    catch (e) {
    
    }
    // if authorized and exists doc
    if (published_form) {
    	//res["raw_published_form"] = published_form;
    	res["published_form"] = { name: published_form.name };
    	let currentVersion;
    	// define all existing version for this form
    	res["versions"] = createArray(published_form.version);
    	if (version && version != "") {
    		currentVersion = +version;
    	}
    	else {
    		currentVersion = +published_form.version;
    	}
    	res["currentVersion"] = currentVersion;
    	query = new java.util.HashMap();
    	query.put(''reduce'', ''false'');
    	query.put(''startkey'', JSON.stringify([formId, "" + currentVersion]));
    	query.put(''endkey'', JSON.stringify([formId, "" + currentVersion]));
    	query.put("include_docs", "true");
    	let responses;
    	responses = toJSON(fsclient.getView("c8oforms_response_fs", ''read_responses'', ''getResponsesByVersion'', query)).rows;
    	res.response = { length: responses.length };
    	//res["raw_responses"] = responses;
    
    	let sortedsIds = [];
    	let lenActions = 0;
    
    	// if we are in forms 2.0 responses, sortedsIds are stored in response itself
    	if (responses[0] && responses[0].doc && responses[0].doc.sortedsIds) {
    		sortedsIds = responses[0].doc.sortedsIds;
    		lenActions = responses[0].doc.lenActions;
    		res.response.sort = true;
    	}
    	// if form was created before forms 2.0 release, responses doean''t contains sortedsIds. => we can compute it from actual publidhed form
    	else if (+published_form.version == +currentVersion) {
    		published_form.pages.forEach((page, index) => {
    			let _tempArr = published_form.formulaire.filter((x) => {
    				return x.config.page == page.pageTechName;
    			}).flatMap((x) => {
    				if (x.type === "ion-card") {
    					let prefix = x.name;
    					const _temp_subArray = x.children.map((y) => {
    						return { path: prefix + ".children." + y.name, type: y.type };
    					});
    					return _temp_subArray;
    				}
    				else {
    					return { path: x.name, type: x.type };
    
    				}
    			});
    			sortedsIds = sortedsIds.concat(_tempArr);
    		});
    		lenActions = published_form.actions.filter((x) => { return x.type === "submit" }).length;
    		res.response.sort = true;
    	}
    	// if none of both previous conditions are met, we can''t sort responses.
    	else {
    		// not sorted responses for old versions
    		let _tempArr = [];
    		for (let e in responses[0].doc.resp) {
    			x = responses[0].doc.resp[e];
    			if (x.type === "ion-card") {
    				let prefix = x.name;
    				for (let f in x.children) {
    					y = x.children[f];
    					_tempArr.push({ path: prefix + ".children." + y.name, type: y.type });
    				}
    			}
    			else {
    				_tempArr.push({ path: x.name, type: x.type });
    
    			}
    		}
    		sortedsIds = sortedsIds.concat(_tempArr);
    		console.log("sortedIds", sortedsIds, logLevel);
    		res.response.sort = false;
    		if (responses[0].doc.actionsValue) {
    			lenActions = Object.keys(responses[0].doc.actionsValue).length;
    		}
    	}
    
    	// sorted responses for current versions
    	let len = sortedsIds.length;
    	let lenResponses = responses.length;
    
    	// if export to csv mode
    	let nestedResponses;
    	if (summary != "true") {
    		nestedResponses = [];
    	}
    	let flatResponses = [];
    	
    	// go over each fields of the form
    	for (let i = 0; i < len; i++) {
    		// go over each responses
    		for (let j = 0; j < lenResponses; j++) {
    			// create resp struct
    			let s = sortedsIds[i].path.split(".");
    			let response = responses[j].doc.resp;
    			let elem;
    			for (let part of s) {
    				response = response[part];
    				elem = part;
    			}
    			if (response) {
    				if (j == 0) {
    					flatResponses[i] = { "id": elem, att_type: false, "label": response.label, "labelHtml": response.labelHtml, "type": response.type, categories: [], "name": response.name };
    					if(nestedResponses == undefined){
    						flatResponses[i]["value"] = [];
    					}
    				}
    				if(nestedResponses != undefined){
    					if (nestedResponses[j] == undefined) {
    						nestedResponses[j] = [];
    					}
    					if(nestedResponses[j][i] == undefined){
    						nestedResponses[j][i] = { value: []};
    					}
    					extractResponse(response, i, sortedsIds[i].type, responses[j].id, nestedResponses[j], flatResponses, csv);
    				}
    				else{
    					extractResponse(response, i, sortedsIds[i].type, responses[j].id, flatResponses, flatResponses, csv);
    				}
    				
    			}
    		}
    	}
    	let k = +("" + flatResponses.length);
    
    	// go over each actions of the form
    	for (i = 0; i < lenActions; i++) {
    		// go over each responses
    		for (let j = 0; j < lenResponses; j++) {
    			if (responses[j].doc.actionsValue) {
    				let keys = Object.keys(responses[j].doc.actionsValue);
    				let indexName = keys[i];
    				let response = responses[j].doc.actionsValue[indexName];
    				if (response) {
    					response.type = "actionValue";
    					if (j == 0) {
    						flatResponses[k + i] = { "id": indexName, att_type: false, "label": indexName, "labelHtml": indexName, "type": "actionValue", "name": indexName };
    						if(nestedResponses == undefined){
    							flatResponses[k + i]["value"] = [];
    						}
    					}
    					if(nestedResponses != undefined){
    						if (nestedResponses[j] == undefined) {
    							nestedResponses[j] = [];
    						}
    						if(nestedResponses[j][k + i] == undefined){
    							nestedResponses[j][k + i] = { value: []};
    						}
    						extractResponse(response, k + i, response.type, responses[j].id, nestedResponses[j], flatResponses, csv);
    					}
    					else{
    						extractResponse(response, k + i, response.type, responses[j].id, flatResponses, flatResponses, csv);
    					}
    				}
    			}
    
    		}
    
    	}
    	res.response.value = flatResponses;
    	if(nestedResponses){
    		res.response.nestedResponses = nestedResponses;
    		res.response.summerized = false;
    	}
    	else{
    		res.response.summerized = true;
    	}
    }'
↓object2 [steps.JsonToXmlStep-1697532248609]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: res
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: res
↓formId [variables.RequestableVariable-1697532236824]: 
  value: published_1697531850821
↓version [variables.RequestableVariable-1697536095803]: 
↓summary [variables.RequestableVariable-1699003881651]: 
  value: true
↓csv [variables.RequestableVariable-1699367933220]: 
  value: false