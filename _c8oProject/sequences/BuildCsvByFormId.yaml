comment: Build responses csv from a document id, providing a name
↓Input_variables [steps.InputVariablesStep-1572472082864]: 
↓jSimpleSource1 [steps.SimpleSourceStep-1591966045215]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1572472082864
        - java.lang.String: 
          - ↑value: ./offset/text()
  variableName: offset
↓idForV [steps.SimpleSourceStep-1572472082867]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1572472082864
        - java.lang.String: 
          - ↑value: ./formId/text()
  variableName: idForV
↓Sequence_JS1 [steps.SimpleStep-1572472082870]: 
  expression: |
    //todo
    var idForView = '"'+idForV+'"';
↓jElement [steps.ElementStep-1572472082873]: 
  expression: idForView
  nodeName: myIdForView
  output: false
↓Call_Transaction1 [steps.TransactionStep-1572472082876]: 
  sourceTransaction: C8Oforms.c8oforms_response_fs.GetView1
  ↓_use_key [variables.StepVariable-1572472082879]: 
    description: (string) – Return only documents that match the specified key. Optional
    sourceDefinition: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ↑value: 1572472082873
          - java.lang.String: 
            - ↑value: ./text()
    value: 
↓jSource [steps.SourceStep-1572472082882]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1572472082876
        - java.lang.String: 
          - ↑value: ./document/couchdb_output/rows
  variableName: rows
↓Complex1 [steps.XMLComplexStep-1572472082885]: 
↓jSource1 [steps.SourceStep-1572472082888]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1572472082885
        - java.lang.String: 
          - ↑value: .
↓Sequence_JS2 [steps.SimpleStep-1572472082891]: 
  expression: |
    '//todo
    function searchRecursive(nodeList, nodePath, lvl){
    	for(var i = 0; i< nodeList.length; i++){
    		var level = lvl;
    		if(level == null){
    			tab.push([]);
    			level = i;
    		}
    		var type = nodeList.item(i).getNodeType();
    		var hasChild = nodeList.item(i).hasChildNodes();
    		
    		 if (hasChild && type != 3) {
    			var paf = nodePath;
    			var nodeName = nodeList.item(i).getNodeName();
    			if(nodeName != "resp"){
    				paf != "" ? paf += nameSeparator : null;
    				paf += nodeName; 
    			}
    			searchRecursive(nodeList.item(i), paf, level);
    		}
    		else{
    			var value = "" + nodeList.item(i).getTextContent();
    			if(nodePath != "" && value != ""){
    				var data = {};
    				data.key = nodePath;
    	            data.value = value;
    	            tab[level].push(data);
    			}  
    		}
    	}
    }
    
    
    function createNodeXml(arr){
    	// create parent node
    	//var node = context.addTextNodeUnderRoot("resp", "");
    	var node = myNodeList.item(0);
    	for(var i = 0; i< arr.length; i++){
    		var item = context.addTextNode(node, "item", "");
    		for(var j = 0; j< arr[i].length; j++){
    			log.warning("elem => key: " + arr[i][j]["key"]+" value: "+ arr[i][j]["value"]);
    			var elem = context.addTextNode(item, arr[i][j]["key"],arr[i][j]["value"]);			
    		}
    	}
    }
    
    function searchFlat(nodeList, nodePath, lvl, seprator){
    	log.warning("searchFlat: " + nodeList.length);
    		for(var i = 0; i< nodeList.length; i++){
    			log.warning("create tab at" + i )
    			tab.push([]);
    			log.warning("length current: " +nodeList.item(i).length);
    			for(var j = 0; j< nodeList.item(i).length; j++){
    				var hasChild = nodeList.item(i).hasChildNodes();
    				var a = "" + nodeList.item(i).getElementsByTagName("key").item(j).getTextContent();
    				var b = "" + nodeList.item(i).getElementsByTagName("value").item(j).getTextContent();
    				var index2;
    				if(b.indexOf("__C8O__UNIQUE__IMG,") != -1){
    					
    					b = "" + context.getProjectUrl() + "DisplayObjects/mobile/index.html#/l/"+ b.substring(b.indexOf(",")+1)+"/"+a;
    					b = encodeURI(b);
    				}
    				else if(b.indexOf("__C8O__UNIQUE__SIGNATURE,") != -1){
    					b = "" + context.getProjectUrl() + "DisplayObjects/mobile/index.html#/l/"+ b.substring(b.indexOf(",")+1)+"/"+a;
    					b = encodeURI(b);
    				}
    				else if(b.indexOf("__C8O__UNIQUE__FILE,") != -1){
    					var myArray = b.split(",");
    					var docid = myArray[1];
    					myArray.splice(0,2);
    					b = "";
    					for(var z in myArray){
    						if(!b == ""){
    							b+=",";
    						}
    						b += "" + context.getProjectUrl() + "DisplayObjects/mobile/index.html#/l/"+ docid +"/"+myArray[z];
    						b = encodeURI(b);
    						
    					}
    					
    				}
    				else{
    					try{
    						// search for line beaks to escape them with quotes
    						var regex = /[\n]/g;
    						var match1 = b.match(regex);
    						// search for separator to escape them with quotes
    						if(seprator == ";"){
    							var regex2 = /[;]/g;
    						}
    						else{
    							var regex2 = /[,]/g;
    						}
    						var match2 = b.match(regex2);
    						
    						if((match1 != undefined && match1.length > 0) || (match2 != undefined && match2.length > 0)){
    							b = ''"'' + b + ''"'';
    						}
    					}
    					catch(e){
    						log.warning("error: "+JSON.stringify(e));
    					}
    					
    				}
    				log.warning("key: " + a)
    				log.warning("value: " + b)
    				var data = {};
    				if(a === "horodateur"){
    					try {
    						var offSetServer = new Date().getTimezoneOffset() * 60000 * -1;
    						offset = +offset;
    						var offsetDiff = offset - offSetServer;
    						log.warning("Old Date " + JSON.stringify(b));
    						var timeStamp = +b + offsetDiff;
    						log.warning("timeStamp" + JSON.stringify(timeStamp))
    						var date = new Date(+timeStamp);
    						var year = date.getFullYear();
    						var month = (date.getMonth() + 1).toString();
    						var formatedMonth = (month.length === 1) ? ("0" + month) : month;
    						var day = date.getDate().toString();
    						var formatedDay = (day.length === 1) ? ("0" + day) : day;
    						var hour = date.getHours().toString();
    						var formatedHour = (hour.length === 1) ? ("0" + hour) : hour;
    						var minute = date.getMinutes().toString();
    						var formatedMinute = (minute.length === 1) ? ("0" + minute) : minute;
    						var second = date.getSeconds().toString();
    						var formatedSecond = (second.length === 1) ? ("0" + second) : second;
    			            b =  formatedDay + "-" + formatedMonth + "-" + year + " " + formatedHour + '':'' + formatedMinute + '':'' + formatedSecond;
    			            log.warning("New Date " + JSON.stringify(b))
    					}
    					catch(e) {
    						log.warning("Error " + JSON.stringify(e))
    					}
    				}
    				data.key = a;
    	            data.value = b;
    	            tab[i].push(data);
    	            if(uniquesKeys[data.key] == undefined){
    	            	uniquesKeys[data.key] = true;
    	            }
    	            log.warning("push data at" + i + " " + JSON.stringify(data))
    			}
    			
    		
    	}
    	
    }
    function fillFlat(arr){
    		for(var i = 0; i< arr.length; i++){
    			if(arr[i].length == uniquesKeys.length){
    				
    			}
    			else{
    				var objTemp = uniquesKeys;
    				for(var j = 0; j< arr[i].length; j++){
    					if(objTemp[arr[i][j]["key"]] == true){
    						delete objTemp[arr[i][j]["key"]];
    					}
    				}
    				for(var prop in objTemp){
    					arr[i].push({''key'':prop,''value'':''''});
    				}
    			}
    	}
    	
    }
    
    function writeFile(arr,sepratorChar,encoding){
    	var char_output = new java.io.OutputStreamWriter(
    		     new java.io.FileOutputStream(context.getProjectDirectory()+ "/csv/" + formId +".csv"),
    		     java.nio.charset.Charset.forName(encoding).newEncoder() 
    		 );
    	if(tab[0] != undefined){
    		try {
    			for(var i = 0; i< arr[0].length; i++){
    				char_output.append(arr[0][i].key+"");
    				if(i == arr[0].length -1){
    					char_output.append("\n");
    				}
    				else{
    					char_output.append(sepratorChar);
    				}
    			}
    			for(var i = 0; i< arr.length; i++){
    				if(arr[i] != undefined) { 
    					for(var j = 0; j< arr[i].length; j++){
    						char_output.append(arr[i][j].value+"");
    						if(j == arr[i].length -1){
    							char_output.append("\n");
    						}
    						else{
    							char_output.append(sepratorChar);
    						}
    					}
    				}
    			}
    			char_output.flush();
    			char_output.close();
    		}
    		catch(e){
    			char_output.flush();
    			char_output.close();
    			log.warning(e + "");
    		}
    	}
    	else{
    		log.warning("write file == undefined");
    	}
    }
    // define separator and encoding
    try{
    	if(separator != ";" && separator != ","){
    		log.warning("separator: " + separator + " is not supported set to default separator ;");
    		separator = '';'';
    	}
    	var sepratorChar = separator.charAt(0);
    	if(encoding != "UTF-16" && encoding != "US-ASCII" && encoding != "ISO-8859-1" && encoding != "UTF-8" && encoding != "UTF-16BE" && encoding != "UTF-16LE"){
    		log.warning("Encoding: " + encoding + " is not supported set to default encoding UTF-8");
    		encoding = "UTF-8";
    	}
    }
    catch(e){
    	
    }
    const nameSeparator = "_";
    var tab = [];
    var uniquesKeys = {};
    var list = rows.item(0).getElementsByTagName("doc");
    searchFlat(list);
    log.warning("searchflat finished");
    fillFlat(tab);
    log.warning("tab result: " + JSON.stringify(tab));
    var length =rows.item(0).length;
    log.warning("resultat length: " + length);
    log.warning("resultat: " + JSON.stringify(tab))
    writeFile(tab,sepratorChar,encoding);
    //createNodeXml(tab);
    '
↓Write_CSV [steps.WriteCSVStep-1572472082894]: 
  dataFile: '".//csv/" + formId + ".csv"'
  isEnabled: false
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1572472082885
        - java.lang.String: 
          - ↑value: ./item
  titleLine: true
↓Concat [steps.XMLConcatStep-1572472082897]: 
  output: false
  separator: 
  sourcesDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: description
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: 1572472082864
                - java.lang.String: 
                  - ↑value: ./formId/text()
            - java.lang.String: 
              - ↑value: ''
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: description
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: .csv
↓jSimpleSource [steps.SimpleSourceStep-1572472082900]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1572472082897
        - java.lang.String: 
          - ↑value: ./text()
  variableName: id
↓Element [steps.XMLElementStep-1572472082903]: 
  nodeName: attachment
  ↓jAttribute [steps.AttributeStep-1572472082906]: 
    nodeName: content-type
    nodeText: application/csv
  ↓jAttribute1 [steps.AttributeStep-1572472082909]: 
    expression: context.getProjectDirectory() + "/csv/"+ id
    nodeName: local-url
  ↓jAttribute2 [steps.AttributeStep-1572472082912]: 
    expression: name+".csv"
    nodeName: name
  ↓jAttribute3 [steps.AttributeStep-1572472082915]: 
    nodeName: type
    nodeText: attachment
↓formId [variables.RequestableVariable-1572472082918]: 
↓name [variables.RequestableVariable-1572472082921]: 
↓offset [variables.RequestableVariable-1591966011701]: 
  value: 0
↓separator [variables.RequestableVariable-1602168904411]: 
  value: ;
↓encoding [variables.RequestableVariable-1602169188280]: 
  value: UTF-8
↓Test_Case [core.TestCase]: 
  ↓formId [variables.TestCaseVariable-1572472082925]: 
    value: 1574934564914
  ↓name [variables.TestCaseVariable-1572472082928]: 
    value: GrilleChoixMultiple