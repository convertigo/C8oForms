↓computeCSV [steps.SimpleStep-1699365547406]: 
  expression: |
    '// Imports and helpers functions
    include("js/common.js");
    var Jsoup = use("org.jsoup.Jsoup");
    Otherkey = "Other";
    const logLevel = "warn";
    let res = {};
    // start functions
    //start code
    let flatResponses;
    let csvArray = [];
    
    // map params
    var formId = f;
    var name = n;
    var offset = o;
    var separator = (s == ";" || s == ",") ? s : ";"
    var encoding = (e != null && e != "") ? e : "UTF-8";
    var string_separator = (se == "''" || se == ''"'') ? se : ''"'';
    var column_name = c;
    var version = v;
    var lang = l;
    var privacy = p;
    var reverse_separator = (separator == ";" ? "," : ";");
    
    /** 
    	rename name of attachment to prevent from ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION
    	it seems that filename must not conatins any unicode char
    	using doble quotes around name prevent us from this error
    */ 
    var nameWithoutUnicode = (''"''+name+''"'') + ".csv";
    
    
    try {
    	flatResponses = (callSequence("C8Oforms", "APIV2_getResponses", { formId: formId, version: version, summary: false, csv: true, meta: JSON.stringify({offset, lang, authorId: privacy == "id", authorName: privacy == "name" }) })).document.res;
    	res["flatResponses"] = flatResponses;
        if(flatResponses && flatResponses.response && flatResponses.response.value){
    		if(name == null || name =="" && flatResponses.published_form && flatResponses.published_form.name){
    			name = flatResponses.published_form.name;
    		}
            var key = ''id'';
            if(column_name != ''id''){
                key = "labelHtml";
            }
            // build first line of the csv with headers
            let lineHeader = [];
            for(var header of flatResponses.response.value){
    			if(header != null){
    				if(key == "labelHtml"){
    					try{
    						var doc = Jsoup.parse(header[key]);
    						header[key] = ""+ doc.body().text();
    					}
    					catch(e){}
    				}
    				if(header["type"] == "checkbox_group" || header["type"] == "radio_group"){
    					for(var cat of header["categories"]){
    						lineHeader.push(header[key] + "_" + cat);
    					}
    				}
    				else{
    					lineHeader.push(header[key]);
    				}
    	            
    			}
            }
            csvArray.push(lineHeader);
            // build each response line of the csv
            for(var nestedResponse of flatResponses.response.nestedResponses){
    			var currentLineResponse = [];
    			var i = 0;
    			for(var col of nestedResponse){
    				if(col != null){
    					switch(col.type){
    						case "radio_group" :
    						case "checkbox_group" :
    								for(var subcol of col.value){
    									for(var j = 0; j < subcol.data.length; j++){
    										if(currentLineResponse[i+j] == null){
    											currentLineResponse[i+j] = "";
    										}
    										if(subcol.data[j] == 1){
    											currentLineResponse[i+j] += (currentLineResponse[i+j].length > 0 ? reverse_separator : "") + subcol.name;
    										}
    									}
    								}
    								i = i + col.value[0].data.length;
    							break;
    						default:
    							currentLineResponse.push(col.value.join(","));
    							i++;
    							break;
    					}
    					
    				}
    				else{
    					i++;
    				}
    				
    			}
    			csvArray.push(currentLineResponse);
    		}
        }
        res["csvArray"] = csvArray;
        
    	var options = {
    	    fieldSeparator: separator,
    	    stringDelimiter: string_separator,
    	    encoding: encoding,
    	};
    	let fp = context.getProjectDirectory() + "/csv/" + formId + ".csv";
        res["csvStr"] = writeArrayToCsvFile(csvArray, options, fp)
    }
    catch (e) {
        console.log("error", e, logLevel);
        res["error"] = e; 
    }'
↓object2 [steps.JsonToXmlStep-1699365547409]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: res
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: res
↓Element [steps.XMLElementStep-1707220656205]: 
  nodeName: attachment
  ↓jAttribute [steps.AttributeStep-1707220656208]: 
    nodeName: content-type
    nodeText: application/csv
  ↓jAttribute1 [steps.AttributeStep-1707220656211]: 
    expression: context.getProjectDirectory() + "/csv/" + formId + ".csv";
    nodeName: local-url
  ↓jAttribute2 [steps.AttributeStep-1707220656214]: 
    expression: nameWithoutUnicode
    nodeName: name
  ↓jAttribute3 [steps.AttributeStep-1707220656217]: 
    nodeName: type
    nodeText: attachment
↓f [variables.RequestableVariable-1707232389123]: 
  comment: formId
↓n [variables.RequestableVariable-1707232389126]: 
  comment: name
↓o [variables.RequestableVariable-1707232389129]: 
  comment: offset
  value: 0
↓s [variables.RequestableVariable-1707232389132]: 
  comment: separator
  value: ;
↓e [variables.RequestableVariable-1707232389135]: 
  comment: encoding
  value: UTF-8
↓se [variables.RequestableVariable-1707232389138]: 
  comment: string_separator
  value: '"'
↓c [variables.RequestableVariable-1707232389141]: 
  comment: column_name
  value: id
↓v [variables.RequestableVariable-1707232389144]: 
  comment: version
  value: 
↓l [variables.RequestableVariable-1707232389147]: 
  comment: lang
  value: en
↓p [variables.RequestableVariable-1707232389150]: 
  comment: privacy
  value: ${C8Oforms.default_csv_privacy =name}