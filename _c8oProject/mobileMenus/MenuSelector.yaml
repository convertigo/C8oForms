beanData: '{"ionBean":"Menu","MenuSwipeEnabled":"plain:false"}'
comment: A menu with all pages added automatically
tagName: ion-menu
↓Header [ngx.components.UIDynamicElement-1543518260645]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓UseSharedComponent [ngx.components.UIUseShared-1647018844705]: 
    sharedcomponent: C8Oforms.MobileApplication.Application.sharedHeaderMenu
↓Content [ngx.components.UIDynamicElement-1543518260687]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓ListContainer [ngx.components.UIDynamicElement-1656493755507]: 
    beanData: '{"ionBean":"List"}'
    tagName: ion-list
    ↓ListItemSelectorEdition [ngx.components.UIDynamicElement-1656493755519]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494141198]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:home",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656493755521]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656493755523]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Home_edition
      ↓Attr [ngx.components.UIAttribute-1656494446918]: 
        attrName: '*ngIf'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:(this.global?.settings?.editing_rights != undefined && this.global?.settings?.editing_rights == 'true') || this.global?.settings?.editing_rights == undefined
      ↓Event [ngx.components.UIControlEvent-1656494462496]: 
        ↓RootPage [ngx.components.UIDynamicAction-1656494462499]: 
          beanData: |
            '{
             "ionBean": "RootPageAction",
             "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
             "data": "script:{debug: false, published:false}"
            }'
      ↓Style [ngx.components.UIStyle-1656511922987]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
    ↓ListItemButtonSelectorPublished [ngx.components.UIDynamicElement-1656494131069]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494186889]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:home",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494131072]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494131075]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Home_published
      ↓Event [ngx.components.UIControlEvent-1656494468352]: 
        ↓RootPage [ngx.components.UIDynamicAction-1656494468355]: 
          beanData: |
            '{
             "ionBean": "RootPageAction",
             "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
             "data": "script:{debug: false, published:true}"
            }'
      ↓Style [ngx.components.UIStyle-1656511990851]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
    ↓ListItemSettings [ngx.components.UIDynamicElement-1656494225469]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494239741]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:settings",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494225472]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494225475]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:settings
      ↓Event [ngx.components.UIControlEvent-1656494474248]: 
        ↓RootPage [ngx.components.UIDynamicAction-1656494474251]: 
          beanData: |
            '{
             "ionBean": "RootPageAction",
             "page": "plain:C8Oforms.MobileApplication.Application.settingsPage",
             "data": "script:{debug: false, published:true}"
            }'
      ↓Style [ngx.components.UIStyle-1656511992851]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
    ↓ListItemGDRP [ngx.components.UIDynamicElement-1656494311021]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494356697]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:information-circle-outline",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494311027]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494311030]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:gdrp
      ↓Event [ngx.components.UIControlEvent-1656494496875]: 
        ↓PushPage [ngx.components.UIDynamicAction-1656494496878]: 
          beanData: '{"ionBean":"PushPageAction","page":"plain:C8Oforms.MobileApplication.Application.GDRPpage"}'
      ↓Style [ngx.components.UIStyle-1656511995027]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
    ↓ListItemLogout [ngx.components.UIDynamicElement-1656494317445]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494379482]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:log-out",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494317448]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494317451]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:logout
      ↓Event [ngx.components.UIControlEvent-1656494481824]: 
        ↓IfElse [ngx.components.UIDynamicIf-1656494481827]: 
          beanData: '{"ionBean":"IfElseAction","condition":"script:window.navigator.onLine"}'
          ↓CallSequence [ngx.components.UIDynamicAction-1656494481830]: 
            beanData: |
              '{
               "ionBean": "CallSequenceAction",
               "requestable": "plain:C8Oforms.Logout",
               "noAutoLogin": "plain:true"
              }'
            ↓RootPage [ngx.components.UIDynamicAction-1656494481833]: 
              beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
            ↓__disableAutologin [ngx.components.UIControlVariable-1656494481836]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:true
          ↓Else_Handler [ngx.components.UIActionElseEvent-1656494481839]: 
            ↓removeSessionUser [ngx.components.UICustomAction-1656494481842]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		this.c8o.session.user.name = "anonymous";
                      		window.sessionStorage.removeItem("loggedInOffline");
                      		resolve();
                      
              ↓RootPage [ngx.components.UIDynamicAction-1656494481845]: 
                beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
      ↓Style [ngx.components.UIStyle-1656511997002]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
↓Footer [ngx.components.UIDynamicElement-1649837148980]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓FormatLayout [ngx.components.UIDynamicAttr-1649837148983]: 
    beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
    comment: FormatLayout
    tagName: div
  ↓Paragraph [ngx.components.UIDynamicElement-1649837148986]: 
    beanData: '{"ionBean":"Paragraph"}'
    tagName: p
    ↓Text [ngx.components.UIText-1649837148989]: 
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:'version_c8o' | translate