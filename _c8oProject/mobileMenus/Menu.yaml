beanData: '{"ionBean":"Menu","MenuSwipeEnabled":"plain:false"}'
comment: A menu with all pages added automatically
tagName: ion-menu
↓Header [ngx.components.UIDynamicElement-1500890727582]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓UseSharedComponent [ngx.components.UIUseShared-1647018886410]: 
    sharedcomponent: C8Oforms.MobileApplication.Application.sharedHeaderMenu
↓Content [ngx.components.UIDynamicElement-1500890742326]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓ListContainer [ngx.components.UIDynamicElement-1656494633567]: 
    beanData: '{"ionBean":"List"}'
    isEnabled: false
    tagName: ion-list
    ↓Directive2 [ngx.components.UIControlDirective-1656494670962]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:!this.global.pwa else ElseBlock_1656494762193
      ↓ListItemSelectorEdition [ngx.components.UIDynamicElement-1656494633570]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Event [ngx.components.UIControlEvent-1656494633585]: 
          ↓RootPage [ngx.components.UIDynamicAction-1656494633588]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
               "data": "script:{debug: false, published:false}"
              }'
        ↓Style [ngx.components.UIStyle-1656512009933]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
        ↓Attr [ngx.components.UIAttribute-1663173853456]: 
          attrName: role
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:button
        ↓Button [ngx.components.UIDynamicElement-1663173931869]: 
          beanData: |
            '{
             "ionBean": "Button",
             "IonColor": "plain:dark",
             "IonFill": "plain:clear"
            }'
          tagName: ion-button
          ↓Event [ngx.components.UIControlEvent-1663173931875]: 
          ↓Icon [ngx.components.UIDynamicElement-1656494633573]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IconName": "plain:home",
               "IconSlot": "plain:start"
              }'
            tagName: ion-icon
          ↓Label [ngx.components.UIDynamicElement-1656494633576]: 
            beanData: '{"ionBean":"Label"}'
            tagName: ion-label
            ↓Text [ngx.components.UIText-1656494633579]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:Home_edition
          ↓Style [ngx.components.UIStyle-1663174148739]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the button
                    //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the button when pressed
                    //--background-focused	//Background of the button when focused with the tab key
                    //--background-focused-opacity	//Opacity of the button when focused with the tab key
                    //--background-hover	//Background of the button on hover
                    //--background-hover-opacity	//Opacity of the background on hover
                    //--border-color	//Border color of the button
                    //--border-radius	//Border radius of the button
                    //--border-style	//Border style of the button
                    //--border-width	//Border width of the button
                    //--box-shadow	//Box shadow of the button
                    //--color	//Text color of the button
                    //--color-activated	//Text color of the button when pressed
                    //--color-focused	//Text color of the button when focused with the tab key
                    //--color-hover	//Text color of the button when hover
                    //--opacity	//Opacity of the button
                    //--padding-bottom	//Bottom padding of the button
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                    //--padding-top	//Top padding of the button
                    //--ripple-color	//Color of the button ripple effect
                    //--transition	//Transition of the button
                    text-transform: unset;
                    '
      ↓ListItemButtonSelectorPublished [ngx.components.UIDynamicElement-1656494633591]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Icon [ngx.components.UIDynamicElement-1656494633594]: 
          beanData: |
            '{
             "ionBean": "Icon",
             "IconName": "plain:home",
             "IconSlot": "plain:start"
            }'
          tagName: ion-icon
        ↓Label [ngx.components.UIDynamicElement-1656494633597]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1656494633600]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Home_published
        ↓Event [ngx.components.UIControlEvent-1656494633603]: 
          ↓RootPage [ngx.components.UIDynamicAction-1656494633606]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
               "data": "script:{debug: false, published:true}"
              }'
        ↓Style [ngx.components.UIStyle-1656512011833]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
      ↓ListItemSettings [ngx.components.UIDynamicElement-1656494633609]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Icon [ngx.components.UIDynamicElement-1656494633612]: 
          beanData: |
            '{
             "ionBean": "Icon",
             "IconName": "plain:settings",
             "IconSlot": "plain:start"
            }'
          tagName: ion-icon
        ↓Label [ngx.components.UIDynamicElement-1656494633615]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1656494633618]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:settings
        ↓Event [ngx.components.UIControlEvent-1656494633621]: 
          ↓RootPage [ngx.components.UIDynamicAction-1656494633624]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.settingsPage",
               "data": "script:{debug: false, published:true}"
              }'
        ↓Style [ngx.components.UIStyle-1656512013950]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
    ↓Tag [ngx.components.UIElement-1656494762193]: 
      identifier: ElseBlock_1656494762193
      tagName: ng-template
      ↓GenericItemLanguage [ngx.components.UIDynamicElement-1656494804940]: 
        beanData: '{"ionBean":"GenericItem"}'
        tagName: ion-item
        ↓Label [ngx.components.UIDynamicElement-1656494804943]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Icon [ngx.components.UIDynamicElement-1656494804946]: 
            beanData: '{"ionBean":"Icon"}'
            isEnabled: false
            tagName: ion-icon
          ↓Style [ngx.components.UIStyle-1656494804949]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                     background:rgba(255,255,255,0.0);
                    
                    
          ↓FormatLayout [ngx.components.UIDynamicAttr-1656494804952]: 
            beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-capitalize"}'
            comment: FormatLayout
            tagName: div
          ↓Text [ngx.components.UIText-1656494804955]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'language' | translate
          ↓Style1 [ngx.components.UIStyle-1656494804958]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	display: inline-block;
                    '
        ↓SelectContainer [ngx.components.UIDynamicElement-1656494804961]: 
          beanData: |
            '{
             "ionBean": "Select",
             "ControlName": "plain:name1656494804961",
             "Interface": "plain:popover"
            }'
          tagName: ion-select
          ↓SelectOptionFR [ngx.components.UIDynamicElement-1656494804964]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:fr"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804967]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'fr'|translate
          ↓SelectOptionEN [ngx.components.UIDynamicElement-1656494804970]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:en"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804973]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'en' | translate
          ↓SelectOptionES [ngx.components.UIDynamicElement-1656494804976]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:es"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804979]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'es' | translate
          ↓Event [ngx.components.UIControlEvent-1656494804982]: 
            attrName: (ionChange)
            eventName: ionChange
            ↓ChangeLanguage [ngx.components.UICustomAction-1656494804985]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		let lang;
                      		try{
                      			lang = event.detail.value
                      		}
                      		catch(e){
                      			lang = event.toString();	
                      		}
                      		
                      		if(lang != undefined && lang != ""){
                      		    localStorage.setItem('lang', lang);
                      	        window["__c8o__translate"]["use"](lang);
                      	       	this.global.settings.language = lang;
                      			this.local.visible = true;
                      			this.global.relaodAgGrid = true
                      	        page.ref.detectChanges();
                      			resolve(lang);
                      		}
                      		setTimeout(()=>{
                      			this.global.relaodAgGrid = undefined
                      			this.local.visible = undefined;
                      		},0);
                      
              ↓SetGlobal [ngx.components.UIDynamicAction-1656494804988]: 
                beanData: |
                  '{
                   "ionBean": "SetGlobalAction",
                   "Property": "plain:language",
                   "Value": "script:parent.out"
                  }'
          ↓Attr [ngx.components.UIAttribute-1656494804991]: 
            attrName: '[(ngModel)]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.global.settings.language
          ↓SelectOptionES1 [ngx.components.UIDynamicElement-1656494804994]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:it"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804997]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'it' | translate
        ↓Attr2 [ngx.components.UIAttribute-1656494805000]: 
          attrName: '[ngClass]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'stylegenericcheckboxnormal'
        ↓Style [ngx.components.UIStyle-1656494805003]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/*border-bottom: 1px solid var(--ion-color-greyButton) !important*/
                  '
        ↓Style1 [ngx.components.UIStyle-1656512017183]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
    ↓ListItemGDRP [ngx.components.UIDynamicElement-1656494633627]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494633630]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:information-circle-outline",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494633633]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494633636]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:gdrp
      ↓Event [ngx.components.UIControlEvent-1656494633639]: 
        ↓PushPage [ngx.components.UIDynamicAction-1656494633642]: 
          beanData: '{"ionBean":"PushPageAction","page":"plain:C8Oforms.MobileApplication.Application.GDRPpage"}'
      ↓Style [ngx.components.UIStyle-1656512019871]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
    ↓ListItemLogout [ngx.components.UIDynamicElement-1656494633645]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494633648]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:log-out",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494633651]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494633654]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:logout
      ↓Event [ngx.components.UIControlEvent-1656494633657]: 
        ↓IfElse [ngx.components.UIDynamicIf-1656494633660]: 
          beanData: '{"ionBean":"IfElseAction","condition":"script:window.navigator.onLine"}'
          ↓CallSequence [ngx.components.UIDynamicAction-1656494633663]: 
            beanData: |
              '{
               "ionBean": "CallSequenceAction",
               "requestable": "plain:C8Oforms.Logout",
               "noAutoLogin": "plain:true"
              }'
            ↓RootPage [ngx.components.UIDynamicAction-1656494633666]: 
              beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
            ↓__disableAutologin [ngx.components.UIControlVariable-1656494633669]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:true
          ↓Else_Handler [ngx.components.UIActionElseEvent-1656494633672]: 
            ↓removeSessionUser [ngx.components.UICustomAction-1656494633675]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		this.c8o.session.user.name = "anonymous";
                      		window.sessionStorage.removeItem("loggedInOffline");
                      		resolve();
                      
              ↓RootPage [ngx.components.UIDynamicAction-1656494633678]: 
                beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
      ↓Style [ngx.components.UIStyle-1656512021919]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
  ↓Directive2 [ngx.components.UIControlDirective-1663174471054]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.global.pwa else ElseBlock_1656494762193
    ↓ListItemSelectorEdition [ngx.components.UIDynamicElement-1663174471057]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Event [ngx.components.UIControlEvent-1663174471060]: 
        ↓RootPage [ngx.components.UIDynamicAction-1663174471063]: 
          beanData: |
            '{
             "ionBean": "RootPageAction",
             "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
             "data": "script:{debug: false, published:false}"
            }'
      ↓Style [ngx.components.UIStyle-1663174471066]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
      ↓Attr [ngx.components.UIAttribute-1663174471069]: 
        attrName: role
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:button
      ↓Button [ngx.components.UIDynamicElement-1663174471072]: 
        beanData: |
          '{
           "ionBean": "Button",
           "IonColor": "plain:dark",
           "IonFill": "plain:clear"
          }'
        isEnabled: false
        tagName: ion-button
        ↓Event [ngx.components.UIControlEvent-1663174471075]: 
        ↓Style [ngx.components.UIStyle-1663174471087]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the button
                  //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the button when pressed
                  //--background-focused	//Background of the button when focused with the tab key
                  //--background-focused-opacity	//Opacity of the button when focused with the tab key
                  //--background-hover	//Background of the button on hover
                  //--background-hover-opacity	//Opacity of the background on hover
                  //--border-color	//Border color of the button
                  //--border-radius	//Border radius of the button
                  //--border-style	//Border style of the button
                  //--border-width	//Border width of the button
                  //--box-shadow	//Box shadow of the button
                  //--color	//Text color of the button
                  //--color-activated	//Text color of the button when pressed
                  //--color-focused	//Text color of the button when focused with the tab key
                  //--color-hover	//Text color of the button when hover
                  //--opacity	//Opacity of the button
                  //--padding-bottom	//Bottom padding of the button
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                  //--padding-top	//Top padding of the button
                  //--ripple-color	//Color of the button ripple effect
                  //--transition	//Transition of the button
                  text-transform: unset;
                  '
      ↓Icon [ngx.components.UIDynamicElement-1663174471078]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:home",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1663174471081]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1663174471084]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Home_edition
      ↓Attr1 [ngx.components.UIAttribute-1663174546312]: 
        attrName: '[attr.aria-label]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.translate.instant('Home_edition')
      ↓Attr2 [ngx.components.UIAttribute-1663174682146]: 
        attrName: button
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:true
    ↓ListItemButtonSelectorPublished [ngx.components.UIDynamicElement-1663174471090]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1663174471093]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:home",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1663174471096]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1663174471099]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Home_published
      ↓Event [ngx.components.UIControlEvent-1663174471102]: 
        ↓RootPage [ngx.components.UIDynamicAction-1663174471105]: 
          beanData: |
            '{
             "ionBean": "RootPageAction",
             "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
             "data": "script:{debug: false, published:true}"
            }'
      ↓Style [ngx.components.UIStyle-1663174471108]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
      ↓Attr [ngx.components.UIAttribute-1663174739050]: 
        attrName: role
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:button
      ↓Attr1 [ngx.components.UIAttribute-1663174739053]: 
        attrName: '[attr.aria-label]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.translate.instant('Home_published')
      ↓Attr2 [ngx.components.UIAttribute-1663174739056]: 
        attrName: button
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:true
    ↓ListItemSettings [ngx.components.UIDynamicElement-1663174471111]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1663174471114]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:settings",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1663174471117]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1663174471120]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:settings
      ↓Event [ngx.components.UIControlEvent-1663174471123]: 
        ↓RootPage [ngx.components.UIDynamicAction-1663174471126]: 
          beanData: |
            '{
             "ionBean": "RootPageAction",
             "page": "plain:C8Oforms.MobileApplication.Application.settingsPage",
             "data": "script:{debug: false, published:true}"
            }'
      ↓Style [ngx.components.UIStyle-1663174471129]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
      ↓Attr [ngx.components.UIAttribute-1663174744403]: 
        attrName: role
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:button
      ↓Attr1 [ngx.components.UIAttribute-1663174744406]: 
        attrName: '[attr.aria-label]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.translate.instant('settings')
      ↓Attr2 [ngx.components.UIAttribute-1663174744409]: 
        attrName: button
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:true
  ↓Tag [ngx.components.UIElement-1663174471132]: 
    identifier: ElseBlock_1656494762193
    tagName: ng-template
    ↓GenericItemLanguage [ngx.components.UIDynamicElement-1663174471135]: 
      beanData: '{"ionBean":"GenericItem","ButtonFormType":"plain"}'
      tagName: ion-item
      ↓Label [ngx.components.UIDynamicElement-1663174471138]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Icon [ngx.components.UIDynamicElement-1663174471141]: 
          beanData: '{"ionBean":"Icon"}'
          isEnabled: false
          tagName: ion-icon
        ↓Style [ngx.components.UIStyle-1663174471144]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                   background:rgba(255,255,255,0.0);
                  
                  
        ↓FormatLayout [ngx.components.UIDynamicAttr-1663174471147]: 
          beanData: '{"ionBean":"FormatLayout"}'
          comment: FormatLayout
          tagName: div
        ↓Text [ngx.components.UIText-1663174471150]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'language_app' | translate
        ↓Style1 [ngx.components.UIStyle-1663174471153]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '	display: inline-block;
                  '
        ↓Attr [ngx.components.UIAttribute-1666263088521]: 
          attrName: '[attr.aria-hidden]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:false
        ↓Attr1 [ngx.components.UIAttribute-1666269201869]: 
          attrName: '[attr.aria-labelledby]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:button_lang
          isEnabled: false
        ↓Attr2 [ngx.components.UIAttribute-1666276066317]: 
          attrName: class
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:ion-text-wrap
      ↓SelectContainer [ngx.components.UIDynamicElement-1663174471156]: 
        beanData: |
          '{
           "ionBean": "Select",
           "ControlName": "plain:name1656494804961",
           "Interface": "plain:popover"
          }'
        tagName: ion-select
        ↓Paragraph [ngx.components.UIDynamicElement-1666270648905]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓Text [ngx.components.UIText-1666270648907]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:selected_by_arrow
          ↓Attr [ngx.components.UIAttribute-1666270659080]: 
            attrName: id
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:popup_description
          ↓Attr1 [ngx.components.UIAttribute-1666270690035]: 
            attrName: class
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:sr-only
        ↓SelectOptionFR [ngx.components.UIDynamicElement-1663174471159]: 
          beanData: '{"ionBean":"SelectOption","Value":"plain:fr"}'
          tagName: ion-select-option
          ↓Text [ngx.components.UIText-1663174471162]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'fr'|translate
          ↓Attr [ngx.components.UIAttribute-1663851062925]: 
            attrName: lang
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:fr
        ↓SelectOptionEN [ngx.components.UIDynamicElement-1663174471165]: 
          beanData: '{"ionBean":"SelectOption","Value":"plain:en"}'
          tagName: ion-select-option
          ↓Text [ngx.components.UIText-1663174471168]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'en' | translate
          ↓Attr [ngx.components.UIAttribute-1663851081845]: 
            attrName: '[attr.lang]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:en
        ↓SelectOptionES [ngx.components.UIDynamicElement-1663174471171]: 
          beanData: '{"ionBean":"SelectOption","Value":"plain:es"}'
          tagName: ion-select-option
          ↓Text [ngx.components.UIText-1663174471174]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'es' | translate
          ↓Attr [ngx.components.UIAttribute-1663851089017]: 
            attrName: lang
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:es
        ↓Event [ngx.components.UIControlEvent-1663174471177]: 
          attrName: (ionChange)
          eventName: ionChange
          ↓ChangeLanguage [ngx.components.UICustomAction-1663174471180]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		let lang;
                    		try{
                    			lang = event.detail.value
                    		}
                    		catch(e){
                    			lang = event.toString();	
                    		}
                    		
                    		if(lang != undefined && lang != ""){
                    		    localStorage.setItem('lang', lang);
                    	        window["__c8o__translate"]["use"](lang);
                    	       	this.global.settings.language = lang;
                    			this.local.visible = true;
                    			this.global.relaodAgGrid = true
                    	        page.ref.detectChanges();
                    			resolve(lang);
                    		}
                    		setTimeout(()=>{
                    			this.global.relaodAgGrid = undefined
                    			this.local.visible = undefined;
                    			try{
                    				let id = "#c8oSpinnerRgaa";
                    				document.getElementById(id).innerHTML = page["translate"].instant("my_lang_selected");
                    				setTimeout(()=>{
                    					document.getElementById(id).innerHTML = "";
                    				}, 1000)
                    			}
                    			catch(e){
                    				
                    			}
                    		},0);
                    
            ↓SetGlobal [ngx.components.UIDynamicAction-1663174471183]: 
              beanData: |
                '{
                 "ionBean": "SetGlobalAction",
                 "Property": "plain:language",
                 "Value": "script:parent.out"
                }'
        ↓Attr [ngx.components.UIAttribute-1663174471186]: 
          attrName: '[(ngModel)]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.global.settings.language
        ↓SelectOptionES1 [ngx.components.UIDynamicElement-1663174471189]: 
          beanData: '{"ionBean":"SelectOption","Value":"plain:it"}'
          tagName: ion-select-option
          ↓Text [ngx.components.UIText-1663174471192]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'it' | translate
          ↓Attr [ngx.components.UIAttribute-1663851096566]: 
            attrName: lang
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:it
        ↓Attr1 [ngx.components.UIAttribute-1663847282529]: 
          attrName: '[interfaceOptions]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: 'script:{cssClass: ''my-custom-interface''}'
        ↓Event1 [ngx.components.UIControlEvent-1663852327292]: 
          ↓setLangAttrOnSelectOptions [ngx.components.UICustomAsyncAction-1663852338212]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		//done for rgaa / wcag
                    		try {
                    			setTimeout(()=>{
                    				let elems = document.getElementsByClassName("my-custom-interface")[0].querySelectorAll("ion-item ion-label");
                    				elems[0]["lang"]= "fr";
                    				elems[1]["lang"]= "en";
                    				elems[2]["lang"]= "es";
                    				elems[3]["lang"]= "it";
                    			},1000)
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    
        ↓Attr2 [ngx.components.UIAttribute-1666269232197]: 
          attrName: id
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:button_lang
        ↓Attr3 [ngx.components.UIAttribute-1666269363380]: 
          attrName: role
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:none
        ↓Attr4 [ngx.components.UIAttribute-1666270554485]: 
          attrName: aria-labelledby
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:ion-sel-0 popup_description
      ↓Attr2 [ngx.components.UIAttribute-1663174471195]: 
        attrName: '[ngClass]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'stylegenericcheckboxnormal'
      ↓Style [ngx.components.UIStyle-1663174471198]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                	&:hover{
                		cursor:pointer;
                	}
                
      ↓Attr1 [ngx.components.UIAttribute-1663174752097]: 
        attrName: '[attr.aria-label]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.translate.instant('language_app')
        isEnabled: false
  ↓ListItemGDRP [ngx.components.UIDynamicElement-1663174471204]: 
    beanData: '{"ionBean":"ListItem"}'
    tagName: ion-item
    ↓Icon [ngx.components.UIDynamicElement-1663174471207]: 
      beanData: |
        '{
         "ionBean": "Icon",
         "IconName": "plain:information-circle-outline",
         "IconSlot": "plain:start"
        }'
      tagName: ion-icon
      ↓Attr [ngx.components.UIAttribute-1663840890046]: 
        attrName: '[attr.aria-hidden]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:true
    ↓Label [ngx.components.UIDynamicElement-1663174471210]: 
      beanData: '{"ionBean":"Label"}'
      tagName: ion-label
      ↓Text [ngx.components.UIText-1663174471213]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:gdrp
      ↓Attr [ngx.components.UIAttribute-1666276008431]: 
        attrName: class
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:ion-text-wrap
    ↓Event [ngx.components.UIControlEvent-1663174471216]: 
      ↓PushPage [ngx.components.UIDynamicAction-1663174471219]: 
        beanData: '{"ionBean":"PushPageAction","page":"plain:C8Oforms.MobileApplication.Application.GDRPpage"}'
        isEnabled: false
      ↓ModalPage [ngx.components.UIDynamicAction-1666273535576]: 
        beanData: |
          '{
           "ionBean": "ModalAction",
           "page": "plain:C8Oforms.MobileApplication.Application.GDRPpage",
           "enableBackdropDismiss": "plain:false",
           "cssClass": "plain:modalCSV"
          }'
    ↓Style [ngx.components.UIStyle-1663174471222]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '/**
               * Custom properties (sometimes referred to as CSS variables or cascading variables)
               * are entities defined by CSS authors that contain specific values to be reused throughout a document.
               * They are set using custom property notation, e.g.: --main-color: black;
               * and are accessed using the var() function, e.g.: color: var(--main-color);
               * You can find below your component''s properties you can customize within the page.
               * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
               * For more informations see https://ionicframework.com/docs/theming.
              **/
              //--background	//Background of the item
              //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
              //--background-activated-opacity	//Opacity of the item background when pressed
              //--background-focused	//Background of the item when focused with the tab key
              //--background-focused-opacity	//Opacity of the item background when focused with the tab key
              //--background-hover	//Background of the item on hover
              //--background-hover-opacity	//Opacity of the background of the item on hover
              //--border-color	//Color of the item border
              //--border-radius	//Radius of the item border
              //--border-style	//Style of the item border
              //--border-width	//Width of the item border
              //--color	//Color of the item
              //--color-activated	//Color of the item when pressed
              //--color-focused	//Color of the item when focused with the tab key
              //--color-hover	//Color of the item on hover
              //--detail-icon-color	//Color of the item detail icon
              //--detail-icon-font-size	//Font size of the item detail icon
              //--detail-icon-opacity	//Opacity of the item detail icon
              //--highlight-color-focused	//The color of the highlight on the item when focused
              //--highlight-color-invalid	//The color of the highlight on the item when invalid
              //--highlight-color-valid	//The color of the highlight on the item when valid
              //--highlight-height	//The height of the highlight on the item
              //--inner-border-width	//Width of the item inner border
              //--inner-box-shadow	//Box shadow of the item inner
              //--inner-padding-bottom	//Bottom padding of the item inner
              //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
              //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
              //--inner-padding-top	//Top padding of the item inner
              //--min-height	//Minimum height of the item
              //--padding-bottom	//Bottom padding of the item
              //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
              //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
              //--padding-top	//Top padding of the item
              //--ripple-color	//Color of the item ripple effect
              //--transition	//Transition of the item
              	&:hover{
              		cursor:pointer;
              	}
              '
    ↓Attr [ngx.components.UIAttribute-1663174823114]: 
      attrName: role
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:button
    ↓Attr1 [ngx.components.UIAttribute-1663174823117]: 
      attrName: '[attr.aria-label]'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.translate.instant('gdrp')
    ↓Attr3 [ngx.components.UIAttribute-1663174823120]: 
      attrName: button
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:true
    ↓Attr2 [ngx.components.UIAttribute-1666273090524]: 
      attrName: tabindex
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:0
  ↓ListItemLogout [ngx.components.UIDynamicElement-1663174471225]: 
    beanData: '{"ionBean":"ListItem"}'
    tagName: ion-item
    ↓Icon [ngx.components.UIDynamicElement-1663174471228]: 
      beanData: |
        '{
         "ionBean": "Icon",
         "IconName": "plain:log-out",
         "IconSlot": "plain:start"
        }'
      tagName: ion-icon
      ↓Attr [ngx.components.UIAttribute-1663840912926]: 
        attrName: '[attr.aria-hidden]'
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:true
    ↓Label [ngx.components.UIDynamicElement-1663174471231]: 
      beanData: '{"ionBean":"Label"}'
      tagName: ion-label
      ↓Text [ngx.components.UIText-1663174471234]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:logout
      ↓Attr [ngx.components.UIAttribute-1666276079138]: 
        attrName: class
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:ion-text-wrap
    ↓Event [ngx.components.UIControlEvent-1663174471237]: 
      ↓IfElse [ngx.components.UIDynamicIf-1663174471240]: 
        beanData: '{"ionBean":"IfElseAction","condition":"script:window.navigator.onLine"}'
        ↓CallSequence [ngx.components.UIDynamicAction-1663174471243]: 
          beanData: |
            '{
             "ionBean": "CallSequenceAction",
             "requestable": "plain:C8Oforms.Logout",
             "noAutoLogin": "plain:true"
            }'
          ↓RootPage [ngx.components.UIDynamicAction-1663174471246]: 
            beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
          ↓__disableAutologin [ngx.components.UIControlVariable-1663174471249]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:true
        ↓Else_Handler [ngx.components.UIActionElseEvent-1663174471252]: 
          ↓removeSessionUser [ngx.components.UICustomAction-1663174471255]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    		this.c8o.session.user.name = "anonymous";
                    		window.sessionStorage.removeItem("loggedInOffline");
                    		resolve();
                    
            ↓RootPage [ngx.components.UIDynamicAction-1663174471258]: 
              beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
    ↓Style [ngx.components.UIStyle-1663174471261]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '/**
               * Custom properties (sometimes referred to as CSS variables or cascading variables)
               * are entities defined by CSS authors that contain specific values to be reused throughout a document.
               * They are set using custom property notation, e.g.: --main-color: black;
               * and are accessed using the var() function, e.g.: color: var(--main-color);
               * You can find below your component''s properties you can customize within the page.
               * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
               * For more informations see https://ionicframework.com/docs/theming.
              **/
              //--background	//Background of the item
              //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
              //--background-activated-opacity	//Opacity of the item background when pressed
              //--background-focused	//Background of the item when focused with the tab key
              //--background-focused-opacity	//Opacity of the item background when focused with the tab key
              //--background-hover	//Background of the item on hover
              //--background-hover-opacity	//Opacity of the background of the item on hover
              //--border-color	//Color of the item border
              //--border-radius	//Radius of the item border
              //--border-style	//Style of the item border
              //--border-width	//Width of the item border
              //--color	//Color of the item
              //--color-activated	//Color of the item when pressed
              //--color-focused	//Color of the item when focused with the tab key
              //--color-hover	//Color of the item on hover
              //--detail-icon-color	//Color of the item detail icon
              //--detail-icon-font-size	//Font size of the item detail icon
              //--detail-icon-opacity	//Opacity of the item detail icon
              //--highlight-color-focused	//The color of the highlight on the item when focused
              //--highlight-color-invalid	//The color of the highlight on the item when invalid
              //--highlight-color-valid	//The color of the highlight on the item when valid
              //--highlight-height	//The height of the highlight on the item
              //--inner-border-width	//Width of the item inner border
              //--inner-box-shadow	//Box shadow of the item inner
              //--inner-padding-bottom	//Bottom padding of the item inner
              //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
              //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
              //--inner-padding-top	//Top padding of the item inner
              //--min-height	//Minimum height of the item
              //--padding-bottom	//Bottom padding of the item
              //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
              //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
              //--padding-top	//Top padding of the item
              //--ripple-color	//Color of the item ripple effect
              //--transition	//Transition of the item
              	&:hover{
              		cursor:pointer;
              	}
              '
    ↓Attr [ngx.components.UIAttribute-1663174840730]: 
      attrName: role
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:button
    ↓Attr1 [ngx.components.UIAttribute-1663174840733]: 
      attrName: '[attr.aria-label]'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.translate.instant('logout')
    ↓Attr3 [ngx.components.UIAttribute-1663174840736]: 
      attrName: button
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:true
    ↓Attr2 [ngx.components.UIAttribute-1666273109276]: 
      attrName: tabindex
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:0
↓Footer [ngx.components.UIDynamicElement-1582105899322]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓FormatLayout [ngx.components.UIDynamicAttr-1645090137317]: 
    beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
    comment: FormatLayout
    tagName: div
  ↓Button [ngx.components.UIDynamicElement-1663173745709]: 
    beanData: '{"ionBean":"Button"}'
    tagName: ion-button
    ↓Label [ngx.components.UIDynamicElement-1663173745711]: 
      beanData: '{"ionBean":"Label"}'
      tagName: ion-label
      ↓Text [ngx.components.UIText-1663173745713]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:close
      ↓Style [ngx.components.UIStyle-1663850140649]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                --color: white;	//Color of the label
                '
    ↓Event [ngx.components.UIControlEvent-1663173745715]: 
      ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1663174974473]: 
        actionValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                		try {
                			let menu = page.getInstance(MenuController);
                			menu.close()
                		} catch (e) {
                			console.log("err", e)
                		} finally {
                			return;
                		}
                
        module_ts_imports: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                - com.twinsoft.convertigo.beans.common.XMLVector: 
                  - java.lang.String: 
                    - ↑value: MenuController
                  - java.lang.String: 
                    - ↑value: '@ionic/angular'
        page_ts_imports: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                - com.twinsoft.convertigo.beans.common.XMLVector: 
                  - java.lang.String: 
                    - ↑value: MenuController
                  - java.lang.String: 
                    - ↑value: '@ionic/angular'
    ↓Attr [ngx.components.UIAttribute-1666273200719]: 
      attrName: role
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:button
    ↓Attr2 [ngx.components.UIAttribute-1666273200722]: 
      attrName: tabindex
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:0
  ↓Paragraph [ngx.components.UIDynamicElement-1582105899328]: 
    beanData: '{"ionBean":"Paragraph"}'
    tagName: p
    ↓Text [ngx.components.UIText-1582105899331]: 
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:'version_c8o' | translate
↓Event [ngx.components.UIControlEvent-1666258132963]: 
  attrName: (ionDidOpen)
  eventName: ionDidOpen
  ↓setAriaExpanded [ngx.components.UICustomAsyncAction-1666258151960]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			document.querySelectorAll("#menubuttonviewer")[0].shadowRoot.querySelectorAll("button")[0].setAttribute("aria-expanded", "true");
            			document.querySelectorAll("ion-button").forEach((x: any)=>{
            				x.removeAttribute("type");
            				x.role = "button";
            				x.tabindex = "0";
            				x.shadowRoot.querySelectorAll("button").forEach((y: any)=>{
            					y.removeAttribute("role");
            				})
            			})
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            '
↓Event1 [ngx.components.UIControlEvent-1666258685845]: 
  attrName: (ionWillClose)
  eventName: ionWillClose
  ↓removeAriaExpanded [ngx.components.UICustomAsyncAction-1666258685848]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		try {
            			document.querySelectorAll("#menubuttonviewer")[0].shadowRoot.querySelectorAll("button")[0].setAttribute("aria-expanded", "false")
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            