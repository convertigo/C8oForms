beanData: '{"ionBean":"Menu","MenuSwipeEnabled":"plain:false"}'
comment: A menu with all pages added automatically
tagName: ion-menu
↓Header [ngx.components.UIDynamicElement-1500890727582]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓UseSharedComponent [ngx.components.UIUseShared-1647018886410]: 
    sharedcomponent: C8Oforms.MobileApplication.Application.sharedHeaderMenu
↓Content [ngx.components.UIDynamicElement-1500890742326]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓ListContainer [ngx.components.UIDynamicElement-1656494633567]: 
    beanData: '{"ionBean":"List"}'
    tagName: ion-list
    ↓Directive2 [ngx.components.UIControlDirective-1656494670962]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:!this.global.pwa && false else ElseBlock_1656494762193
      ↓ListItemSelectorEdition [ngx.components.UIDynamicElement-1656494633570]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Icon [ngx.components.UIDynamicElement-1656494633573]: 
          beanData: |
            '{
             "ionBean": "Icon",
             "IconName": "plain:home",
             "IconSlot": "plain:start"
            }'
          tagName: ion-icon
        ↓Label [ngx.components.UIDynamicElement-1656494633576]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1656494633579]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Home_edition
        ↓Event [ngx.components.UIControlEvent-1656494633585]: 
          ↓RootPage [ngx.components.UIDynamicAction-1656494633588]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
               "data": "script:{debug: false, published:false}"
              }'
        ↓Style [ngx.components.UIStyle-1656512009933]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
      ↓ListItemButtonSelectorPublished [ngx.components.UIDynamicElement-1656494633591]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Icon [ngx.components.UIDynamicElement-1656494633594]: 
          beanData: |
            '{
             "ionBean": "Icon",
             "IconName": "plain:home",
             "IconSlot": "plain:start"
            }'
          tagName: ion-icon
        ↓Label [ngx.components.UIDynamicElement-1656494633597]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1656494633600]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Home_published
        ↓Event [ngx.components.UIControlEvent-1656494633603]: 
          ↓RootPage [ngx.components.UIDynamicAction-1656494633606]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.selectorPage",
               "data": "script:{debug: false, published:true}"
              }'
        ↓Style [ngx.components.UIStyle-1656512011833]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
      ↓ListItemSettings [ngx.components.UIDynamicElement-1656494633609]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Icon [ngx.components.UIDynamicElement-1656494633612]: 
          beanData: |
            '{
             "ionBean": "Icon",
             "IconName": "plain:settings",
             "IconSlot": "plain:start"
            }'
          tagName: ion-icon
        ↓Label [ngx.components.UIDynamicElement-1656494633615]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1656494633618]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:settings
        ↓Event [ngx.components.UIControlEvent-1656494633621]: 
          ↓RootPage [ngx.components.UIDynamicAction-1656494633624]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:C8Oforms.MobileApplication.Application.settingsPage",
               "data": "script:{debug: false, published:true}"
              }'
        ↓Style [ngx.components.UIStyle-1656512013950]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
    ↓Tag [ngx.components.UIElement-1656494762193]: 
      identifier: ElseBlock_1656494762193
      tagName: ng-template
      ↓GenericItemLanguage [ngx.components.UIDynamicElement-1656494804940]: 
        beanData: '{"ionBean":"GenericItem"}'
        tagName: ion-item
        ↓Label [ngx.components.UIDynamicElement-1656494804943]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Icon [ngx.components.UIDynamicElement-1656494804946]: 
            beanData: '{"ionBean":"Icon"}'
            isEnabled: false
            tagName: ion-icon
          ↓Style [ngx.components.UIStyle-1656494804949]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                     background:rgba(255,255,255,0.0);
                    
                    
          ↓FormatLayout [ngx.components.UIDynamicAttr-1656494804952]: 
            beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-capitalize"}'
            comment: FormatLayout
            tagName: div
          ↓Text [ngx.components.UIText-1656494804955]: 
            i18n: true
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'language' | translate
          ↓Style1 [ngx.components.UIStyle-1656494804958]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	display: inline-block;
                    '
        ↓SelectContainer [ngx.components.UIDynamicElement-1656494804961]: 
          beanData: |
            '{
             "ionBean": "Select",
             "ControlName": "plain:name1656494804961",
             "Interface": "plain:popover"
            }'
          tagName: ion-select
          ↓SelectOptionFR [ngx.components.UIDynamicElement-1656494804964]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:fr"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804967]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'fr'|translate
          ↓SelectOptionEN [ngx.components.UIDynamicElement-1656494804970]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:en"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804973]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'en' | translate
          ↓SelectOptionES [ngx.components.UIDynamicElement-1656494804976]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:es"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804979]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'es' | translate
          ↓Event [ngx.components.UIControlEvent-1656494804982]: 
            attrName: (ionChange)
            eventName: ionChange
            ↓ChangeLanguage [ngx.components.UICustomAction-1656494804985]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		let lang;
                      		try{
                      			lang = event.detail.value
                      		}
                      		catch(e){
                      			lang = event.toString();	
                      		}
                      		
                      		if(lang != undefined && lang != ""){
                      		    localStorage.setItem('lang', lang);
                      	        window["__c8o__translate"]["use"](lang);
                      	       	this.global.settings.language = lang;
                      			this.local.visible = true;
                      			this.global.relaodAgGrid = true
                      	        page.ref.detectChanges();
                      			resolve(lang);
                      		}
                      		setTimeout(()=>{
                      			this.global.relaodAgGrid = undefined
                      			this.local.visible = undefined;
                      		},0);
                      
              ↓SetGlobal [ngx.components.UIDynamicAction-1656494804988]: 
                beanData: |
                  '{
                   "ionBean": "SetGlobalAction",
                   "Property": "plain:language",
                   "Value": "script:parent.out"
                  }'
          ↓Attr [ngx.components.UIAttribute-1656494804991]: 
            attrName: '[(ngModel)]'
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.global.settings.language
          ↓SelectOptionES1 [ngx.components.UIDynamicElement-1656494804994]: 
            beanData: '{"ionBean":"SelectOption","Value":"plain:it"}'
            tagName: ion-select-option
            ↓Text [ngx.components.UIText-1656494804997]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'it' | translate
        ↓Attr2 [ngx.components.UIAttribute-1656494805000]: 
          attrName: '[ngClass]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'stylegenericcheckboxnormal'
        ↓Style [ngx.components.UIStyle-1656494805003]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/*border-bottom: 1px solid var(--ion-color-greyButton) !important*/
                  '
        ↓Style1 [ngx.components.UIStyle-1656512017183]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  	&:hover{
                  		cursor:pointer;
                  	}
                  '
    ↓ListItemGDRP [ngx.components.UIDynamicElement-1656494633627]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494633630]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:information-circle-outline",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494633633]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494633636]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:gdrp
      ↓Event [ngx.components.UIControlEvent-1656494633639]: 
        ↓PushPage [ngx.components.UIDynamicAction-1656494633642]: 
          beanData: '{"ionBean":"PushPageAction","page":"plain:C8Oforms.MobileApplication.Application.GDRPpage"}'
      ↓Style [ngx.components.UIStyle-1656512019871]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
    ↓ListItemLogout [ngx.components.UIDynamicElement-1656494633645]: 
      beanData: '{"ionBean":"ListItem"}'
      tagName: ion-item
      ↓Icon [ngx.components.UIDynamicElement-1656494633648]: 
        beanData: |
          '{
           "ionBean": "Icon",
           "IconName": "plain:log-out",
           "IconSlot": "plain:start"
          }'
        tagName: ion-icon
      ↓Label [ngx.components.UIDynamicElement-1656494633651]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1656494633654]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:logout
      ↓Event [ngx.components.UIControlEvent-1656494633657]: 
        ↓IfElse [ngx.components.UIDynamicIf-1656494633660]: 
          beanData: '{"ionBean":"IfElseAction","condition":"script:window.navigator.onLine"}'
          ↓CallSequence [ngx.components.UIDynamicAction-1656494633663]: 
            beanData: |
              '{
               "ionBean": "CallSequenceAction",
               "requestable": "plain:C8Oforms.Logout",
               "noAutoLogin": "plain:true"
              }'
            ↓RootPage [ngx.components.UIDynamicAction-1656494633666]: 
              beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
            ↓__disableAutologin [ngx.components.UIControlVariable-1656494633669]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:true
          ↓Else_Handler [ngx.components.UIActionElseEvent-1656494633672]: 
            ↓removeSessionUser [ngx.components.UICustomAction-1656494633675]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      		this.c8o.session.user.name = "anonymous";
                      		window.sessionStorage.removeItem("loggedInOffline");
                      		resolve();
                      
              ↓RootPage [ngx.components.UIDynamicAction-1656494633678]: 
                beanData: '{"ionBean":"RootPageAction","page":"plain:C8Oforms.MobileApplication.Application.loginPage"}'
      ↓Style [ngx.components.UIStyle-1656512021919]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the item
                //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                //--background-activated-opacity	//Opacity of the item background when pressed
                //--background-focused	//Background of the item when focused with the tab key
                //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                //--background-hover	//Background of the item on hover
                //--background-hover-opacity	//Opacity of the background of the item on hover
                //--border-color	//Color of the item border
                //--border-radius	//Radius of the item border
                //--border-style	//Style of the item border
                //--border-width	//Width of the item border
                //--color	//Color of the item
                //--color-activated	//Color of the item when pressed
                //--color-focused	//Color of the item when focused with the tab key
                //--color-hover	//Color of the item on hover
                //--detail-icon-color	//Color of the item detail icon
                //--detail-icon-font-size	//Font size of the item detail icon
                //--detail-icon-opacity	//Opacity of the item detail icon
                //--highlight-color-focused	//The color of the highlight on the item when focused
                //--highlight-color-invalid	//The color of the highlight on the item when invalid
                //--highlight-color-valid	//The color of the highlight on the item when valid
                //--highlight-height	//The height of the highlight on the item
                //--inner-border-width	//Width of the item inner border
                //--inner-box-shadow	//Box shadow of the item inner
                //--inner-padding-bottom	//Bottom padding of the item inner
                //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                //--inner-padding-top	//Top padding of the item inner
                //--min-height	//Minimum height of the item
                //--padding-bottom	//Bottom padding of the item
                //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                //--padding-top	//Top padding of the item
                //--ripple-color	//Color of the item ripple effect
                //--transition	//Transition of the item
                	&:hover{
                		cursor:pointer;
                	}
                '
↓Footer [ngx.components.UIDynamicElement-1582105899322]: 
  beanData: '{"ionBean":"Footer"}'
  tagName: ion-footer
  ↓FormatLayout [ngx.components.UIDynamicAttr-1645090137317]: 
    beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
    comment: FormatLayout
    tagName: div
  ↓Paragraph [ngx.components.UIDynamicElement-1582105899328]: 
    beanData: '{"ionBean":"Paragraph"}'
    tagName: p
    ↓Text [ngx.components.UIText-1582105899331]: 
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:'version_c8o' | translate