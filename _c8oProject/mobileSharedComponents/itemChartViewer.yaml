scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompFunction*/
        	
        	public updateGridValues(){
        		let item = this.item;
        		let page = this.pageOwner;
        		if(document.getElementById(this.item.id).getElementsByClassName("justTocheckExistingLoading").length == 0){
        			// if grids is''nt showing overlay
        			if(
        				page.local.techGrid != undefined
        				&& page.local.techGrid[item.name] != undefined
        				&& this.outModel!= undefined
        				&& this.outModel.value != undefined 
        				&& (
        					typeof this.outModel.value != "object" 
        					|| (
        						Object.keys(this.outModel.value) != undefined
        						&& Object.keys(this.outModel.value).length > 0
        						)
        					)
        				&& this.model != undefined
        			){
        				// if grid''s value returns row_selected
        				if(item.config.returned_value === "row_selected" || item.config.returned_value === "cell_selected"){
        					let founded = false;
        					//itterate over grid to retrive selected row 
        					this.myGrid.agGrid.api.forEachNode((node, rowIndex)=>{
        						// if based on __rowValue
        						if(node.data != undefined && JSON.stringify(node.data) ==  JSON.stringify(page.local.techGrid[item.name].data)){
        							//ensure that node is visible
        							this.myGrid.agGrid.api.ensureNodeVisible(node);
        							// if returned value is row (so selectable item is the row)
        							if(item.config.returned_value === "row_selected"){
        								//select the node
        								node.setSelected(true, true, true);
        								// set that we founded element so we won''t remove element from responses
        								founded = true;
        							}
        							// if returned value is cell (so selectable item is the cell)
        							else if(item.config.returned_value === "cell_selected"){
        								//we founded the node, now searching for cell
        								window["grid"]= this.myGrid.agGrid.api;
        								window["page"] = page;
        								for(let i in node.data){
        									// since __rowValue is not visible, and so is not available to select in case of cell_selected settings ignore it
        									if(i != "__rowValue"){
        										let currentCell = node.data[i];
        										//since there are diffrents type of cell we will search according to its formating
        										// in case of simple string cell 
        										if(typeof currentCell == "string"){
        											if(currentCell == this.outModel.value){
        												// founded value
        												/**
        													When data has been reloaded into grid, columns ids thakes a wrong value.
        													we are obliged to empty colDefs and set them again
        													see: https://github.com/ag-grid/ag-grid/issues/2889
        												 */
        												this.myGrid.agGrid.api.setColumnDefs([]);
        												this.myGrid.agGrid.api.setColumnDefs(this.model["colDef"]);
        												// set focused cell
        												this.myGrid.agGrid.api.setFocusedCell(rowIndex, i);
        												// set that we founded element so we won''t remove element from responses
        												founded = true;
        												break;
        											}
        										}
        										// in case of object cell
        										else if(typeof currentCell == "object"){
        											// if value field exists its value is choosen 
        											if(currentCell.value != undefined && currentCell.value == this.outModel.value){
        												// founded value
        												/**
        													When data has been reloaded into grid, columns ids thakes a wrong value.
        													we are obliged to empty colDefs and set them again
        													see: https://github.com/ag-grid/ag-grid/issues/2889
        												 */
        												this.myGrid.agGrid.api.setColumnDefs([]);
        												this.myGrid.agGrid.api.setColumnDefs(this.model["colDef"]);
        												// set focused cell
        												this.myGrid.agGrid.api.setFocusedCell(rowIndex, i);
        												// set that we founded element so we won''t remove element from responses
        												founded = true;
        												break;
        											}
        											// if not, displayValue is choosen
        											else if(currentCell.value == undefined && currentCell.displayValue == this.outModel.value){
        												// founded value
        												/**
        													When data has been reloaded into grid, columns ids thakes a wrong value.
        													we are obliged to empty colDefs and set them again
        													see: https://github.com/ag-grid/ag-grid/issues/2889
        												 */
        												this.myGrid.agGrid.api.setColumnDefs([]);
        												this.myGrid.agGrid.api.setColumnDefs(this.model["colDef"]);
        												// set focused cell
        												this.myGrid.agGrid.api.setFocusedCell(rowIndex, i);
        												// set that we founded element so we won''t remove element from responses
        												founded = true;
        												break;
        											}
        										}
        									}								
        								}
        							}
        							//founded = true;
        							
        						}
        					})
        					if(!founded){
        						this.outModel.value = {};
        					}
        				}							
        			}
        			else{
        				// if grids is showing overlay: do nothing
        			}
        		}
        			
        	}
        	/*End_c8o_CompFunction*/
        '
↓item [ngx.components.UICompVariable-1728753163567]: 
  value: 
↓model [ngx.components.UICompVariable-1728753163570]: 
  autoEmit: true
  comment: this.formsSubmit[item['name']]
  value: '{}'
↓redList [ngx.components.UICompVariable-1728753163573]: 
  comment: this.redList[item['name']]
  value: null
↓disabled [ngx.components.UICompVariable-1728753163576]: 
  comment: this.formsSubmit[item['name']]
  value: false
↓Subscribe_Handler [ngx.components.UIEventSubscriber-1728753163579]: 
  isEnabled: false
  topic: agGridCellClicked
  ↓doCellClicked [ngx.components.UICustomAction-1728753163582]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		let callSources = false;
            		let item = null;
            		if(event.ref != undefined && event.ref != '''' && page.constructor.name === "viewerPage" && page["getPathById"] != undefined){
            			 item = page["getItemById"](+event.ref)
            			if(item != null && item.config.returned_value === "cell_selected"){
            				//keep a reference on a row
            				if(page.pageOwner.local.techGrid == undefined){
            					page.pageOwner.local.techGrid = {};
            				}
            				page.pageOwner.local.techGrid[item.name] = event.event.node;
            				let grossData = event.event.value;
            				let data = "";
            				if(typeof(grossData) !== "string"){
            					data = grossData.value;
            				}
            				else{
            					data = grossData;
            				}
            				eval(page["getPathById"](event.ref) + " = data");
            				callSources = true;
            			}
            			
            		}
            		resolve({canCall: callSources, item: item}); 		
            '
    ↓If [ngx.components.UIDynamicAction-1728753163585]: 
      beanData: '{"ionBean":"IfAction","condition":"script:parent.out.canCall"}'
      ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1728753163588]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.UpdateFunctionsToBeCalledToDataSource
        ↓item [ngx.components.UIControlVariable-1728753163591]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:stack.doCellClicked.out.item
      ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1728753163594]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.executeGoToPageIfCondition
        ↓item [ngx.components.UIControlVariable-1728753163597]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:stack.doCellClicked.out.item
        ↓line [ngx.components.UIControlVariable-1728753163600]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:null
        ↓child [ngx.components.UIControlVariable-1728753163603]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:null
        ↓canExec [ngx.components.UIControlVariable-1728753163606]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:true
↓Subscribe_Handler1 [ngx.components.UIEventSubscriber-1728753163609]: 
  isEnabled: false
  topic: agGridRowClicked
  ↓doAgGridRowClicked [ngx.components.UICustomAction-1728753163612]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		let callSources = false;
            		let item = null;
            		if(event.ref != undefined && event.ref != '''' && page.constructor.name === "viewerPage" && page["getPathById"] != undefined){
            			item = page["getItemById"](+event.ref)
            			if(item != null && item.config.returned_value === "row_selected"){
            				//keep a reference on a row
            				if(page.pageOwner.local.techGrid == undefined){
            					page.pageOwner.local.techGrid = {};
            				}
            				page.pageOwner.local.techGrid[item.name] = event.event.node;
            				// save result
            				let grossData = event.event.data;
            				let data = {};
            				if(grossData.__rowValue != undefined){
            					data =  grossData.__rowValue
            				}
            				else{
            					for(let i in grossData){
            						if(typeof(grossData[i]) !== "string"){
            							data[grossData[i].technicalName] = grossData[i].value;
            						}
            						else{
            							data[i] = grossData[i];
            						}
            					}
            				}
            				
            				eval(page["getPathById"](event.ref) + " = data");
            				callSources = true;
            			}
            		}
            		resolve({canCall: callSources, item: item});
            '
    ↓If [ngx.components.UIDynamicAction-1728753163615]: 
      beanData: '{"ionBean":"IfAction","condition":"script:parent.out.canCall"}'
      ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1728753163618]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.UpdateFunctionsToBeCalledToDataSource
        ↓item [ngx.components.UIControlVariable-1728753163621]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:stack.doAgGridRowClicked.out.item
      ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1728753163624]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.executeGoToPageIfCondition
        ↓item [ngx.components.UIControlVariable-1728753163627]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:stack.doAgGridRowClicked.out.item
        ↓line [ngx.components.UIControlVariable-1728753163630]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:null
        ↓child [ngx.components.UIControlVariable-1728753163633]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:null
        ↓canExec [ngx.components.UIControlVariable-1728753163636]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:true
↓Subscribe_Handler11 [ngx.components.UIEventSubscriber-1728753163639]: 
  isEnabled: false
  topic: agGridRowDataChanged
  ↓doAgGridRowDataChanged [ngx.components.UICustomAction-1728753163642]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		let callSources = false;
            		let item = null;
            		if(event.ref != undefined && event.ref != '''' && page.constructor.name === "viewerPage" && page["getPathById"] != undefined){
            			item = page["getItemById"](+event.ref);
            			if(item != null){
            				if(item.config.returned_value === "all_the_data"){
            					callSources = true;
            				}
            				else{
            					setTimeout(()=>{
            						page[''updateGridValues''](event, item);	
            					}, 0)
            				}
            			}
            		}
            		resolve({canCall: callSources, item: item});
            '
    ↓If [ngx.components.UIDynamicAction-1728753163645]: 
      beanData: '{"ionBean":"IfAction","condition":"script:parent.out.canCall"}'
      ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1728753163648]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.UpdateFunctionsToBeCalledToDataSource
        ↓item [ngx.components.UIControlVariable-1728753163651]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:stack.doAgGridRowDataChanged.out.item
      ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1728753163654]: 
        beanData: '{"ionBean":"InvokeAction"}'
        stack: C8Oforms.MobileApplication.Application.executeGoToPageIfCondition
        ↓item [ngx.components.UIControlVariable-1728753163657]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:stack.doAgGridRowDataChanged.out.item
        ↓line [ngx.components.UIControlVariable-1728753163660]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:null
        ↓child [ngx.components.UIControlVariable-1728753163663]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:null
        ↓canExec [ngx.components.UIControlVariable-1728753163666]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:true
↓Subscribe_Handler111 [ngx.components.UIEventSubscriber-1728753163669]: 
  isEnabled: false
  topic: agGridModelUpdated
  ↓doAgGridModelUpdated [ngx.components.UICustomAction-1728753163672]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		console.log("there");
            		
            		let callSources = false;
            		let item = null;
            		if(event.ref != undefined && event.ref != '''' && page.constructor.name === "viewerPage" && page["getPathById"] != undefined){
            			item = page["getItemById"](+event.ref);
            			if(item != null){
            				setTimeout(()=>{
            					page[''updateGridValues''](event, item);	
            				}, 0)
            			}
            		}
            		resolve({canCall: callSources, item: item});
            '
↓outModel [ngx.components.UICompVariable-1728753163675]: 
  autoEmit: true
  value: null
↓Tag [ngx.components.UIElement-1728753163678]: 
  tagName: fieldset
  ↓Tag1 [ngx.components.UIElement-1728753163681]: 
    tagName: legend
    ↓Text [ngx.components.UIText-1728753163684]: 
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.pageOwner.removeHTML(this.item.config.html)
  ↓Div [ngx.components.UIDynamicElement-1728753163687]: 
    beanData: '{"ionBean":"DivTag"}'
    identifier: divtext
    tagName: div
    ↓Attr [ngx.components.UIAttribute-1728753163690]: 
      attrName: '[ngClass]'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: 'script:this.redList != undefined ?  this.redList[this.item.name] == true ? (this.item.config.mandatory && this.item.config.disabled == true) ? [''requiredgregoryvpadding'', ''styledivred''] : ''styledivred'': (this.item.config.mandatory && this.item.config.disabled == true) ? [''requiredgregoryv''] : []: (this.item.config.mandatory && this.item.config.disabled == true) ? [''requiredgregoryv''] : []'
      comment: 'this.redList != undefined ?  this.redList[this.item.name] == true ? (this.item.config.mandatory && this.item.config.disabled == true) ? [''requiredgregoryvpadding'', ''styledivred''] : ''styledivred'': (this.item.config.mandatory && this.item.config.disabled == true) ? [''requiredgregoryv'', ''styledivnormal''] : ''styledivnormal'': (this.item.config.mandatory && this.item.config.disabled == true) ? [''requiredgregoryv'', ''styledivnormal''] : ''styledivnormal'''
    ↓Attr1 [ngx.components.UIAttribute-1728753163693]: 
      attrName: '[attr.id]'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.item.name
    ↓Style [ngx.components.UIStyle-1728753163696]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              position:relative;
              
    ↓Directive [ngx.components.UIControlDirective-1728753163699]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.disabled else ElseBlock_1627489489614
      ↓UseSharedComponent [ngx.components.UIUseShared-1728753163702]: 
        sharedcomponent: C8Oforms.MobileApplication.Application.sharedLabelElem
        ↓item [ngx.components.UIUseVariable-1728753163705]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.item
        ↓setStyle [ngx.components.UIUseVariable-1728753163708]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:true
    ↓Tag [ngx.components.UIElement-1728753163711]: 
      identifier: ElseBlock_1627489489614
      tagName: ng-template
      ↓Div [ngx.components.UIDynamicElement-1728753163714]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Attr2 [ngx.components.UIAttribute-1728753163717]: 
          attrName: '[ngClass]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:['styledivnormal']
        ↓UseSharedComponent [ngx.components.UIUseShared-1728753163720]: 
          sharedcomponent: C8Oforms.MobileApplication.Application.sharedLabelElem
          ↓item [ngx.components.UIUseVariable-1728753163723]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.item
          ↓setStyle [ngx.components.UIUseVariable-1728753163726]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:true
    ↓UseSharedComponent1 [ngx.components.UIUseShared-1728753163729]: 
      identifier: myGrid
      sharedcomponent: lib_ExtendedComponents_ui_ngx.MobileApplication.Application.agGrid
      ↓pagination [ngx.components.UIUseVariable-1728753163732]: 
        comment: 'boolean: true (default) or false'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:!this.global?.mobilePlat
      ↓rowSelection [ngx.components.UIUseVariable-1728753163735]: 
        comment: 'string: ''single'' (default) or ''multiple'''
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'multiple'
      ↓rowDeselection [ngx.components.UIUseVariable-1728753163738]: 
        comment: 'boolean: true (default) or false'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:true
      ↓defaultColDef [ngx.components.UIUseVariable-1728753163741]: 
        comment: 'default is {hide: false, editable: true, sortable: true, resizable: true, filter: true, checkboxSelection: false, singleClickEdit: false}'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: 'script:{autoHeight: true, hide: false, editable: true, sortable: true, resizable: true, filter: true, checkboxSelection: false, singleClickEdit: false}'
      ↓columnDefs [ngx.components.UIUseVariable-1728753163744]: 
        comment: 'Array of columnDef {headerName: ''headerName'', field: ''fieldName''} objects'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: 'script:this.model?.colDef != undefined ? this.model.colDef : this.disabled == true ? [{ field: ''make'' },{ field: ''model'' },{ field: ''price'' }]:[]'
      ↓rowData [ngx.components.UIUseVariable-1728753163747]: 
        comment: 'Array of row { fieldName1: ''value1'', fieldName2: ''value2'', fieldName3: true, ...} objects'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: 'script:this.model?.data != undefined ? this.model.data : this.disabled == true ? [{ make: ''Manufacturer 1'', model: ''Model A'', price: 35000 },{ make: ''Manufacturer 2'', model: ''Model B'', price: 32000 },{ make: ''Manufacturer 3'', model: ''Model C'', price: 72000 }] : []'
      ↓width [ngx.components.UIUseVariable-1728753163750]: 
        comment: width value in % or px
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'100%'
      ↓height [ngx.components.UIUseVariable-1728753163753]: 
        comment: height is 'auto' or value in % or px
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'auto'
      ↓class [ngx.components.UIUseVariable-1728753163756]: 
        comment: |
          'One of the themes provided here :
          
          https://www.ag-grid.com/javascript-grid-themes-provided/
          
          Also be shure to add the theme in the Theme object as :
          
          @import "../../node_modules/ag-grid-community/dist/styles/ag-theme-balham-dark/sass/ag-theme-balham-dark.scss";
          
          
          
          '
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'ag-theme-material'
      ↓id [ngx.components.UIUseVariable-1728753163759]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.item.id
      ↓suppressCellSelection [ngx.components.UIUseVariable-1728753163762]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.item.config.accessibility == false && this.item.config.returned_value != 'cell_selected'
      ↓suppressRowClickSelection [ngx.components.UIUseVariable-1728753163765]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.item.config.accessibility == false && this.item.config.returned_value != 'row_selected'
      ↓ref [ngx.components.UIUseVariable-1728753163768]: 
        isEnabled: false
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.item.id
      ↓overlayLoadingTemplate [ngx.components.UIUseVariable-1728753163771]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.global.overlayNoRowsTemplate
      ↓overlayNoRowsTemplate [ngx.components.UIUseVariable-1728753163774]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.global.overlayNoRowsTemplate2
      ↓localeTextFunc [ngx.components.UIUseVariable-1728753163777]: 
        isEnabled: false
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: 'script:this.pageOwner.local.agGridLocaleTextFunc != null ?this.pageOwner.local.agGridLocaleTextFunc: null'
      ↓wrapperClass [ngx.components.UIUseVariable-1728753163780]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'blue-theme'
      ↓Event [ngx.components.UIControlEvent-1728753163783]: 
        attrName: (CellClicked)
        comment: Fired when a cell is clicked. Data will be the agGrid event
        eventName: CellClicked
        ↓doCellClicked [ngx.components.UICustomAction-1728753163786]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '		let callSources = false;
                  		if(page.pageOwner.constructor.name === "viewerPage" && page.pageOwner.getPathById != undefined){
                  			if(page.item != null && page.item.config.returned_value === "cell_selected"){
                  				//keep a reference on a row
                  				if(page.pageOwner.local.techGrid == undefined){
                  					page.pageOwner.local.techGrid = {};
                  				}
                  				page.pageOwner.local.techGrid[page.item.name] = event.node;
                  				let grossData = event.value;
                  				let data = "";
                  				if(typeof(grossData) !== "string"){
                  					data = grossData.value;
                  				}
                  				else{
                  					data = grossData;
                  				}
                  				page.outModel.value = data;
                  				//eval(page["getPathById"](event.ref) + " = data");
                  				callSources = true;
                  			}
                  			
                  		}
                  		resolve({canCall: callSources}); 		
                  '
          isEnabled: false
          ↓If [ngx.components.UIDynamicAction-1728753163789]: 
            beanData: '{"ionBean":"IfAction","condition":"script:parent.out.canCall"}'
            ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1728753163792]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.UpdateFunctionsToBeCalledToDataSource
              ↓item [ngx.components.UIControlVariable-1728753163795]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
            ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1728753163798]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.executeGoToPageIfCondition
              ↓item [ngx.components.UIControlVariable-1728753163801]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
              ↓line [ngx.components.UIControlVariable-1728753163804]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓child [ngx.components.UIControlVariable-1728753163807]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓canExec [ngx.components.UIControlVariable-1728753163810]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
      ↓Event1 [ngx.components.UIControlEvent-1728753163813]: 
        attrName: (RowClicked)
        comment: Fired when a row is clicked. Data will be the agGrid event
        eventName: RowClicked
      ↓Event2 [ngx.components.UIControlEvent-1728753163816]: 
        attrName: (RowSelected)
        comment: Fired when a row is selected. Data will be the agGrid event
        eventName: RowSelected
        ↓doAgGridRowClicked [ngx.components.UICustomAction-1728753163819]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '		let callSources = false;
                  		if(page.pageOwner.constructor.name === "viewerPage" && page.pageOwner.getPathById != undefined){
                  			if(page.item.config.returned_value === "row_selected"){
                  				//keep a reference on a row
                  				if(page.pageOwner.local.techGrid == undefined){
                  					page.pageOwner.local.techGrid = {};
                  				}
                  				page.pageOwner.local.techGrid[page.item.name] = event.node;
                  				// save result
                  				let grossData = event.data;
                  				let data = {};
                  				if(grossData.__rowValue != undefined){
                  					data =  grossData.__rowValue
                  				}
                  				else{
                  					for(let i in grossData){
                  						if(typeof(grossData[i]) !== "string"){
                  							data[grossData[i].technicalName] = grossData[i].value;
                  						}
                  						else{
                  							data[i] = grossData[i];
                  						}
                  					}
                  				}
                  				page.outModel.value = data;
                  				//eval(page.pageOwner["getPathById"](page.item.id, true) + " = data");
                  				callSources = true;
                  			}
                  		}
                  		resolve({canCall: callSources});
                  '
          isEnabled: false
          ↓If [ngx.components.UIDynamicAction-1728753163822]: 
            beanData: '{"ionBean":"IfAction","condition":"script:parent.out.canCall"}'
            ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1728753163825]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.UpdateFunctionsToBeCalledToDataSource
              ↓item [ngx.components.UIControlVariable-1728753163828]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
            ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1728753163831]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.executeGoToPageIfCondition
              ↓item [ngx.components.UIControlVariable-1728753163834]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
              ↓line [ngx.components.UIControlVariable-1728753163837]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓child [ngx.components.UIControlVariable-1728753163840]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓canExec [ngx.components.UIControlVariable-1728753163843]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
      ↓Event3 [ngx.components.UIControlEvent-1728753163846]: 
        attrName: (SortChanged)
        comment: Fired when a a column is sorted. Data will be the agGrid event
        eventName: SortChanged
      ↓Event4 [ngx.components.UIControlEvent-1728753163849]: 
        attrName: (RowDataChanged)
        comment: Fired when Row data changed. Data will be the agGrid event
        eventName: RowDataChanged
        ↓doAgGridRowDataChanged [ngx.components.UICustomAction-1728753163852]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '		let callSources = false;
                  		if(page.pageOwner.constructor.name === "viewerPage" && page.pageOwner.getPathById != undefined){
                  			if(page.item != null){
                  				if(page.item.config.returned_value === "all_the_data"){
                  					callSources = true;
                  				}
                  				else{
                  					setTimeout(()=>{
                  						page.updateGridValues();	
                  					}, 0)
                  				}
                  			}
                  		}
                  		resolve({canCall: callSources});
                  '
          ↓If [ngx.components.UIDynamicAction-1728753163855]: 
            beanData: '{"ionBean":"IfAction","condition":"script:parent.out.canCall"}'
            ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1728753163858]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.UpdateFunctionsToBeCalledToDataSource
              ↓item [ngx.components.UIControlVariable-1728753163861]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
            ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1728753163864]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.executeGoToPageIfCondition
              ↓item [ngx.components.UIControlVariable-1728753163867]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
              ↓line [ngx.components.UIControlVariable-1728753163870]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓child [ngx.components.UIControlVariable-1728753163873]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓canExec [ngx.components.UIControlVariable-1728753163876]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
      ↓Event5 [ngx.components.UIControlEvent-1728753163879]: 
        attrName: (CellValueChanged)
        comment: Fired when A Cell is edited changed. Data will be the agGrid event
        eventName: CellValueChanged
      ↓Event6 [ngx.components.UIControlEvent-1728753163882]: 
        attrName: (RowDoubleClicked)
        comment: Fired when A Cell is edited changed. Data will be the agGrid event
        eventName: RowDoubleClicked
      ↓Event7 [ngx.components.UIControlEvent-1728753163885]: 
        attrName: (SelectionChanged)
        comment: Fired when selectionChange. Data will be the agGrid event
        eventName: SelectionChanged
        ↓doAgGridSelectionChanged [ngx.components.UICustomAsyncAction-1728753163888]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '		let callSources = false;
                  		try {
                  			if(page.pageOwner.constructor.name === "viewerPage" && page.pageOwner.getPathById != undefined){
                  				if(page.item.config.returned_value === "row_selected" || page.item.config.returned_value === "cell_selected"){
                  					//keep a reference on a row
                  					if(page.pageOwner.local.techGrid == undefined){
                  						page.pageOwner.local.techGrid = {};
                  					}
                  					page.pageOwner.local.techGrid[page.item.name] = event.api.getSelectedNodes()[0];
                  					// save result
                  					let grossData = event.api.getSelectedNodes()[0].data;
                  					let data;
                  					if(page.item.config.returned_value === "row_selected"){
                  						data = {};
                  						if(grossData.__rowValue != undefined){
                  							data =  grossData.__rowValue
                  						}
                  						else{
                  							for(let i in grossData){
                  								if(typeof(grossData[i]) !== "string"){
                  									data[grossData[i].technicalName] = grossData[i].value;
                  								}
                  								else{
                  									data[i] = grossData[i];
                  								}
                  							}
                  						}
                  					}
                  					else if(page.pageOwner.getPathById != undefined){
                  						data = "";
                  						if(typeof(grossData) !== "string"){
                  							data = grossData.value;
                  						}
                  						else{
                  							data = grossData;
                  						}
                  					}
                  					page.outModel.value = data;
                  					//eval(page.pageOwner["getPathById"](page.item.id, true) + " = data");
                  					callSources = true;
                  				}
                  			}
                  		} catch (e) {
                  		
                  		} finally {
                  			return {canCall: callSources};
                  		}
                  '
          ↓If [ngx.components.UIDynamicAction-1728753163891]: 
            beanData: '{"ionBean":"IfAction","condition":"script:parent.out.canCall"}'
            ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1728753163894]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.UpdateFunctionsToBeCalledToDataSource
              ↓item [ngx.components.UIControlVariable-1728753163897]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
            ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1728753163900]: 
              beanData: '{"ionBean":"InvokeAction"}'
              stack: C8Oforms.MobileApplication.Application.executeGoToPageIfCondition
              ↓item [ngx.components.UIControlVariable-1728753163903]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.item
              ↓line [ngx.components.UIControlVariable-1728753163906]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓child [ngx.components.UIControlVariable-1728753163909]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓canExec [ngx.components.UIControlVariable-1728753163912]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
      ↓autoSizeColumns [ngx.components.UIUseVariable-1728753163915]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.item.config.AutoSizeColumns == true
      ↓Event8 [ngx.components.UIControlEvent-1728753163918]: 
        attrName: (GridReady)
        comment: Fired when the Grid is ready. Data will be the agGrid event
        eventName: GridReady
      ↓Event9 [ngx.components.UIControlEvent-1728753163921]: 
        attrName: (GetRows)
        comment: Fire when the RowModelType is 'infinite'. Excepts fromatted data into a agGridUpdateRows action
        eventName: GetRows
      ↓accessibility [ngx.components.UIUseVariable-1728753163924]: 
        comment: 'boolean: true (default) or false'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:true
      ↓ariaLabel [ngx.components.UIUseVariable-1728753163927]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.pageOwner.removeHTML(this.item.config.html)
      ↓paginationPageSize [ngx.components.UIUseVariable-1728753163930]: 
        comment: 'integer: 10 by default'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:10
      ↓paginationPageSizeSelector [ngx.components.UIUseVariable-1728753163933]: 
        comment: 'array | boolean: [20,50,100] by default'
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:[10, 20, 50, 100]
      ↓rowHeight [ngx.components.UIUseVariable-1728753163936]: 
        comment: Height of the row in pixels as a string
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'25'
      ↓rowModelType [ngx.components.UIUseVariable-1728753163939]: 
        comment: Row model type
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'clientSide'
      ↓maxBlocksInCache [ngx.components.UIUseVariable-1728753163942]: 
        comment: How many blocks to keep in the store. Default is no limit, so every requested block is kept
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:''
      ↓showCsvDownload [ngx.components.UIUseVariable-1728753163945]: 
        comment: |
          If set to true will display a side bar menu where user can click a download button to download the grid content as a CSV file.
          
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:false
    ↓Attr3 [ngx.components.UIAttribute-1728753163948]: 
      attrName: '*ngIf'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:this.global.relaodAgGrid == undefined