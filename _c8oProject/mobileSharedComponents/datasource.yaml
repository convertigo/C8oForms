scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	public imgloaded = null;
        	public current;
        	public currentName;
        	public currentMetas;
        	public Object = window.Object;
        	public currentTree;
        	public currentTreeSource = null;
        	
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	public getCurrents(){
        		this.currentName = this.pageOwner.getEnabled(this.item[this.path]);
        		this.current = this.item[this.path][this.currentName];
        			
        	}
        	public async getCurentMetas(){
        		let c = this.isSource ? this.pageOwner.local.treeSource : this.pageOwner.local.tree;
        		if(c != undefined){
        			let split = this.currentName.split(".");
        			let projectName = split[0];
        			let sequenceName = split[1];
        			let meta = null;
        			for(let p of c){
        				if(p.name == projectName){
        					for(let s of p.sequences){
        						if(s.name == sequenceName){
        							if(s.variables != undefined && s.variables.name != undefined){
        								s.variables.name.forEach((entry, index)=>{
        									// if this component has builtin support form forms_filter remove it from ui
        									if(entry == "forms_filter" && this.pageOwner.getMetaFromPalette(this.item.type).hasFilter == true){
        										s.variables.type.splice(index, 1);
        										s.variables.name.splice(index, 1);
        										s.variables.comment.splice(index, 1);
        									}
        								})
        							}
        							meta = s;
        							meta.url = this.c8o.endpointConvertigo + ''/projects/'' + p.name + ''/logos/'' +  s.name + ''.svg'';
        						}
        						
        					}
        				}
        			}
        			
        		this.currentMetas = meta;
        		this.ref.detectChanges();
        		}
        		
        	}
        	public getCurrentVarTypeFromMetas(){
        		let raw_type = this.currentMetas.variables.type[this.pageOwner.local.index];
        		if(raw_type.indexOf("configure=") == 0){
        			return "configure";
        		}
                else{
        			return raw_type;
        		}
        	}
        	/*End_c8o_CompFunction*/
        '
↓GridTitle [ngx.components.UIDynamicElement-1608568353300]: 
  beanData: '{"ionBean":"Grid"}'
  tagName: ion-grid
  ↓GridRowTitle [ngx.components.UIDynamicElement-1608568353303]: 
    beanData: '{"ionBean":"GridRow"}'
    tagName: ion-row
    ↓GridCoTitle [ngx.components.UIDynamicElement-1608568353306]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
      ↓GenericItemTitle [ngx.components.UIDynamicElement-1608568353309]: 
        beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
        tagName: ion-item
        ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139116]: 
          beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-uppercase"}'
          comment: FormatLayout
          tagName: div
        ↓Text [ngx.components.UIText-1608568353315]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: 'script:(this.isSource ? ''choice_source'' : ''choice_action'') | translate'
        ↓Style [ngx.components.UIStyle-1608568353318]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '  color: var(--ion-color-btLight);
                    font-size: 14px;
                    font-weight: 600;
                    font-style: normal;
                    font-stretch: normal;
                    line-height: normal;
                    letter-spacing: normal;
                    .label{
                  		margin-top: 0px !important;	
                  		margin-bottom: 0px !important;	
                  	}
                  '
  ↓GridRowSelectASourceOrAction [ngx.components.UIDynamicElement-1608568353324]: 
    beanData: '{"ionBean":"GridRow"}'
    tagName: ion-row
    ↓GridColSelectASourceOrAction [ngx.components.UIDynamicElement-1608568353327]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
      ↓Directive [ngx.components.UIControlDirective-1608568353330]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.current == undefined else ElseBlock_1599832112358
        ↓Button [ngx.components.UIDynamicElement-1608568353333]: 
          beanData: '{"ionBean":"Button","IonFill":"plain:clear"}'
          tagName: ion-button
          ↓Icon [ngx.components.UIDynamicElement-1608568353336]: 
            beanData: '{"ionBean":"Icon","IconName":"plain:hammer"}'
            tagName: ion-icon
            ↓Attr [ngx.components.UIAttribute-1608568353339]: 
              attrName: '[title]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.translate.instant('choose_an_action')
          ↓Paragraph [ngx.components.UIDynamicElement-1608568353342]: 
            beanData: '{"ionBean":"Paragraph"}'
            tagName: p
            ↓Text [ngx.components.UIText-1608568353345]: 
              i18n: true
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:(this.isSource ? ''no_source_selected'' : ''no_actions_selected'') | translate'
            ↓Style [ngx.components.UIStyle-1608568353348]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'margin-left: 16px;
                      '
          ↓Event [ngx.components.UIControlEvent-1608568353351]: 
            ↓ModalPage [ngx.components.UIDynamicAction-1608568353354]: 
              beanData: |
                '{
                 "ionBean": "ModalAction",
                 "page": "plain:C8Oforms.MobileApplication.Application.modalActions",
                 "data": "script:{tree: ( this.isSource ? this.pageOwner.local.treeSource : this.pageOwner.local.tree), item: this.item, ''source'': this.isSource}",
                 "blockWhileDisplayed": "plain:true",
                 "cssClass": "plain:modalCSV"
                }'
              ↓CustomAction [ngx.components.UICustomAction-1608568353357]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		
                        		let elems = props.parent.out.data.elems;
                        		let path = page.path;
                        		var attach_to_delete = [];
                        		if(elems != undefined){
                        	        try{
                        	            for(let elem in page.item[path]){
                        					let current = page.item[path][elem];
                        					for(let i in current["vars"]){
                        						let variables =  current["vars"][i];
                        						if(variables["from_attachment"] != undefined && variables["from_attachment"] == true){
                        							attach_to_delete.push({"docid": page["form"]["_id"], "name": variables["attchament_name"]});//, "rev": page["form"]["_rev"]});
                        						}
                        					}
                        	                delete page.item[path][elem];//.enabled = false;
                        	            }
                        	        }
                        	        catch(e){
                        	            
                        	        }
                        	        page.item[path] == undefined ? page.item[path] = {}: null;
                        	        if(page.item[path][elems.name] != undefined && page.item[path][props.parent.out.elems] != undefined){
                        	            for(let i in  page.item[path][props.parent.out.elems].vars){
                        	                if(elems["vars"][i] != undefined){
                        	                    elems["vars"][i] =  page.item[path][elems.name].vars[i];
                        	                }
                        	            }
                        	        } 
                        	        if(page.item[path][elems.name] == undefined){
                        	            page.item[path][elems.name] = {};
                        	        }
                        	        
                        			for(let i in elems["vars"]){
                        				if(elems["vars"][i]["str"] == undefined){
                        					elems["vars"][i]["str"] = "";
                        				}
                        			}
                        	        page.item[path][""+elems.name].vars = elems["vars"];
                        			page.item[path][""+elems.name].enabled = true;
                        			page.item[path][""+elems.name].fullsync = elems["fullsync"];
                        			if(elems["fullsync"]){
                        				page.item[path][""+elems.name].projectName = elems["projectName"];
                        				page.item[path][""+elems.name].connectorName = elems["connectorName"];
                        				page.item[path][""+elems.name].viewName = elems["viewName"];
                        			}
                        		}
                        		elems = undefined;
                        		page.getCurrents();
                        		page.getCurentMetas();
                        		// doing this to remove old variables attachment if not a conflict is generated
                        		page.pageOwner.updateState().then((res)=>{
                        			resolve();
                        			if(attach_to_delete.length > 0){
                        				for(let elem of attach_to_delete){
                        					try{
                        						page.c8o.callJsonObject("fs://c8oforms_fs.delete_attachment", elem)
                        						.then((res)=>{
                        							console.log("succesfully deleted :"+ elem["attchament_name"]);
                        							return null;
                        						})
                        					}
                        					catch(e){
                        						console.error("an error not catched occured while deleting :"+ elem["attchament_name"], e);
                        					}
                        				}
                        			}
                        		})
                        		
                        		
                        		
                        			
                        		
                        		
                        		
                        		
                        '
          ↓Style [ngx.components.UIStyle-1646242512455]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the button
                    //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the button when pressed
                    //--background-focused	//Background of the button when focused with the tab key
                    //--background-focused-opacity	//Opacity of the button when focused with the tab key
                    //--background-hover	//Background of the button on hover
                    //--background-hover-opacity	//Opacity of the background on hover
                    //--border-color	//Border color of the button
                    //--border-radius	//Border radius of the button
                    //--border-style	//Border style of the button
                    //--border-width	//Border width of the button
                    //--box-shadow	//Box shadow of the button
                    //--color	//Text color of the button
                    //--color-activated	//Text color of the button when pressed
                    //--color-focused	//Text color of the button when focused with the tab key
                    //--color-hover	//Text color of the button when hover
                    //--opacity	//Opacity of the button
                    //--padding-bottom	//Bottom padding of the button
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                    //--padding-top	//Top padding of the button
                    //--ripple-color	//Color of the button ripple effect
                    //--transition	//Transition of the button
                    ion-icon{
                    	color:var(--ion-color-convertigo);
                    }
                    '
      ↓Tag [ngx.components.UIElement-1608568353363]: 
        identifier: ElseBlock_1599832112358
        tagName: ng-template
        ↓Div [ngx.components.UIDynamicElement-1678875359611]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Style [ngx.components.UIStyle-1678875359614]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	display: flex;
                    	padding-left:16px;
                    	cursor:pointer; 
                    '
          ↓divImg [ngx.components.UIDynamicElement-1678875359617]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Div [ngx.components.UIDynamicElement-1678875359620]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓Style [ngx.components.UIStyle-1678875359623]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '	 	height: 100% !important;
                             	  border-radius: 4px;
                          	border-top: solid 1px #f6f6f6;
                          	border-bottom: solid 1px #f6f6f6;
                          	border-left: solid 1px #f6f6f6;
                          	position:relative;
                        '
              ↓Directive [ngx.components.UIControlDirective-1678875359626]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.currentMetas != null && this.imgloaded == nul else ElseBlock_1667562769442
                ↓Image [ngx.components.UIDynamicElement-1678875359629]: 
                  beanData: '{"ionBean":"Image","url":"script:this.currentMetas.url"}'
                  selfClose: true
                  tagName: img
                  ↓Style [ngx.components.UIStyle-1678875359632]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '    width:4rem;
                                height: 4rem;
                            
                                position: relative;
                                top: 50%; 
                                transform: translateY(-50%);
                                -webkit-transform: translateY(-50%);
                                text-align: center;
                                display: block;
                                margin: 0 auto;
                            }
                            
                            .class1567168007196:hover {
                            cursor: pointer;
                            '
                  ↓Event1 [ngx.components.UIControlEvent-1678875359635]: 
                    attrName: (error)
                    eventName: (error)
                    ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1678875359638]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              		try {
                              			page.imgloaded = false;
                              			page.ref.detectChanges();
                              			page.pageOwner.ref.detectChanges();
                              		} catch (e) {
                              		
                              		} finally {
                              			return;
                              		}
                              
              ↓Tag [ngx.components.UIElement-1678875359641]: 
                identifier: ElseBlock_1667562769442
                tagName: ng-template
                ↓Icon [ngx.components.UIDynamicElement-1678875359644]: 
                  beanData: '{"ionBean":"Icon","IconName":"source:{\"filter\":\"Icon\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"''settings-outline''\",\"useCustom\":true}}"}'
                  tagName: ion-icon
                  ↓Style [ngx.components.UIStyle-1678875359647]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '    width:4rem;
                                height: 4rem;
                                -webkit-border-radius: 50%;
                                border-radius: 50%;
                                position: relative;
                                top: 50%; 
                                transform: translateY(-50%);
                                -webkit-transform: translateY(-50%);
                                text-align: center;
                                display: block;
                                margin: 0 auto;
                                color: var(--ion-color-primary);
                                &:hover{
                            		cursor: pointer;
                            	}
                            	ion-icon {
                            	  color: var(--ion-color-primary);
                            	}
                            '
          ↓DivText [ngx.components.UIDynamicElement-1678875359650]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓GenericItem [ngx.components.UIDynamicElement-1678875359653]: 
              beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
              tagName: ion-item
              ↓Style [ngx.components.UIStyle-1678875359656]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '	.label{
                        		margin-top: 0px !important;	
                        		margin-bottom: 0px !important;	
                        	}
                        	cursor:pointer;
                        '
              ↓Label [ngx.components.UIDynamicElement-1678875359659]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓H2 [ngx.components.UIDynamicElement-1678875359662]: 
                  beanData: '{"ionBean":"Heading2"}'
                  tagName: h2
                  ↓Attr [ngx.components.UIAttribute-1678875359665]: 
                    attrName: '[innerHTML]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.pageOwner.getHtmlName(this.currentMetas?.comment, this.currentMetas?.name)
                ↓Paragraph [ngx.components.UIDynamicElement-1678875359668]: 
                  beanData: '{"ionBean":"Paragraph"}'
                  tagName: p
                  ↓Attr [ngx.components.UIAttribute-1678875359671]: 
                    attrName: '[innerHTML]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.pageOwner.getHtmlComment(this.currentMetas?.comment)
                  ↓Style [ngx.components.UIStyle-1678875359674]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '	color : grey;
                            '
            ↓attr [ngx.components.UIAttribute-1685960938312]: 
              attrName: '*ngIf'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:this.currentMetas != undefined
          ↓Event [ngx.components.UIControlEvent-1678875359677]: 
            ↓ModalPage2 [ngx.components.UIDynamicAction-1678875359680]: 
              beanData: |
                '{
                 "ionBean": "ModalAction",
                 "page": "plain:C8Oforms.MobileApplication.Application.modalActions",
                 "data": "script:{tree: ( this.isSource ? this.pageOwner.local.treeSource : this.pageOwner.local.tree), item: this.item, ''source'': this.isSource}",
                 "blockWhileDisplayed": "plain:true",
                 "cssClass": "plain:alwaysFullScreen"
                }'
              ↓CustomAction [ngx.components.UICustomAction-1678875359683]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		let elems = props.parent.out.data.elems;
                        		let path = page.path;
                        		var attach_to_delete = [];
                        		if(elems != undefined){
                        	        try{
                        	            for(let elem in page.item[path]){
                        					let current = page.item[path][elem];
                        					for(let i in current["vars"]){
                        						let variables =  current["vars"][i];
                        						if(variables["from_attachment"] != undefined && variables["from_attachment"] == true){
                        							attach_to_delete.push({"docid": page["form"]["_id"], "name": variables["attchament_name"]});
                        						}
                        					}
                        	                delete page.item[path][elem];//.enabled = false;
                        	            }
                        	        }
                        	        catch(e){
                        	            
                        	        }
                        	        page.item[path] == undefined ? page.item[path] = {}: null;
                        	        if(page.item[path][elems.name] != undefined && page.item[path][props.parent.out.elems] != undefined){
                        	            for(let i in  page.item[path][props.parent.out.elems].vars){
                        	                if(elems["vars"][i] != undefined){
                        	                    elems["vars"][i] =  page.item[path][elems.name].vars[i];
                        	                }
                        	            }
                        	        } 
                        	        if(page.item[path][elems.name] == undefined){
                        	            page.item[path][elems.name] = {};
                        	        }
                        			for(let i in elems["vars"]){
                        				if(elems["vars"][i]["str"] == undefined){
                        					elems["vars"][i]["str"] = "";
                        				}
                        			}
                        	        
                        	        page.item[path][""+elems.name].vars = elems["vars"];
                        			page.item[path][""+elems.name].enabled = true;
                        			page.item[path][""+elems.name].fullsync = elems["fullsync"];
                        			if(elems["fullsync"]){
                        				page.item[path][""+elems.name].projectName = elems["projectName"];
                        				page.item[path][""+elems.name].connectorName = elems["connectorName"];
                        				page.item[path][""+elems.name].viewName = elems["viewName"];
                        			}
                        		}
                        		elems = undefined;
                        		page.getCurrents();
                        		page.getCurentMetas();
                        		// doing this to remove old variables attachment if not a conflict is generated
                        		// doing this to remove old variables attachment if not a conflict is generated
                        		page.pageOwner.updateState().then((res)=>{
                        			resolve();
                        			if(attach_to_delete.length > 0){
                        				for(let elem of attach_to_delete){
                        					try{
                        						page.c8o.callJsonObject("fs://c8oforms_fs.delete_attachment", elem)
                        						.then((res)=>{
                        							console.log("succesfully deleted :"+ elem["attchament_name"]);
                        							return null;
                        						})
                        					}
                        					catch(e){
                        						console.error("an error not catched occured while deleting :"+ elem["attchament_name"], e);
                        					}
                        				}
                        			}
                        		})
                        '
  ↓GridRowFillVariables [ngx.components.UIDynamicElement-1608568353552]: 
    beanData: '{"ionBean":"GridRow"}'
    tagName: ion-row
    ↓GridColFillVariables [ngx.components.UIDynamicElement-1608568353555]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
      ↓GenericItemOption [ngx.components.UIDynamicElement-1608568353558]: 
        beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
        tagName: ion-item
        ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139121]: 
          beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-uppercase"}'
          comment: FormatLayout
          tagName: div
        ↓Text [ngx.components.UIText-1608568353564]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:('option' | translate)
        ↓Style [ngx.components.UIStyle-1608568353567]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '	color: var(--ion-color-btLight);
                    	font-size: 14px;
                    	font-weight: 600;
                    	font-style: normal;
                    	font-stretch: normal;
                    	line-height: normal;
                    	letter-spacing: normal;
                    	.label{
                  		margin-top: 0px !important;	
                  		margin-bottom: 0px !important;	
                  	}
                  '
      ↓DivScrollContainerTabVariables [ngx.components.UIDynamicElement-1608568353573]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Style [ngx.components.UIStyle-1608568353576]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  	width:100%;
                  
        ↓DivContainerTab [ngx.components.UIDynamicElement-1608568353579]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Style [ngx.components.UIStyle-1608568353582]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    ' 	display: inline-flex;
                      	flex-wrap: wrap;
                        background-color: #fafbfc!important;
                        width:100%;
                        padding-left:15px;
                        box-sizing:border-box;
                      	width:100% !important;
                      	padding-top: 1vh !important;
                      	.tab{
                    		min-width:70px;
                    		padding: 7px 12px 8px!important;
                    		margin: 0;
                    		border: 1px solid transparent;
                    		border-top: 3px solid transparent;
                    		border-bottom: 1px solid #e1e4e8;
                    		border-radius: 3px 3px 0 0;
                    		white-space: nowrap;
                    		color: #586069;
                    		display: flex;
                    	  	align-items: center;
                    	  	justify-content: center;
                    		float: left;
                    	  	cursor:pointer;
                    	  	&:hover{
                    			background-color: #f0f0f0 !important;
                    		}
                    		ion-icon{
                    			color: #586069;
                    		}
                    	}
                      	.tabSelected{
                    	    color: #24292e !important;
                    	    background-color: #fff;
                    		box-sizing: border-box;
                    	    border-color: var(--ion-color-btLight) #e1e4e8 transparent;
                    	    z-index:100;
                    	    border-bottom:0px !important;
                    	  	ion-icon{
                    			color: var(--ion-color-primary) !important;
                    		}
                    	  }
                    '
          ↓Directive1 [ngx.components.UIControlDirective-1678889867595]: 
            directiveIndexName: z
            directiveItemName: baby
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:currentMetas.variables.name
            ↓tag [ngx.components.UIControlDirective-1678893995579]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:!(this.isSource && baby == 'forms_filter' && this.pageOwner.getMetaFromPalette(this.item.type).hasFilter == true)
              ↓DivItem [ngx.components.UIDynamicElement-1678889867601]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Style [ngx.components.UIStyle-1678889867604]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	min-width:70px;
                            	padding: 7px 12px 8px!important;
                              margin: 0;
                              color: #24292e;
                              background-color: #fff;
                              border: 1px solid transparent;
                              border-top: 3px solid transparent;
                              border-radius: 3px 3px 0 0;
                          	box-sizing: border-box;
                              border-color: var(--ion-color-btLight) #e1e4e8 transparent;
                              z-index:100;
                              border-bottom:0px !important;
                            	display: flex;
                            	align-items: center;
                            	justify-content: center;
                            	ion-icon{
                          		color: var(--ion-color-primary);
                          	}
                          }
                          .class1608568353831:hover{
                          	cursor:pointer;
                          '
                ↓Icon1 [ngx.components.UIDynamicElement-1678889867607]: 
                  beanData: '{"ionBean":"Icon","IconName":"plain:arrow-forward-outline"}'
                  tagName: ion-icon
                  ↓Style [ngx.components.UIStyle-1678889867610]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '  display: block;
                              margin-left: 0;
                              margin-right: 5px;
                            '
                ↓Span [ngx.components.UIDynamicElement-1678889867616]: 
                  beanData: '{"ionBean":"SpanTag"}'
                  tagName: span
                  ↓Attr [ngx.components.UIAttribute-1678889867619]: 
                    attrName: '[innerHTML]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:pageOwner.getHtmlNameBaby(z, baby, currentMetas.variables)
                ↓_ngClass_ [ngx.components.UIAttribute-1678892222778]: 
                  attrName: '[ngClass]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:{''tabSelected'': this.pageOwner.local.index == z, ''tab'': true} '
                ↓Event [ngx.components.UIControlEvent-1678892873361]: 
                  ↓setIndex [ngx.components.UICustomAction-1678892873364]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            		
                            		page.pageOwner.local.index = props.stack.root.scope.z;
                            		page.dts.buildFilters();
                            		try{
                            			//page["editor"]["_editor"].setContent(page["transform$toHtml"](page["getItemNameById"](page["getKeyIndex"](props.stack.root.scope.params1610637118444.sources))))
                            			if(page.pageOwner.getKeyIndex(page.item[page.path]).type == "ts"){
                            				page.comp1610637118444.currentEdit.editor._editor.bodyElement.style.backgroundColor = "#88bdff"
                            			}
                            			else{
                            				page.comp1610637118444.currentEdit.editor._editor.bodyElement.style.backgroundColor= "#FFF3CD";
                            			}
                            		}
                            		catch(e){
                            			
                            		}
                            		
                            		resolve();
                            
                    ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1678892873370]: 
                      beanData: '{"ionBean":"InvokeAction"}'
                      stack: C8Oforms.MobileApplication.Application.detectChangesDoble
      ↓DivScrollContainerCommentCurrentVar [ngx.components.UIDynamicElement-1615371539865]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓Style [ngx.components.UIStyle-1615371539868]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  	
                     
                  width:100%;
                  
        ↓DivContainerTab [ngx.components.UIDynamicElement-1678890701945]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Style [ngx.components.UIStyle-1678890701948]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    ' display: inline-flex;
                      flex-wrap: wrap;
                         background-color: #fafbfc!important;
                         width:100%;
                        padding-left:15px;
                        box-sizing:border-box;
                      width:100% !important;
                      padding-top: 1vh !important;
                       
                    '
          ↓DivSelected [ngx.components.UIDynamicElement-1678890701951]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓tag [ngx.components.UIControlDirective-1678894110794]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:!(this.isSource && currentMetas?.variables.name[this.pageOwner.local.index] == 'forms_filter' && this.pageOwner.getMetaFromPalette(this.item.type).hasFilter == true)
              ↓Span [ngx.components.UIDynamicElement-1678890701954]: 
                beanData: '{"ionBean":"SpanTag"}'
                tagName: span
                ↓Attr [ngx.components.UIAttribute-1678890701957]: 
                  attrName: '[innerHTML]'
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.pageOwner.getHtmlCommentBaby(this.pageOwner.local.index, currentMetas.variables[this.pageOwner.local.index], currentMetas.variables)
            ↓Style [ngx.components.UIStyle-1678893318860]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	//same as line-height in case of comment is empty
                      	min-height: 21px;
                      '
      ↓Directive [ngx.components.UIControlDirective-1609841060750]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:!(this.isSource && currentMetas.variables.name[this.pageOwner.local.index] == 'forms_filter' && this.pageOwner.getMetaFromPalette(this.item.type).hasFilter == true)
        ↓Grid [ngx.components.UIDynamicElement-1608568354131]: 
          beanData: '{"ionBean":"Grid","Height":"plain:unset"}'
          tagName: ion-grid
          ↓UseSharedComponent1 [ngx.components.UIUseShared-1610653732325]: 
            sharedcomponent: C8Oforms.MobileApplication.Application.dataSourceEditorDescription
            ↓isText [ngx.components.UIUseVariable-1610653750782]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.pageOwner.getKeyIndex(this.pageOwner.sources)?.type != 'ts' 
          ↓UseSharedComponent [ngx.components.UIUseShared-1610637611423]: 
            identifier: dts
            sharedcomponent: C8Oforms.MobileApplication.Application.dataSourceEditor
            ↓item [ngx.components.UIUseVariable-1610637621821]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.item
            ↓sources [ngx.components.UIUseVariable-1610641762955]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.item[this.path]
            ↓path [ngx.components.UIUseVariable-1610650320422]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.path
            ↓thingIndex [ngx.components.UIUseVariable-1610964780353]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.thingIndex
            ↓isSource [ngx.components.UIUseVariable-1663323538085]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.isSource
            ↓type [ngx.components.UIUseVariable-1678895510031]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.getCurrentVarTypeFromMetas()
            ↓currentObject [ngx.components.UIUseVariable-1678895510033]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.current.vars[currentMetas.variables.name[pageOwner.local.index]]
            ↓dragging [ngx.components.UIUseVariable-1678895510035]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:false
            ↓attr [ngx.components.UIControlEvent-1678898791761]: 
              attrName: (save)
              eventName: save
              ↓saveResult [ngx.components.UICustomAsyncAction-1678898836369]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		try {
                        			console.log("saved call", event);
                        			console.log("currentObject ", page.current.vars[page.currentMetas.variables.name[page.pageOwner.local.index]])
                        			
                        			page.current.vars[page.currentMetas.variables.name[page.pageOwner.local.index]] = {...page.current.vars[page.currentMetas.variables.name[page.pageOwner.local.index]], ...event.props};
                        			
                        			
                        		} catch (e) {
                        			console.log("an error occured while saving source result", e)
                        		} finally {
                        			return;
                        		}
                        
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1678900134392]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms.MobileApplication.Application.updateState
            ↓currentMeta [ngx.components.UIUseVariable-1678901088718]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.currentMetas.variables.type[this.pageOwner.local.index]
    ↓Attr [ngx.components.UIAttribute-1608568354974]: 
      attrName: '*ngIf'
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:this.current != undefined  && this.currentMetas != undefined && this.currentMetas.variables != undefined && currentMetas.variables.name.length > 0 && (currentMetas.variables.name[0] != 'forms_filter' || currentMetas.variables.name.length > 1 ||  this.pageOwner.getMetaFromPalette(this.item.type).hasFilter == false)
↓item [ngx.components.UICompVariable-1608568369555]: 
  value: 
↓isSource [ngx.components.UICompVariable-1610645975268]: 
  value: true
↓path [ngx.components.UICompVariable-1610647481471]: 
  value: '''sources'''
↓thingIndex [ngx.components.UICompVariable-1610964691045]: 
  value: '''sources'''
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1678814988410]: 
  ↓getCurrentEnabledItem [ngx.components.UICustomAsyncAction-1678815008018]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			page.getCurrents();
            			page.getCurentMetas();
            			page.pageOwner.subscriber_tree.subscribe((res)=>{
            				page.getCurrents();
            				page.getCurentMetas();
            				page.ref.detectChanges();
            			})
            			window["dtx"] = page;
            			console.log("this.item", page.item);
            			page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            '