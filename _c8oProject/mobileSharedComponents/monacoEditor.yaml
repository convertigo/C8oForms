scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	
        	// find tree leafs, not going more than 10 deep
        	public recursiveGetChilds(elem, compl = false, max = 10, count = 0){
        		let str = "";
        		for(let key in elem){
        			if(typeof(elem[key]) == "string"){
        				str+= `${key}: ${compl ? "any" : elem[key]},
        				`
        			}
        			else{
        				if(count < max){
        					count++;
        					str += `${key}:{
        							`;
        					str += this.recursiveGetChilds(elem[key], compl, max, count);
        					str +=`		
        					},
        					`;
        				}
        			}
        		}
        		return str;
        	}
        	public async computeCurrentElem(elem){
        		let fields = "";
        		let defs = "";
        		// call api width model true to try to get source structure
        		let struct = await this.pageOwner.searchCompletionWithElem(elem);
        		// set Interface name (will be always field name in uppercase)
        		let InterFaceName = elem.name.charAt(0).toUpperCase() + elem.name.slice(1);
        		// store it to fields interface
        		fields += `${elem.name} : ${InterFaceName}, `;
        		
        		defs+= `
        			interface ${InterFaceName} {
        				`;
        		if(Object.keys(struct.builtin).length > 0){
        			defs += this.recursiveGetChilds(struct.builtin, false);
        		}
        		if(Object.keys(struct.compl).length > 0){
        			defs += this.recursiveGetChilds(struct.compl, true);
        		}
        		defs +=`
        			}
        		`;
        		return {defs: defs, fields: fields}
        	}
        	public async computeDefs(): Promise<string>{
        		// defs will contains the all structure for completion, starting by each form component, then Fields interface
        		let defs = "";
        		// declare fields interFace that will hold the whole fields
        		let fields = "interface Fields {";
        		// walk the whole form
        		for(let elem of this.pageOwner.form.formulaire){
        			if(elem.type == "ion-card"){
        				for(let subElem of elem.children){
        					let resp = await this.computeCurrentElem(subElem);
        					fields += resp.fields;
        					defs += resp.defs;
        				}
        			}
        			else{
        				let resp = await this.computeCurrentElem(elem);
        				fields += resp.fields;
        				defs += resp.defs;
        			}
        		}
        		fields += "}";
        		
        		// declare fields interFace that will hold the whole fields
        		let actions = "interface Actions {";
        		// walk the whole form
        		for(let elem of this.pageOwner.form.actions){
        			if(elem.type == "business_logic"){
        				actions += `${elem.name} : any,`;
        			}
        		}
        		actions += "}";
        		
        		defs += `
        		${fields}
        		${actions}
        		declare const fields: Fields;
        		declare const actions: Actions;
        		`
        		console.log("final defs", defs);
        		console.log("computeDefs end");
        		return defs;
        		
        	}
        	public async onMonacoInit(editor){
        		console.log("onMonacoInit");
        		let defs = await this.computeDefs()
        		/*let defs = `
        		interface Select {
        			displayValue: string;
        			value: any;
        			getText(): string;
        		}
        		interface InputText {
        			value: string
        		}
        		interface Fields {
        		    select1: Select;
        			select2: Select;
        			inputText1: InputText;
        		}
        		
        		interface Pages {
        			count: number;
        			current: number;
        			navigateTo(pageNumber): void;
        			navigateNext(): void;
        			navigatePrevious(): void;
        		}
        		interface Form {
        			pages: Pages;
        		}
        		// global object
        		declare const fields: Fields;
        		declare const form: Form;
        		`*/
        		window["monaco"].editor.createModel(defs, ''typescript'');
        	}
        	/*End_c8o_CompFunction*/
        '
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1681289095919]: 
  ↓installDependencies [ngx.components.UICustomAsyncAction-1681289101854]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			page.local.editorOptions = {theme: ''vs-dark'', language: ''typescript''};
              			page.local.code = ''function x() {\nconsole.log("Hello world!");\n}'';
            			/*let code = `(() => {
            				console.log(fields.select1.value);
            				let sel1 = fields.select1;
            			})()`;
            			
            			let defs = `
            			
            			interface Select {
            				displayValue: string;
            				value: any;
            				getText(): string;
            			}
            			interface InputText {
            				value: string
            			}
            			interface Fields {
            			    select1: Select;
            				select2: Select;
            				inputText1: InputText;
            			}
            			
            			interface Pages {
            				count: number;
            				current: number;
            				navigateTo(pageNumber): void;
            				navigateNext(): void;
            				navigatePrevious(): void;
            			}
            			interface Form {
            				pages: Pages;
            			}
            			// global object
            			declare const fields: Fields;
            			declare const form: Form;
            			`
            			
            			monaco.editor.create(document.getElementById("container"), {
            				value: code,
            				language: "typescript",
            				automaticLayout: true,
            			});
            			monaco.editor.createModel(defs, ''typescript'');*/
            			
            			/*setTimeout(()=>{
            				monaco.editor.createModel(defs, ''typescript'');
            			}, 10000)*/
            		} catch (e) {
            			console.log("[CompMonacoEditor][afterViewInit][error]", e);
            		} finally {
            			return;
            		}
            '
    build_assets: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '{ "glob": "**/*", "input": "node_modules/monaco-editor", "output": "assets/monaco-editor" }'
    module_ng_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: MonacoEditorModule.forRoot()
    module_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: MonacoEditorModule
              - java.lang.String: 
                - ↑value: ngx-monaco-editor
    package_dependencies: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: monaco-editor
              - java.lang.String: 
                - ↑value: 0.37.1
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: ngx-monaco-editor
              - java.lang.String: 
                - ↑value: 12.0.0
↓Div [ngx.components.UIDynamicElement-1681289356813]: 
  beanData: '{"ionBean":"DivTag"}'
  isEnabled: false
  tagName: div
  ↓id [ngx.components.UIAttribute-1681289362770]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:container
  ↓Style [ngx.components.UIStyle-1681289376561]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            	height:100%;
            
↓ngx_monaco_editor [ngx.components.UIElement-1681292694675]: 
  identifier: monacoEditor
  tagName: ngx-monaco-editor
  ↓_options_ [ngx.components.UIAttribute-1681292820508]: 
    attrName: '[options]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.local.editorOptions
  ↓attr [ngx.components.UIAttribute-1681292868963]: 
    attrName: '[(ngModel)]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.code
  ↓attr1 [ngx.components.UIAttribute-1681293085229]: 
    attrName: (onInit)
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:onMonacoInit($event)
↓code [ngx.components.UICompVariable-1681294557081]: 