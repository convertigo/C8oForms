scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        import JSONFormatter from ''json-formatter-js'';
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	private _isJson: Array<boolean> = [];
        	private json: Array<any> = [];
        	public instance_id = ( "" + Math.random()).substring(2);
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		if(changes.value){
        			this._isJson = [];
        		}
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	public isJSONObject(str) {
        	    try {
        			str = str.replace(/\s+/g, '' '').trim();
        	        var obj = JSON.parse(str);
        	        if(obj && typeof obj === ''object'' && obj.constructor === Object){
        				return obj;
        			}
        			else{
        				return null;
        			}
        	    } catch (e) {
        	        return null;
        	    }
        	}
        	public isJSON(index): boolean{
        		if(this._isJson[index] != null){
        			return this._isJson[index];
        		}
        		else{
        			let result = this.isJSONObject(this.value?.[index] ?? this?.element?.value?.[index]);
        			if(result !== null){				
        				this._isJson[index] = true;
        				this.ref.detectChanges();
        				setTimeout(()=>{
        					document.getElementById(this.instance_id +''_'' + index).appendChild(
        						new JSONFormatter(result, 0,{
        							hoverPreviewEnabled: true,
        							hoverPreviewArrayCount: 100,
        							hoverPreviewFieldCount: 5,
        						})
        						.render()
        					);
        				})
        			}
        			else{
        				this._isJson[index] = false;
        			}
        			return this._isJson[index];
        		}
        	}
        	/*End_c8o_CompFunction*/
        '
↓element [ngx.components.UICompVariable-1580313233627]: 
↓Directive [ngx.components.UIControlDirective-1580313203709]: 
  directiveName: If
  directiveSource: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
      - MobileSmartSourceType: script:this?.element?.type == 'text' || this?.element?.type == 'time' || this?.element?.type == 'datetime' || this?.element?.type == 'barcode' || this?.element?.type == 'grid' || (this?.element?.type == 'actionValue' && this?.element?.att_type == false)
  ↓CardContainer [ngx.components.UIDynamicElement-1580314502614]: 
    beanData: '{"ionBean":"Card"}'
    tagName: ion-card
    ↓Style [ngx.components.UIStyle-1580318059482]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'border-radius: 5px;
              '
    ↓CardHeader [ngx.components.UIDynamicElement-1580314577553]: 
      beanData: '{"ionBean":"CardHeader"}'
      tagName: ion-card-header
      ↓GenericItem [ngx.components.UIDynamicElement-1580314829145]: 
        beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
        tagName: ion-item
        ↓UseSharedComponent [ngx.components.UIUseShared-1613996812313]: 
          sharedcomponent: C8Oforms.MobileApplication.Application.SharedHeaderStats
          ↓element [ngx.components.UIUseVariable-1613996823071]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.element
          ↓show [ngx.components.UIUseVariable-1699279123453]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.value == null
      ↓Style [ngx.components.UIStyle-1580315997486]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                padding-top:0px !important;
                padding-bottom:0px !important;
                
    ↓CardContent [ngx.components.UIDynamicElement-1580314574292]: 
      beanData: '{"ionBean":"CardContent"}'
      tagName: ion-card-content
      ↓ListContainer [ngx.components.UIDynamicElement-1580316276128]: 
        beanData: '{"ionBean":"List"}'
        tagName: ion-list
        ↓Directive [ngx.components.UIControlDirective-1580316276131]: 
          directiveIndexName: i
          directiveItemName: item
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.value ?? this?.element?.value
          ↓Directive [ngx.components.UIControlDirective-1580317851357]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:! this.isJSON(i) else ElseBlock
            ↓ListItem [ngx.components.UIDynamicElement-1580316276134]: 
              beanData: |
                '{
                 "ionBean": "ListItem",
                 "Lines": "plain:none",
                 "IonMode": "plain:ios"
                }'
              tagName: ion-item
              ↓Label [ngx.components.UIDynamicElement-1646922984589]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Paragraph [ngx.components.UIDynamicElement-1614075055030]: 
                  beanData: '{"ionBean":"Paragraph"}'
                  tagName: p
                  ↓Attr [ngx.components.UIAttribute-1584089905298]: 
                    attrName: '[innerHTML]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item
                  ↓Style [ngx.components.UIStyle-1614075278833]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '    white-space: pre-wrap;
                                color: black;
                            '
                ↓Style [ngx.components.UIStyle-1646923298023]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '/**
                           * Custom properties (sometimes referred to as CSS variables or cascading variables)
                           * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                           * They are set using custom property notation, e.g.: --main-color: black;
                           * and are accessed using the var() function, e.g.: color: var(--main-color);
                           * You can find below your component''s properties you can customize within the page.
                           * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                           * For more informations see https://ionicframework.com/docs/theming.
                          **/
                          //--color	//Color of the label
                          
                          	background-color: rgb(248, 249, 250) !important;
                          	margin:10px 0 0 0;
                          	padding: 10px 10px 10px 10px;
                          	--color: black;
                          	border-radius: 4px;
                          '
              ↓Style1 [ngx.components.UIStyle-1646923121612]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        //--background	//Background of the item
                        //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                        //--background-activated-opacity	//Opacity of the item background when pressed
                        //--background-focused	//Background of the item when focused with the tab key
                        //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                        //--background-hover	//Background of the item on hover
                        //--background-hover-opacity	//Opacity of the background of the item on hover
                        //--border-color	//Color of the item border
                        //--border-radius	//Radius of the item border
                        //--border-style	//Style of the item border
                        //--border-width	//Width of the item border
                        //--color	//Color of the item
                        //--color-activated	//Color of the item when pressed
                        //--color-focused	//Color of the item when focused with the tab key
                        //--color-hover	//Color of the item on hover
                        //--detail-icon-color	//Color of the item detail icon
                        //--detail-icon-font-size	//Font size of the item detail icon
                        //--detail-icon-opacity	//Opacity of the item detail icon
                        //--highlight-color-focused	//The color of the highlight on the item when focused
                        //--highlight-color-invalid	//The color of the highlight on the item when invalid
                        //--highlight-color-valid	//The color of the highlight on the item when valid
                        //--highlight-height	//The height of the highlight on the item
                        //--inner-border-width	//Width of the item inner border
                        //--inner-box-shadow	//Box shadow of the item inner
                        //--inner-padding-bottom	//Bottom padding of the item inner
                        //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                        //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                        //--inner-padding-top	//Top padding of the item inner
                        //--min-height	//Minimum height of the item
                        //--padding-bottom	//Bottom padding of the item
                        //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                        //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                        //--padding-top	//Top padding of the item
                        //--ripple-color	//Color of the item ripple effect
                        //--transition	//Transition of the item
                        
                        --min-height: 0px;
                        --border-radius: 5px;
                        --inner-padding-start: 16px;
                        '
          ↓tag [ngx.components.UIElement-1698933221649]: 
            identifier: ElseBlock
            tagName: ng-template
            ↓Div [ngx.components.UIDynamicElement-1698933245701]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓_innerHTML_ [ngx.components.UIAttribute-1698933252875]: 
                attrName: '[attr.id]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:instance_id +'_' + i
              ↓Style [ngx.components.UIStyle-1698934149224]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'background-color: rgb(248, 249, 250) !important;
                        	margin:10px 10px 0 36px;
                        	padding: 10px 10px 10px 10px;
                        	color: black;
                        	border-radius: 4px;
                        '
        ↓Style [ngx.components.UIStyle-1580316400689]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '//.label{
                  //margin: 0 !important;
                  //}
                  margin-bottom: 16px;
                  '
      ↓Directive [ngx.components.UIControlDirective-1580319641541]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this?.element?.value?.length > 2
        isEnabled: false
        ↓Div1 [ngx.components.UIDynamicElement-1580318329544]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Style [ngx.components.UIStyle-1580318335767]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'text-align: center;
                    '
          ↓Directive [ngx.components.UIControlDirective-1580319430344]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.pageOwner.local.show[this?.element?.name] == false
            ↓Button [ngx.components.UIDynamicElement-1580318763840]: 
              beanData: |
                '{
                 "ionBean": "Button",
                 "IonFill": "plain:clear",
                 "IonSize": "plain:large"
                }'
              tagName: ion-button
              ↓Icon [ngx.components.UIDynamicElement-1580318763843]: 
                beanData: '{"ionBean":"Icon","IconName":"plain:caret-down-circle"}'
                tagName: ion-icon
              ↓Style [ngx.components.UIStyle-1580318768894]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'display: block; margin: 0 auto;
                        ion-icon{
                        	color: var(--ion-color-primary);
                        }
                        '
              ↓Event [ngx.components.UIControlEvent-1580319324836]: 
                ↓CustomAction [ngx.components.UICustomAction-1580319336558]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		page.pageOwner.local.show[vars.name] = true;
                          		resolve();
                          
                  ↓name [ngx.components.UIControlVariable-1580319357784]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this?.element?.name
          ↓Directive1 [ngx.components.UIControlDirective-1580319471790]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.pageOwner.local.show[this?.element?.name] == true
            ↓Button [ngx.components.UIDynamicElement-1580319471793]: 
              beanData: |
                '{
                 "ionBean": "Button",
                 "IonFill": "plain:clear",
                 "IonSize": "plain:large"
                }'
              tagName: ion-button
              ↓Icon [ngx.components.UIDynamicElement-1580319471796]: 
                beanData: '{"ionBean":"Icon","IconName":"plain:caret-up-circle"}'
                tagName: ion-icon
              ↓Style [ngx.components.UIStyle-1580319471799]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'display: block; margin: 0 auto;
                        ion-icon{
                        	color: var(--ion-color-primary);
                        }
                        '
              ↓Event [ngx.components.UIControlEvent-1580319471802]: 
                ↓CustomAction [ngx.components.UICustomAction-1580319471805]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		page.pageOwner.local.show[vars.name] = false;
                          		resolve();
                          
                  ↓name [ngx.components.UIControlVariable-1580319471808]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this?.element?.name
↓InstallDep [ngx.components.UISharedComponentEvent-1698932684590]: 
  ↓InstallDependencies [ngx.components.UICustomAsyncAction-1698932694868]: 
    package_dependencies: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: json-formatter-js
              - java.lang.String: 
                - ↑value: 2.3.4
↓value [ngx.components.UICompVariable-1699278863776]: 
  value: 