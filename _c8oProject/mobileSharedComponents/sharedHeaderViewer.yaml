↓Grid [ngx.components.UIDynamicElement-1571848248994]: 
  beanData: '{"ionBean":"Grid"}'
  tagName: ion-grid
  ↓GridRow [ngx.components.UIDynamicElement-1571848248997]: 
    beanData: '{"ionBean":"GridRow"}'
    tagName: ion-row
    ↓ColLeft [ngx.components.UIDynamicElement-1571848249000]: 
      beanData: |
        '{
         "ionBean": "GridCol",
         "SizeLg": "plain:auto",
         "SizeXl": "plain:1"
        }'
      tagName: ion-col
    ↓ColCenter [ngx.components.UIDynamicElement-1571848249003]: 
      beanData: |
        '{
         "ionBean": "GridCol",
         "SizeLg": "plain:12",
         "SizeMd": "plain:12",
         "SizeSm": "plain:12",
         "SizeXl": "plain:10",
         "SizeXs": "plain:12"
        }'
      tagName: ion-col
      ↓UseSharedComponent [ngx.components.UIUseShared-1571848249006]: 
        sharedcomponent: C8Oforms_NGX.MobileApplication.Application.sharedHeaderMobileViewer
        ↓mobile [ngx.components.UIUseVariable-1612375204418]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: 'script:this.global?.platform?.name[''0''] == ''mobile'' ? true : false'
        ↓prod [ngx.components.UIUseVariable-1612375204420]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.prod
      ↓UseSharedComponent1 [ngx.components.UIUseShared-1571848249009]: 
        sharedcomponent: C8Oforms_NGX.MobileApplication.Application.sharedHeaderWebViewer
        ↓mobile [ngx.components.UIUseVariable-1612365636870]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: 'script:this.global?.platform?.name[''0''] == ''mobile'' ? true : false'
        ↓prod [ngx.components.UIUseVariable-1612365636872]: 
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.prod
    ↓ColRight [ngx.components.UIDynamicElement-1571848249012]: 
      beanData: '{"ionBean":"GridCol","SizeXl":"plain:1"}'
      tagName: ion-col
    ↓Style [ngx.components.UIStyle-1571848249015]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'align-items: bottom;
              '
  ↓Style [ngx.components.UIStyle-1571858089404]: 
    isEnabled: false
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            'background-color: white;
            '
  ↓Attr [ngx.components.UIAttribute-1612534736169]: 
    attrName: '[ngStyle]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: 'script:{''background-color'':page.local.headerColor}'
↓prod [ngx.components.UICompVariable-1572347604502]: 
↓PageEvent [ngx.components.UIPageEvent-1612534629737]: 
  ↓defineColorsForHeader [ngx.components.UICustomAction-1612534647706]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		(page as any).pageOwner.local.parami18n.headerColor = "#ffffff"; 
            		(page as any).pageOwner.local.parami18n.policyColor = "black";
            		let btLightColor = "#ff8206";
            		let btLightColor2 = "#ffc906";
            		let secondaryColor = "#32db64";
            		let secondaryColor2 = "#0cbbe7";
            		let dangerColor = "#f53d3d";
            		let dangerColor2 ="#950000";
            		(page as any).pageOwner.local.parami18n.policyBtLightColor = "btLight";
            		(page as any).pageOwner.local.parami18n.policySecondaryColor = "secondary";
            		(page as any).pageOwner.local.parami18n.policyDangerColor = "danger";
            		
            		try{
            			let indexPWA = window.location.pathname.indexOf("pwas");
                        let indexMobile = window.location.pathname.indexOf("mobile");
                        // if we started in standalone pwa mode
                        if(indexPWA != -1 && indexMobile == -1){
                            let indexHtml = window.location.pathname.indexOf("index.html");
                            let standalonePwa = window.location.pathname.substring(indexPWA + 5, indexHtml -1)
            				// get url base
                          const baseUrl = window.location.origin + window.location.pathname.substring(0, window.location.pathname.lastIndexOf("/"));
                          this.global.pwaGet = this.c8o.httpPublic.get(baseUrl + "/manifest.json");
            			  this.global.pwaGet
                            .subscribe(
                              response => {
                                  if(response["theme_color"] != undefined){
            						(page as any).pageOwner.local.parami18n.headerColor = response["theme_color"];
            						// color asked for theme
            						const color1 = new TinyColor((page as any).pageOwner.local.parami18n.headerColor);
            						// background color
            						const color2 = new TinyColor("#ffffff");
            						// get ALPHA
            						let amount = color1.getAlpha() * 100;
            						const visibleColor = color2.mix(color1, amount);
            						let readabilitBlack = readability(visibleColor, "black");
            						let readabilitWhite = readability(visibleColor, "white");
            						if(readabilitWhite > readabilitBlack){
            							(page as any).pageOwner.local.parami18n.policyColor = "white";
            						}
            						//checking for other icons
            						let readabilitBtLight = readability(visibleColor, btLightColor);
            						let readabilitBtLight2 = readability(visibleColor, btLightColor2);
            						if(readabilitBtLight2 > readabilitBtLight){
            							(page as any).pageOwner.local.parami18n.policyBtLightColor = "otherBtLight";
            						}
            						let readabilitSecondary = readability(visibleColor, secondaryColor);
            						let readabilitSecondary2 = readability(visibleColor, secondaryColor2);
            						if(readabilitSecondary2 > readabilitSecondary){
            							(page as any).pageOwner.local.parami18n.policySecondaryColor = "convertigo";
            						}
            						let readabilitDanger = readability(visibleColor, dangerColor);
            						let readabilitDanger2 = readability(visibleColor, dangerColor2);
            						if(readabilitDanger2 > readabilitDanger){
            							(page as any).pageOwner.local.parami18n.policyDangerColor = "otherDanger";
            						}
                              	}
                              },
                              error=>{
                                  // do nothing
                              })		
            			}
            		}
            		catch(e){
            		}
            		resolve();
            
    package_dependencies: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'
              - java.lang.String: 
                - ↑value: 3.3.4
    page_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: TinyColor
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: mostReadable
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: readability
              - java.lang.String: 
                - ↑value: '@ctrl/tinycolor'