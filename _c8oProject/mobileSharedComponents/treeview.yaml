scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*if(this.pageOwner != null && this.tree == null){
        			this.tree = this.pageOwner.local.tree;
        			this.name = this.pageOwner.local.name;
        		}*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	public evalCurrentField(elem, tree){
        		if(typeof(tree[elem]) == "object"){
        			return (tree[elem].displayName != undefined ? tree[elem].displayName : elem);
        		}
        		else{
        			return elem;
        		}
        	}
        	public ObjectKeys(obj){
        		return Object.keys(obj);
        	}
        	isObject(elem, tree){
        		return (typeof(tree[elem]) == "object");
        	}
        	public async searchCompletionWithElem(currentElem = this.currentElement){
        		let structure = {"compl":{}, "builtin":{}};
        		try{
        			// if its a sourced elem
        			if(currentElem.sources != undefined){
        				for(let source in currentElem.sources){
        					if(currentElem.sources[source].enabled){
        						//try to compute default vars values
        						let defaultVars = {};
        						let regex = /\$\$(?:START)?(\d+)(.*?)(?:END)?(?:\d+)?\$\$/
        						try{
        							defaultVars = Object.keys(currentElem.sources[source].vars).map((x=>{return {key: x, value: currentElem.sources[source].vars[x].str != undefined ? currentElem.sources[source].vars[x].str.replace(regex, "") : "" }})).reduce((obj, item) => Object.assign(obj, { [item.key]: item.value }), {});
        						}
        						catch(e){
        							
        						}
        						let res = await this.c8o.callJsonObject(source,{model: true, ...defaultVars}).async();
        						switch(currentElem.type){
        							case "grid":
        								structure.compl = res.data[0];
        							break;
        							case "select":
        								if(typeof(res.value[0]) == "string"){
        									structure.compl = {value: ''''};
        								}
        								else{
        									structure.compl = {displayValue: '''', value: ''''};
        								}
        							break;
        						}
        						
        					}
        				}
        			}
        			switch(currentElem.type){
        				case "checkbox":
        				case "checkbox_group":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"selected_data_c8o_separated_by_coma":"",
        									"not_selected_data_c8o_separated_by_coma":""
        							},
        							"JSON_format":{
        									"all_data":"",
        									"selected_data": "",
        									"not_selected_data" :""
        							},
        							"graphic_formatting":""
        						};						
        				break;
        				case "radio":
        				case "radio_group":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"selected_data_c8o_separated_by_coma":""
        							},
        							"JSON_format":{
        									"all_data":"",
        									"selected_data": ""
        							},
        							"graphic_formatting":""
        						};						
        				break;
        				case "grid":
        					structure.builtin =
        						{
        							"graphic_formatting":""
        						};
        				break;
        				case "select":
        					structure.builtin =
        						{
        							"graphic_formatting":"",
        							"TEXT_format":""
        						};
        				break;
        				case "slider":
        					structure.builtin =
        						{
        							"Number_format":"",
        							"TEXT_format":""
        						};
        				break;
        				case "datetime":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"fulldate":"",
        									"day":"",
        									"month":"",
        									"year":""
        							},
        							"JSON_format":{
        									"fulldate":"",
        									"day":"",
        									"month":"",
        									"year":""
        							},
        						};
        				break;
        				case "time":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"fullhours":"",
        									"hours":"",
        									"mins":""
        							},
        						};
        				break;
        				case "location":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"AddressLine":"",
        									"AdminDistrict":"",
        									"AdminDistrict2":"",
        									"CountryRegion":"",
        									"FormattedAddress":"",
        									"Locality":"",
        									"PostalCode":"",
        									"latitude":"",
        									"longitude":"",
        									"altitude":"",
        									"accuracy":"",
        									"altitudeAccuracy":""
        							},
        							"JSON_format":{
        									"addr":"",
        									"gps":""
        							},
        						};
        				break;
        			}
        		
        		}
        		catch(e){
        			
        		}
        		finally{
        			console.log("structure",structure)
        			return structure;
        		}
        		
        		
        	}
        	public translateSeparator(val){
        		let str = "";
        		for (let elem of val.split("_c8o_")){
        			str += this.translate.instant(elem);
        		}
        		return str;
        	}
        	/*End_c8o_CompFunction*/
        '
↓tree [ngx.components.UICompVariable-1666694668418]: 
  value: null
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1666694668421]: 
  componentEvent: onInit
  ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1666873774177]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		try {
            			if(page.tree === null){
            				page.name = page.currentElement.name;
            				let getCompl = await page.searchCompletionWithElem();
            				page.tree = getCompl.compl;
            				page.treebuiltin = getCompl.builtin;
            			}
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            
↓name [ngx.components.UICompVariable-1666694668427]: 
  value: null
↓path [ngx.components.UICompVariable-1666703499207]: 
  value: null
↓handler [ngx.components.UICompVariable-1666704846931]: 
  value: null
↓currentElement [ngx.components.UICompVariable-1666872625892]: 
  value: null
↓treebuiltin [ngx.components.UICompVariable-1666877532137]: 
  value: null
↓ListContainer [ngx.components.UIDynamicElement-1666694668433]: 
  beanData: '{"ionBean":"List"}'
  tagName: ion-list
  ↓Directive [ngx.components.UIControlDirective-1666878446254]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.name != null
    ↓ListHeader [ngx.components.UIDynamicElement-1666694668436]: 
      beanData: '{"ionBean":"Listheader","IonColor":"plain:primary"}'
      tagName: ion-list-header
      ↓Label [ngx.components.UIDynamicElement-1666694668439]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Heading [ngx.components.UIDynamicTag-1666694668442]: 
          beanData: '{"ionBean":"Heading"}'
          tagName: h1
          ↓Text [ngx.components.UIText-1666694668445]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: source:{"filter":"Shared","project":"C8Oforms","input":"","model":{"data":[{"priority":1666694668065,"regular":true}],"path":"?.name","prefix":"","suffix":" | translate","custom":"","useCustom":false}}
      ↓Event [ngx.components.UIControlEvent-1666704368383]: 
        ↓savePath [ngx.components.UICustomAsyncAction-1666704391032]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  		try {
                  			page.handler("", false);
                  		} catch (e) {
                  		
                  		} finally {
                  			return;
                  		}
                  
          ↓ClosePopover [ngx.components.UIDynamicAction-1666704737958]: 
            beanData: '{"ionBean":"ClosePopoverAction"}'
  ↓Directive2 [ngx.components.UIControlDirective-1666694668430]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.tree != null
    ↓Directive [ngx.components.UIControlDirective-1666694668448]: 
      directiveIndexName: idx
      directiveItemName: item
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:ObjectKeys(this.tree)
      ↓ListItem1 [ngx.components.UIDynamicElement-1666694668451]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Label [ngx.components.UIDynamicElement-1666694668454]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1666694668457]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:evalCurrentField(item, this.tree)
          ↓Style [ngx.components.UIStyle-1666874165737]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--color	//Color of the label
                    '
          ↓Attr [ngx.components.UIAttribute-1666874233305]: 
            attrName: class
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:ion-text-wrap
        ↓Directive [ngx.components.UIControlDirective-1666694668460]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:isObject(item, this.tree)
          ↓Icon [ngx.components.UIDynamicElement-1666694668463]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IconName": "source:{\"filter\":\"Icon\",\"project\":\"monaco\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''arrow-forward-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
               "IconSlot": "plain:end"
              }'
            tagName: ion-icon
            ↓Popover [ngx.components.UIDynamicElement-1666694668466]: 
              beanData: |
                '{
                 "ionBean": "InlinePopover",
                 "Trigger": "script:this.name + idx",
                 "TriggerAction": "plain:hover"
                }'
              tagName: ion-popover
              ↓UseSharedComponent1 [ngx.components.UIUseShared-1666694668469]: 
                sharedcomponent: C8Oforms.MobileApplication.Application.treeview
                ↓tree [ngx.components.UIUseVariable-1666694668472]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.tree[item]
                ↓name [ngx.components.UIUseVariable-1666694668475]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:evalCurrentField(item, this.tree)
                ↓path [ngx.components.UIUseVariable-1666704259149]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.path + '.' + evalCurrentField(item, this.tree)
                ↓handler [ngx.components.UIUseVariable-1666704978701]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.handler
                ↓currentElement [ngx.components.UIUseVariable-1666877885307]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.currentElement
                ↓treebuiltin [ngx.components.UIUseVariable-1666877885309]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:null
            ↓Attr [ngx.components.UIAttribute-1666694668478]: 
              attrName: id
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.name + idx
        ↓Style [ngx.components.UIStyle-1666704212923]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  cursor:pointer;
                  '
        ↓Event [ngx.components.UIControlEvent-1666704566602]: 
          ↓savePath [ngx.components.UICustomAsyncAction-1666704566605]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '		try {
                    			console.log("path is: " + page.path + "." + vars.item);
                    			page.handler( page.path + "." + page.evalCurrentField(vars.item, page.tree), false, page.isObject(vars.item, page.tree));
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    '
            ↓item [ngx.components.UIControlVariable-1666704622658]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:item
            ↓ClosePopover [ngx.components.UIDynamicAction-1666704760608]: 
              beanData: '{"ionBean":"ClosePopoverAction"}'
  ↓Style [ngx.components.UIStyle-1666703355062]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            	padding:0;
            	cursor:pointer;
            
  ↓Directive3 [ngx.components.UIControlDirective-1666878406985]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.treebuiltin != null
    ↓Directive1 [ngx.components.UIControlDirective-1666876554192]: 
      directiveIndexName: idx
      directiveItemName: item
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:ObjectKeys(this.treebuiltin)
      ↓ListItem1 [ngx.components.UIDynamicElement-1666876554195]: 
        beanData: '{"ionBean":"ListItem"}'
        tagName: ion-item
        ↓Label [ngx.components.UIDynamicElement-1666876554198]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1666876554201]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:translateSeparator(evalCurrentField(item, this.treebuiltin))
          ↓Style [ngx.components.UIStyle-1666876554204]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--color	//Color of the label
                    '
          ↓Attr [ngx.components.UIAttribute-1666876554207]: 
            attrName: class
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:ion-text-wrap
        ↓Directive [ngx.components.UIControlDirective-1666876554210]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:isObject(item, this.treebuiltin)
          ↓Icon [ngx.components.UIDynamicElement-1666876554213]: 
            beanData: |
              '{
               "ionBean": "Icon",
               "IconName": "source:{\"filter\":\"Icon\",\"project\":\"monaco\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''arrow-forward-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
               "IconSlot": "plain:end"
              }'
            tagName: ion-icon
            ↓Popover [ngx.components.UIDynamicElement-1666876554216]: 
              beanData: |
                '{
                 "ionBean": "InlinePopover",
                 "Trigger": "script:this.name + idx",
                 "TriggerAction": "plain:hover"
                }'
              tagName: ion-popover
              ↓UseSharedComponent1 [ngx.components.UIUseShared-1666876554219]: 
                sharedcomponent: C8Oforms.MobileApplication.Application.treeview
                ↓tree [ngx.components.UIUseVariable-1666876554222]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:undefined
                ↓name [ngx.components.UIUseVariable-1666876554225]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:evalCurrentField(item, this.treebuiltin)
                ↓path [ngx.components.UIUseVariable-1666876554228]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.path + '.' + item
                ↓handler [ngx.components.UIUseVariable-1666876554231]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.handler
                ↓currentElement [ngx.components.UIUseVariable-1666877863500]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.currentElement
                ↓treebuiltin [ngx.components.UIUseVariable-1666877863502]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.treebuiltin[item]
            ↓Attr [ngx.components.UIAttribute-1666876554234]: 
              attrName: id
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.name + idx
        ↓Style [ngx.components.UIStyle-1666876554237]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  cursor:pointer;
                  '
        ↓Event [ngx.components.UIControlEvent-1666876554240]: 
          ↓savePath [ngx.components.UICustomAsyncAction-1666876554243]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '		try {
                    			console.log("path is: " + page.path + "." + vars.item);
                    			page.handler( page.path + "." + vars.item, true, page.isObject(vars.item, page.treebuiltin));
                    		} catch (e) {
                    		
                    		} finally {
                    			return;
                    		}
                    '
            ↓item [ngx.components.UIControlVariable-1666876554246]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:item
            ↓ClosePopover [ngx.components.UIDynamicAction-1666876554249]: 
              beanData: '{"ionBean":"ClosePopoverAction"}'