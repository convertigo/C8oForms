scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*if(this.pageOwner != null && this.tree == null){
        			this.tree = this.pageOwner.local.tree;
        			this.name = this.pageOwner.local.name;
        		}*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	// All theses functions must be the same as treeviewListItem component
        	public evalCurrentField(elem, tree){
        		if(typeof(tree[elem]) == "object"){
        			return (tree[elem].displayName != undefined ? tree[elem].displayName : elem);
        		}
        		else{
        			return elem;
        		}
        	}
        	public ObjectKeys(obj){
        		return Object.keys(obj);
        	}
        	isObject(elem, tree){
        		return (typeof(tree[elem]) == "object");
        	}
        	public async searchCompletionWithElem(currentElem = this.currentElement){
        		let structure = {"compl":{}, "builtin":{}};
        		try{
        			// if its a sourced elem
        			if(currentElem.sources != undefined){
        				for(let source in currentElem.sources){
        					if(currentElem.sources[source].enabled){
        						//try to compute default vars values
        						let defaultVars = {};
        						let regex = /\$\$(?:START)?(\d+)(.*?)(?:END)?(?:\d+)?\$\$/
        						try{
        							defaultVars = Object.keys(currentElem.sources[source].vars).map((x=>{return {key: x, value: currentElem.sources[source].vars[x].str != undefined ? currentElem.sources[source].vars[x].str.replace(regex, "") : "" }})).reduce((obj, item) => Object.assign(obj, { [item.key]: item.value }), {});
        						}
        						catch(e){
        							
        						}
        						let res = await this.c8o.callJsonObject(source,{model: true, ...defaultVars}).async();
        						switch(currentElem.type){
        							case "grid":
        								if(this.currentElement.config.returned_value == "nothing" || this.currentElement.config.returned_value == "all_the_data"){
        									// here insert index selector and explain
        									structure.compl = {__c8o__index__reserved: res.data[0]};
        								}
        								else{
        									structure.compl = res.data[0];
        								}
        							break;
        							case "select":
        								if(typeof(res.value[0]) == "string"){
        									structure.compl = {value: ''''};
        								}
        								else{
        									structure.compl = {displayValue: '''', value: ''''};
        								}
        							break;
        						}
        						
        					}
        				}
        			}
        			switch(currentElem.type){
        				case "checkbox":
        				case "checkbox_group":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"selected_data_c8o_separated_by_coma":"",
        									"not_selected_data_c8o_separated_by_coma":""
        							},
        							"JSON_format":{
        									"all_data":"",
        									"selected_data": "",
        									"not_selected_data" :""
        							}
        						};
        						if(this.graphic){
        							structure.builtin["graphic_formatting"] = "";
        						}						
        				break;
        				case "radio":
        				case "radio_group":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"selected_data_c8o_separated_by_coma":""
        							},
        							"JSON_format":{
        									"selected_data": ""
        							}
        						};	
        						if(this.graphic){
        							structure.builtin["graphic_formatting"] = "";
        						}					
        				break;
        				case "grid":
        					structure.builtin =
        						{
        							
        						};
        					if(this.graphic){
        						structure.builtin["graphic_formatting"] = "";
        					}
        				break;
        				case "select":
        					structure.builtin =
        						{
        							"TEXT_format":""
        						};
        					if(this.graphic){
        						structure.builtin["graphic_formatting"] = "";
        					}
        				break;
        				case "slider":
        					structure.builtin =
        						{
        							"Number_format":"",
        							"TEXT_format":""
        						};
        				break;
        				case "datetime":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"fulldate":"",
        									"day":"",
        									"month":"",
        									"year":""
        							},
        							"JSON_format":{
        									"fulldate":"",
        									"day":"",
        									"month":"",
        									"year":""
        							},
        						};
        				break;
        				case "time":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"fullhours":"",
        									"hours":"",
        									"mins":""
        							},
        						};
        				break;
        				case "location":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"AddressLine":"",
        									"AdminDistrict":"",
        									"AdminDistrict2":"",
        									"CountryRegion":"",
        									"FormattedAddress":"",
        									"Locality":"",
        									"PostalCode":"",
        									"latitude":"",
        									"longitude":"",
        									"altitude":"",
        									"accuracy":"",
        									"altitudeAccuracy":""
        							},
        							"JSON_format":{
        									"addr":"",
        									"gps":""
        							},
        						};
        				break;
        			}
        		
        		}
        		catch(e){
        			
        		}
        		finally{
        			this.local.loaded = true;
        			this.c8o.log.debug("structure founded " + JSON.stringify(structure))
        			return structure;
        		}
        		
        		
        	}
        	public translateSeparator(val){
        		let str = "";
        		for (let elem of val.split("_c8o_")){
        			str += this.translate.instant(elem);
        		}
        		return str;
        	}
        	/*End_c8o_CompFunction*/
        '
↓tree [ngx.components.UICompVariable-1666694668418]: 
  value: null
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1666694668421]: 
  componentEvent: onInit
  ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1666873774177]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		try {
            			if(page.tree === null){
            				page.name = page.currentElement.name;
            				let getCompl = await page.searchCompletionWithElem();
            				page.tree = getCompl.compl;
            				page.treebuiltin = getCompl.builtin;
            				this.global.__c8o__index__reserved = 0;
            			}
            			else{
            				page.local.loaded = true;
            			}
            			if(page.local.childsOpen == null){
            				page.local.childsOpen = {};
            			}
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            
↓name [ngx.components.UICompVariable-1666694668427]: 
  value: null
↓path [ngx.components.UICompVariable-1666703499207]: 
  value: null
↓handler [ngx.components.UICompVariable-1666704846931]: 
  value: null
↓currentElement [ngx.components.UICompVariable-1666872625892]: 
  value: null
↓treebuiltin [ngx.components.UICompVariable-1666877532137]: 
  value: null
↓graphic [ngx.components.UICompVariable-1668440640128]: 
  value: true
↓showHeader [ngx.components.UICompVariable-1670506016140]: 
↓ListContainer [ngx.components.UIDynamicElement-1670505250192]: 
  beanData: '{"ionBean":"List"}'
  tagName: ion-list
  ↓Style [ngx.components.UIStyle-1670505250195]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            	padding:0;
            	cursor:pointer;
            
  ↓Directive [ngx.components.UIControlDirective-1670505250198]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.name != null && this.showHeader != false
    ↓ListHeader [ngx.components.UIDynamicElement-1670505250201]: 
      beanData: '{"ionBean":"Listheader","IonColor":"plain:primary"}'
      tagName: ion-list-header
      ↓Label [ngx.components.UIDynamicElement-1670505250204]: 
        beanData: '{"ionBean":"Label","IonColor":"plain:light"}'
        tagName: ion-label
        ↓Heading [ngx.components.UIDynamicTag-1670505250207]: 
          beanData: '{"ionBean":"Heading"}'
          tagName: h1
          ↓Text [ngx.components.UIText-1670505250210]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: source:{"filter":"Shared","project":"C8Oforms","input":"","model":{"data":[{"priority":1666694668065,"regular":true}],"path":"?.name","prefix":"","suffix":" | translate","custom":"","useCustom":false}}
        ↓Style [ngx.components.UIStyle-1670590794401]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  p{
                  	color: var(--ion-color-light);	//Color of the label	
                  }
                  
                  '
        ↓Directive [ngx.components.UIControlDirective-1670591098035]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.currentElement.type == "grid"
          ↓Paragraph [ngx.components.UIDynamicElement-1670590533975]: 
            beanData: '{"ionBean":"Paragraph"}'
            tagName: p
            ↓Text [ngx.components.UIText-1670584219151]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:('config_grid' | translate) + ' '+(this.currentElement.config.returned_value | translate)
      ↓Event [ngx.components.UIControlEvent-1670505250213]: 
        ↓savePath [ngx.components.UICustomAsyncAction-1670505250216]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  		try {
                  			page.handler("", false);
                  		} catch (e) {
                  		
                  		} finally {
                  			return;
                  		}
                  
          ↓ClosePopover [ngx.components.UIDynamicAction-1670505250219]: 
            beanData: '{"ionBean":"ClosePopoverAction"}'
      ↓Attr [ngx.components.UIAttribute-1670505250222]: 
        attrName: 
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:sticky
      ↓Style [ngx.components.UIStyle-1670505250225]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--background	//Background of the list header
                //--border-color	//Color of the list header border
                //--border-style	//Style of the list header border
                //--border-width	//Width of the list header border
                //--color	//Color of the list header text
                //--inner-border-width	//Width of the inner list header border
                position: sticky;
                top: 0;
                z-index: 10;
                '
  ↓Directive1 [ngx.components.UIControlDirective-1670593859430]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.local.loaded else ElseBlock_1670593865212
    ↓Directive2 [ngx.components.UIControlDirective-1670505250426]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.tree != null
      ↓Directive [ngx.components.UIControlDirective-1670505250429]: 
        directiveIndexName: idx
        directiveItemName: item
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:ObjectKeys(this.tree)
        ↓Directive1 [ngx.components.UIControlDirective-1670592212635]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:item == '__c8o__index__reserved' else ElseBlock_1670592266782
          ↓ListItem1 [ngx.components.UIDynamicElement-1670592496999]: 
            beanData: '{"ionBean":"ListItem","Lines":"plain:full"}'
            tagName: ion-item
            ↓Label [ngx.components.UIDynamicElement-1670592497002]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1670592497005]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'index'
              ↓Style [ngx.components.UIStyle-1670592497008]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        //--color	//Color of the label
                        &:hoover{
                        	cursor:pointer;
                        }
                        '
              ↓Attr [ngx.components.UIAttribute-1670592497011]: 
                attrName: class
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:ion-text-wrap
              ↓Event [ngx.components.UIControlEvent-1670592497014]: 
                ↓openChild [ngx.components.UICustomAsyncAction-1670592497017]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		try {
                          			if(page.isObject(vars.item, page.tree)){
                          				if(page.local.childsOpen[vars.id] != undefined){
                          				page.local.childsOpen[vars.id] = !page.local.childsOpen[vars.id];
                          				}
                          				else{
                          					page.local.childsOpen[vars.id] = true;
                          				}
                          			}
                          		} catch (e) {
                          		
                          		} finally {
                          			return;
                          		}
                          
                  ↓id [ngx.components.UIControlVariable-1670592497020]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.name + idx
                  ↓item [ngx.components.UIControlVariable-1670592497023]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: source:{"filter":"Iteration","project":"C8Oforms","input":"","model":{"data":[{"priority":1670505250429}],"path":"","prefix":"","suffix":"","custom":"","useCustom":false}}
            ↓TextInput [ngx.components.UIDynamicElement-1670593180881]: 
              beanData: |
                '{
                 "ionBean": "Input",
                 "ControlName": "plain:name1670593180881",
                 "DoubleBinding": "script:this.global.__c8o__index__reserved",
                 "Debounce": "plain:0",
                 "Type": "plain:number",
                 "Value": "script:0"
                }'
              tagName: ion-input
              ↓Style [ngx.components.UIStyle-1670593342090]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        --background: var(--ion-color-yelloweditor);	//Background of the input
                        //--color	//Color of the input text
                        //--padding-bottom	//Bottom padding of the input
                        //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input
                        --padding-start: 20px;	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input
                        margin-left: 20px;
                        //--padding-top	//Top padding of the input
                        //--placeholder-color	//Color of the input placeholder text
                        //--placeholder-font-style	//Font style of the input placeholder text
                        //--placeholder-font-weight	//Font weight of the input placeholder text
                        //--placeholder-opacity	//Opacity of the input placeholder text
                        '
            ↓Directive [ngx.components.UIControlDirective-1670592497026]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:isObject(item, this.tree) else ElseBlock_1668508066382
              ↓Icon [ngx.components.UIDynamicElement-1670592497029]: 
                beanData: |
                  '{
                   "ionBean": "Icon",
                   "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add-circle-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"(this.local?.childsOpen == undefined || this.local?.childsOpen[this.name + idx] == false || this.local?.childsOpen[this.name + idx] == undefined) ? ''add-circle-outline'' : ''remove-circle-outline''\",\"useCustom\":true}}",
                   "IconSlot": "plain:start"
                  }'
                tagName: ion-icon
                ↓Event [ngx.components.UIControlEvent-1670592497032]: 
                  ↓openChild [ngx.components.UICustomAsyncAction-1670592497035]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            		try {
                            			if(page.local.childsOpen[vars.id] != undefined){
                            				page.local.childsOpen[vars.id] = !page.local.childsOpen[vars.id];
                            			}
                            			else{
                            				page.local.childsOpen[vars.id] = true;
                            			}
                            		} catch (e) {
                            		
                            		} finally {
                            			return;
                            		}
                            
                    ↓id [ngx.components.UIControlVariable-1670592497038]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.name + idx
            ↓Style [ngx.components.UIStyle-1670592497041]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '/**
                       * Custom properties (sometimes referred to as CSS variables or cascading variables)
                       * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                       * They are set using custom property notation, e.g.: --main-color: black;
                       * and are accessed using the var() function, e.g.: color: var(--main-color);
                       * You can find below your component''s properties you can customize within the page.
                       * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                       * For more informations see https://ionicframework.com/docs/theming.
                      **/
                      //--background	//Background of the item
                      //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                      //--background-activated-opacity	//Opacity of the item background when pressed
                      //--background-focused	//Background of the item when focused with the tab key
                      //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                      //--background-hover	//Background of the item on hover
                      //--background-hover-opacity	//Opacity of the background of the item on hover
                      //--border-color	//Color of the item border
                      //--border-radius	//Radius of the item border
                      //--border-style	//Style of the item border
                      //--border-width	//Width of the item border
                      //--color	//Color of the item
                      //--color-activated	//Color of the item when pressed
                      //--color-focused	//Color of the item when focused with the tab key
                      //--color-hover	//Color of the item on hover
                      //--detail-icon-color	//Color of the item detail icon
                      //--detail-icon-font-size	//Font size of the item detail icon
                      //--detail-icon-opacity	//Opacity of the item detail icon
                      //--highlight-color-focused	//The color of the highlight on the item when focused
                      //--highlight-color-invalid	//The color of the highlight on the item when invalid
                      //--highlight-color-valid	//The color of the highlight on the item when valid
                      //--highlight-height	//The height of the highlight on the item
                      //--inner-border-width	//Width of the item inner border
                      //--inner-box-shadow	//Box shadow of the item inner
                      //--inner-padding-bottom	//Bottom padding of the item inner
                      //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                      //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                      //--inner-padding-top	//Top padding of the item inner
                      //--min-height	//Minimum height of the item
                      //--padding-bottom	//Bottom padding of the item
                      //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                      //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                      //--padding-top	//Top padding of the item
                      //--ripple-color	//Color of the item ripple effect
                      //--transition	//Transition of the item
                      cursor:pointer;
                      max-width:500px;
                      '
            ↓Tag [ngx.components.UIElement-1670592497044]: 
              identifier: ElseBlock_1668508066382
              tagName: ng-template
              ↓Icon [ngx.components.UIDynamicElement-1670592497047]: 
                beanData: |
                  '{
                   "ionBean": "Icon",
                   "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add-circle-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"''arrow-forward-outline''\",\"useCustom\":true}}",
                   "IconSlot": "plain:start"
                  }'
                tagName: ion-icon
                ↓Style [ngx.components.UIStyle-1670592497050]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	
                          
            ↓Button [ngx.components.UIDynamicElement-1670592497053]: 
              beanData: '{"ionBean":"Button","IconSlot":"plain:end"}'
              tagName: ion-button
              ↓Label [ngx.components.UIDynamicElement-1670592497056]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1670592497059]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:choose_this_val
              ↓Event [ngx.components.UIControlEvent-1670592497062]: 
                ↓savePath [ngx.components.UICustomAsyncAction-1670592497065]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '		try {
                          			if(page.path.indexOf("__c8o__index__reserved") != -1){
                          				page.path = page.path.replace("__c8o__index__reserved", this.local.__c8o__index__reserved);
                          			}
                          			console.log("path is: " + page.path + "." + vars.item);
                          			page.handler( page.path + "." + page.evalCurrentField(vars.item, page.tree), false, page.isObject(vars.item, page.tree));
                          		} catch (e) {
                          		
                          		} finally {
                          			return;
                          		}
                          '
                  ↓item [ngx.components.UIControlVariable-1670592497068]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item
                  ↓CloseModal [ngx.components.UIDynamicAction-1670592497071]: 
                    beanData: '{"ionBean":"CloseModalAction"}'
        ↓Tag [ngx.components.UIElement-1670592266782]: 
          identifier: ElseBlock_1670592266782
          tagName: ng-template
          ↓ListItem1 [ngx.components.UIDynamicElement-1670505250432]: 
            beanData: '{"ionBean":"ListItem","Lines":"plain:full"}'
            tagName: ion-item
            ↓Label [ngx.components.UIDynamicElement-1670505250435]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1670505250438]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:evalCurrentField(item, this.tree)
              ↓Style [ngx.components.UIStyle-1670505250441]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        //--color	//Color of the label
                        &:hoover{
                        	cursor:pointer;
                        }
                        '
              ↓Attr [ngx.components.UIAttribute-1670505250444]: 
                attrName: class
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:ion-text-wrap
              ↓Event [ngx.components.UIControlEvent-1670507665868]: 
                ↓openChild [ngx.components.UICustomAsyncAction-1670507665871]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		try {
                          			if(page.isObject(vars.item, page.tree)){
                          				if(page.local.childsOpen[vars.id] != undefined){
                          				page.local.childsOpen[vars.id] = !page.local.childsOpen[vars.id];
                          				}
                          				else{
                          					page.local.childsOpen[vars.id] = true;
                          				}
                          			}
                          		} catch (e) {
                          		
                          		} finally {
                          			return;
                          		}
                          
                  ↓id [ngx.components.UIControlVariable-1670507665874]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.name + idx
                  ↓item [ngx.components.UIControlVariable-1670507874754]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: source:{"filter":"Iteration","project":"C8Oforms","input":"","model":{"data":[{"priority":1670505250429}],"path":"","prefix":"","suffix":"","custom":"","useCustom":false}}
            ↓Directive [ngx.components.UIControlDirective-1670505250447]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:isObject(item, this.tree) else ElseBlock_1668508066382
              ↓Icon [ngx.components.UIDynamicElement-1670505250450]: 
                beanData: |
                  '{
                   "ionBean": "Icon",
                   "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add-circle-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"(this.local?.childsOpen == undefined || this.local?.childsOpen[this.name + idx] == false || this.local?.childsOpen[this.name + idx] == undefined) ? ''add-circle-outline'' : ''remove-circle-outline''\",\"useCustom\":true}}",
                   "IconSlot": "plain:start"
                  }'
                tagName: ion-icon
                ↓Event [ngx.components.UIControlEvent-1670505250480]: 
                  ↓openChild [ngx.components.UICustomAsyncAction-1670505250483]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            		try {
                            			if(page.local.childsOpen[vars.id] != undefined){
                            				page.local.childsOpen[vars.id] = !page.local.childsOpen[vars.id];
                            			}
                            			else{
                            				page.local.childsOpen[vars.id] = true;
                            			}
                            		} catch (e) {
                            		
                            		} finally {
                            			return;
                            		}
                            
                    ↓id [ngx.components.UIControlVariable-1670505250486]: 
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.name + idx
            ↓Style [ngx.components.UIStyle-1670505250489]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '/**
                       * Custom properties (sometimes referred to as CSS variables or cascading variables)
                       * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                       * They are set using custom property notation, e.g.: --main-color: black;
                       * and are accessed using the var() function, e.g.: color: var(--main-color);
                       * You can find below your component''s properties you can customize within the page.
                       * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                       * For more informations see https://ionicframework.com/docs/theming.
                      **/
                      //--background	//Background of the item
                      //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                      //--background-activated-opacity	//Opacity of the item background when pressed
                      //--background-focused	//Background of the item when focused with the tab key
                      //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                      //--background-hover	//Background of the item on hover
                      //--background-hover-opacity	//Opacity of the background of the item on hover
                      //--border-color	//Color of the item border
                      //--border-radius	//Radius of the item border
                      //--border-style	//Style of the item border
                      //--border-width	//Width of the item border
                      //--color	//Color of the item
                      //--color-activated	//Color of the item when pressed
                      //--color-focused	//Color of the item when focused with the tab key
                      //--color-hover	//Color of the item on hover
                      //--detail-icon-color	//Color of the item detail icon
                      //--detail-icon-font-size	//Font size of the item detail icon
                      //--detail-icon-opacity	//Opacity of the item detail icon
                      //--highlight-color-focused	//The color of the highlight on the item when focused
                      //--highlight-color-invalid	//The color of the highlight on the item when invalid
                      //--highlight-color-valid	//The color of the highlight on the item when valid
                      //--highlight-height	//The height of the highlight on the item
                      //--inner-border-width	//Width of the item inner border
                      //--inner-box-shadow	//Box shadow of the item inner
                      //--inner-padding-bottom	//Bottom padding of the item inner
                      //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                      //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                      //--inner-padding-top	//Top padding of the item inner
                      //--min-height	//Minimum height of the item
                      //--padding-bottom	//Bottom padding of the item
                      //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                      //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                      //--padding-top	//Top padding of the item
                      //--ripple-color	//Color of the item ripple effect
                      //--transition	//Transition of the item
                      cursor:pointer;
                      max-width:500px;
                      '
            ↓Tag [ngx.components.UIElement-1670505250507]: 
              identifier: ElseBlock_1668508066382
              tagName: ng-template
              ↓Icon [ngx.components.UIDynamicElement-1670505250510]: 
                beanData: |
                  '{
                   "ionBean": "Icon",
                   "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add-circle-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"''arrow-forward-outline''\",\"useCustom\":true}}",
                   "IconSlot": "plain:start"
                  }'
                tagName: ion-icon
                ↓Style [ngx.components.UIStyle-1670505250513]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	
                          
            ↓Button [ngx.components.UIDynamicElement-1670505250516]: 
              beanData: '{"ionBean":"Button","IconSlot":"plain:end"}'
              tagName: ion-button
              ↓Label [ngx.components.UIDynamicElement-1670505250519]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1670505250522]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:choose_this_val
              ↓Event [ngx.components.UIControlEvent-1670505250525]: 
                ↓savePath [ngx.components.UICustomAsyncAction-1670505250528]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '		try {
                          			if(page.path.indexOf("__c8o__index__reserved") != -1){
                          				page.path = page.path.replace("__c8o__index__reserved", this.global.__c8o__index__reserved);
                          			}
                          			console.log("path is: " + page.path + "." + vars.item);
                          			page.handler( page.path + "." + page.evalCurrentField(vars.item, page.tree), false, page.isObject(vars.item, page.tree));
                          		} catch (e) {
                          		
                          		} finally {
                          			return;
                          		}
                          '
                  ↓item [ngx.components.UIControlVariable-1670505250531]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item
                  ↓CloseModal [ngx.components.UIDynamicAction-1670505250534]: 
                    beanData: '{"ionBean":"CloseModalAction"}'
        ↓Directive [ngx.components.UIControlDirective-1670505250537]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.childsOpen[this.name + idx] == true
          ↓Div [ngx.components.UIDynamicElement-1670505885896]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓UseSharedComponent1 [ngx.components.UIUseShared-1670505250540]: 
              sharedcomponent: C8Oforms.MobileApplication.Application.treeview
              ↓tree [ngx.components.UIUseVariable-1670505250543]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.tree[item]
              ↓name [ngx.components.UIUseVariable-1670505250546]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:evalCurrentField(item, this.tree)
              ↓path [ngx.components.UIUseVariable-1670505250549]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.path + '.' + evalCurrentField(item, this.tree)
              ↓handler [ngx.components.UIUseVariable-1670505250552]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.handler
              ↓currentElement [ngx.components.UIUseVariable-1670505250555]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.currentElement
              ↓treebuiltin [ngx.components.UIUseVariable-1670505250558]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:null
              ↓graphic [ngx.components.UIUseVariable-1670506036844]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
              ↓showHeader [ngx.components.UIUseVariable-1670506036846]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:false
            ↓Style [ngx.components.UIStyle-1670505899472]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'margin-left: 40px;
                      '
    ↓Directive3 [ngx.components.UIControlDirective-1670505250564]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.treebuiltin != null
      ↓Directive1 [ngx.components.UIControlDirective-1670505250567]: 
        directiveIndexName: idx
        directiveItemName: item
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:ObjectKeys(this.treebuiltin)
        ↓ListItem2 [ngx.components.UIDynamicElement-1670511426567]: 
          beanData: '{"ionBean":"ListItem","Lines":"plain:full"}'
          tagName: ion-item
          ↓Label [ngx.components.UIDynamicElement-1670511426570]: 
            beanData: '{"ionBean":"Label"}'
            tagName: ion-label
            ↓Text [ngx.components.UIText-1670511426573]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:translateSeparator(evalCurrentField(item, this.treebuiltin))
            ↓Style [ngx.components.UIStyle-1670511426576]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '/**
                       * Custom properties (sometimes referred to as CSS variables or cascading variables)
                       * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                       * They are set using custom property notation, e.g.: --main-color: black;
                       * and are accessed using the var() function, e.g.: color: var(--main-color);
                       * You can find below your component''s properties you can customize within the page.
                       * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                       * For more informations see https://ionicframework.com/docs/theming.
                      **/
                      //--color	//Color of the label
                      &:hoover{
                      	cursor:pointer;
                      }
                      '
            ↓Attr [ngx.components.UIAttribute-1670511426579]: 
              attrName: class
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:ion-text-wrap
            ↓Event [ngx.components.UIControlEvent-1670511426582]: 
              ↓openChild [ngx.components.UICustomAsyncAction-1670511426585]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        		try {
                        			if(page.isObject(vars.item, page.treebuiltin)){
                        				if(page.local.childsOpen[vars.id] != undefined){
                        				page.local.childsOpen[vars.id] = !page.local.childsOpen[vars.id];
                        				}
                        				else{
                        					page.local.childsOpen[vars.id] = true;
                        				}
                        			}
                        		} catch (e) {
                        		
                        		} finally {
                        			return;
                        		}
                        
                ↓id [ngx.components.UIControlVariable-1670511426588]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.name + idx
                ↓item [ngx.components.UIControlVariable-1670511426591]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: source:{"filter":"Iteration","project":"C8Oforms","input":"","model":{"data":[{"priority":1670505250429}],"path":"","prefix":"","suffix":"","custom":"","useCustom":false}}
          ↓Directive [ngx.components.UIControlDirective-1670511426594]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:isObject(item, this.treebuiltin) else ElseBlock_1668508066382
            ↓Icon [ngx.components.UIDynamicElement-1670511426597]: 
              beanData: |
                '{
                 "ionBean": "Icon",
                 "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add-circle-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"(this.local?.childsOpen == undefined || this.local?.childsOpen[this.name + idx] == false || this.local?.childsOpen[this.name + idx] == undefined) ? ''add-circle-outline'' : ''remove-circle-outline''\",\"useCustom\":true}}",
                 "IconSlot": "plain:start"
                }'
              tagName: ion-icon
              ↓Event [ngx.components.UIControlEvent-1670511426600]: 
                ↓openChild [ngx.components.UICustomAsyncAction-1670511426603]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		try {
                          			if(page.local.childsOpen[vars.id] != undefined){
                          				page.local.childsOpen[vars.id] = !page.local.childsOpen[vars.id];
                          			}
                          			else{
                          				page.local.childsOpen[vars.id] = true;
                          			}
                          		} catch (e) {
                          		
                          		} finally {
                          			return;
                          		}
                          
                  ↓id [ngx.components.UIControlVariable-1670511426606]: 
                    varValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.name + idx
          ↓Style [ngx.components.UIStyle-1670511426609]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '/**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--background	//Background of the item
                    //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                    //--background-activated-opacity	//Opacity of the item background when pressed
                    //--background-focused	//Background of the item when focused with the tab key
                    //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                    //--background-hover	//Background of the item on hover
                    //--background-hover-opacity	//Opacity of the background of the item on hover
                    //--border-color	//Color of the item border
                    //--border-radius	//Radius of the item border
                    //--border-style	//Style of the item border
                    //--border-width	//Width of the item border
                    //--color	//Color of the item
                    //--color-activated	//Color of the item when pressed
                    //--color-focused	//Color of the item when focused with the tab key
                    //--color-hover	//Color of the item on hover
                    //--detail-icon-color	//Color of the item detail icon
                    //--detail-icon-font-size	//Font size of the item detail icon
                    //--detail-icon-opacity	//Opacity of the item detail icon
                    //--highlight-color-focused	//The color of the highlight on the item when focused
                    //--highlight-color-invalid	//The color of the highlight on the item when invalid
                    //--highlight-color-valid	//The color of the highlight on the item when valid
                    //--highlight-height	//The height of the highlight on the item
                    //--inner-border-width	//Width of the item inner border
                    //--inner-box-shadow	//Box shadow of the item inner
                    //--inner-padding-bottom	//Bottom padding of the item inner
                    //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                    //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                    //--inner-padding-top	//Top padding of the item inner
                    //--min-height	//Minimum height of the item
                    //--padding-bottom	//Bottom padding of the item
                    //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                    //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                    //--padding-top	//Top padding of the item
                    //--ripple-color	//Color of the item ripple effect
                    //--transition	//Transition of the item
                    cursor:pointer;
                    max-width:500px;
                    '
          ↓Tag [ngx.components.UIElement-1670511426627]: 
            identifier: ElseBlock_1668508066382
            tagName: ng-template
            ↓Icon [ngx.components.UIDynamicElement-1670511426630]: 
              beanData: |
                '{
                 "ionBean": "Icon",
                 "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add-circle-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"''arrow-forward-outline''\",\"useCustom\":true}}",
                 "IconSlot": "plain:start"
                }'
              tagName: ion-icon
              ↓Style [ngx.components.UIStyle-1670511426633]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        	
                        
          ↓Button [ngx.components.UIDynamicElement-1670511426636]: 
            beanData: '{"ionBean":"Button","IconSlot":"plain:end"}'
            tagName: ion-button
            ↓Label [ngx.components.UIDynamicElement-1670511426639]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1670511426642]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:choose_this_val
            ↓Event [ngx.components.UIControlEvent-1670511426645]: 
              ↓savePath [ngx.components.UICustomAsyncAction-1670511426648]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		try {
                        			console.log("path is: " + page.path + "." + vars.item);
                        			page.handler( page.path + "." + vars.item, true, page.isObject(vars.item, page.treebuiltin));
                        		} catch (e) {
                        		
                        		} finally {
                        			return;
                        		}
                        '
                ↓item [ngx.components.UIControlVariable-1670511426651]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:item
                ↓CloseModal [ngx.components.UIDynamicAction-1670511426654]: 
                  beanData: '{"ionBean":"CloseModalAction"}'
        ↓Directive [ngx.components.UIControlDirective-1670511426657]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.local.childsOpen[this.name + idx] == true
          ↓Div [ngx.components.UIDynamicElement-1670511426660]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓UseSharedComponent1 [ngx.components.UIUseShared-1670511426663]: 
              sharedcomponent: C8Oforms.MobileApplication.Application.treeview
              ↓tree [ngx.components.UIUseVariable-1670511426666]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:undefined
              ↓name [ngx.components.UIUseVariable-1670511426669]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:evalCurrentField(item, this.treebuiltin)
              ↓path [ngx.components.UIUseVariable-1670511426672]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.path + '.' + evalCurrentField(item, this.treebuiltin)
              ↓handler [ngx.components.UIUseVariable-1670511426675]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.handler
              ↓currentElement [ngx.components.UIUseVariable-1670511426678]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.currentElement
              ↓treebuiltin [ngx.components.UIUseVariable-1670511426681]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.treebuiltin[item]
              ↓graphic [ngx.components.UIUseVariable-1670511426684]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:true
              ↓showHeader [ngx.components.UIUseVariable-1670511426687]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:false
            ↓Style [ngx.components.UIStyle-1670511426690]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'margin-left: 40px;
                      '
  ↓Tag [ngx.components.UIElement-1670593865212]: 
    identifier: ElseBlock_1670593865212
    tagName: ng-template
    ↓Directive [ngx.components.UIControlDirective-1670593925381]: 
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:[0, 1, 2, 3, 4, 5, 6 ,7, 8, 9]
      ↓DivElement [ngx.components.UIDynamicElement-1670593925384]: 
        beanData: '{"ionBean":"DivTag"}'
        tagName: div
        ↓ParagraphTitle [ngx.components.UIDynamicElement-1670593925399]: 
          beanData: '{"ionBean":"Paragraph"}'
          tagName: p
          ↓Style [ngx.components.UIStyle-1670593925402]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'font-weight: bold;
                    margin-left:20px;
                    '
          ↓SkeletonText [ngx.components.UIDynamicElement-1670593925405]: 
            beanData: |
              '{
               "ionBean": "SkeletonText",
               "Animated": "plain:true",
               "Height": "plain:30px"
              }'
            tagName: ion-skeleton-text