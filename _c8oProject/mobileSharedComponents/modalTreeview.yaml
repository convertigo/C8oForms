scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	public evalCurrentField(elem, tree){
        		if(typeof(tree[elem]) == "object"){
        			return (tree[elem].displayName != undefined ? tree[elem].displayName : elem);
        		}
        		else{
        			return elem;
        		}
        	}
        	public ObjectKeys(obj){
        		return Object.keys(obj);
        	}
        	isObject(elem, tree){
        		return (typeof(tree[elem]) == "object");
        	}
        	public async searchCompletionWithElem(currentElem = this.currentElement){
        		let structure = {"compl":{}, "builtin":{}};
        		try{
        			// if its a sourced elem
        			if(currentElem.sources != undefined){
        				for(let source in currentElem.sources){
        					if(currentElem.sources[source].enabled){
        						//try to compute default vars values
        						let defaultVars = {};
        						let regex = /\$\$(?:START)?(\d+)(.*?)(?:END)?(?:\d+)?\$\$/
        						try{
        							defaultVars = Object.keys(currentElem.sources[source].vars).map((x=>{return {key: x, value: currentElem.sources[source].vars[x].str != undefined ? currentElem.sources[source].vars[x].str.replace(regex, "") : "" }})).reduce((obj, item) => Object.assign(obj, { [item.key]: item.value }), {});
        						}
        						catch(e){
        							
        						}
        						let res = await this.c8o.callJsonObject(source,{model: true, ...defaultVars}).async();
        						switch(currentElem.type){
        							case "grid":
        								structure.compl = res.data[0];
        							break;
        							case "select":
        								if(typeof(res.value[0]) == "string"){
        									structure.compl = {value: ''''};
        								}
        								else{
        									structure.compl = {displayValue: '''', value: ''''};
        								}
        							break;
        						}
        						
        					}
        				}
        			}
        			switch(currentElem.type){
        				case "checkbox":
        				case "checkbox_group":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"selected_data_c8o_separated_by_coma":"",
        									"not_selected_data_c8o_separated_by_coma":""
        							},
        							"JSON_format":{
        									"all_data":"",
        									"selected_data": "",
        									"not_selected_data" :""
        							}
        						};
        						if(this.graphic){
        							structure.builtin["graphic_formatting"] = "";
        						}						
        				break;
        				case "radio":
        				case "radio_group":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"selected_data_c8o_separated_by_coma":""
        							},
        							"JSON_format":{
        									"all_data":"",
        									"selected_data": ""
        							}
        						};	
        						if(this.graphic){
        							structure.builtin["graphic_formatting"] = "";
        						}					
        				break;
        				case "grid":
        					structure.builtin =
        						{
        							
        						};
        					if(this.graphic){
        						structure.builtin["graphic_formatting"] = "";
        					}
        				break;
        				case "select":
        					structure.builtin =
        						{
        							"TEXT_format":""
        						};
        					if(this.graphic){
        						structure.builtin["graphic_formatting"] = "";
        					}
        				break;
        				case "slider":
        					structure.builtin =
        						{
        							"Number_format":"",
        							"TEXT_format":""
        						};
        				break;
        				case "datetime":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"fulldate":"",
        									"day":"",
        									"month":"",
        									"year":""
        							},
        							"JSON_format":{
        									"fulldate":"",
        									"day":"",
        									"month":"",
        									"year":""
        							},
        						};
        				break;
        				case "time":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"fullhours":"",
        									"hours":"",
        									"mins":""
        							},
        						};
        				break;
        				case "location":
        					structure.builtin =
        						{
        							"TEXT_format":{
        									"AddressLine":"",
        									"AdminDistrict":"",
        									"AdminDistrict2":"",
        									"CountryRegion":"",
        									"FormattedAddress":"",
        									"Locality":"",
        									"PostalCode":"",
        									"latitude":"",
        									"longitude":"",
        									"altitude":"",
        									"accuracy":"",
        									"altitudeAccuracy":""
        							},
        							"JSON_format":{
        									"addr":"",
        									"gps":""
        							},
        						};
        				break;
        			}
        		
        		}
        		catch(e){
        			
        		}
        		finally{
        			console.log("structure",structure)
        			return structure;
        		}
        		
        		
        	}
        	public translateSeparator(val){
        		let str = "";
        		for (let elem of val.split("_c8o_")){
        			str += this.translate.instant(elem);
        		}
        		return str;
        	}
        	/*End_c8o_CompFunction*/
        '
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1668509428479]: 
  componentEvent: onInit
  ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1668509428482]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            		try {
            			if(page.tree === null){
            				page.name = page.currentElement.name;
            				let getCompl = await page.searchCompletionWithElem();
            				page.tree = getCompl.compl;
            				page.treebuiltin = getCompl.builtin;
            			}
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            
↓tree [ngx.components.UICompVariable-1668509482619]: 
  value: null
↓name [ngx.components.UICompVariable-1668509482622]: 
  value: null
↓path [ngx.components.UICompVariable-1668509482625]: 
  value: null
↓handler [ngx.components.UICompVariable-1668509482628]: 
  value: null
↓currentElement [ngx.components.UICompVariable-1668509482631]: 
  value: null
↓treebuiltin [ngx.components.UICompVariable-1668509482634]: 
  value: null
↓graphic [ngx.components.UICompVariable-1668509482637]: 
  value: true