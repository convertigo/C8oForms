↓item [ngx.components.UICompVariable-1623746901032]: 
↓GridRow [ngx.components.UIDynamicElement-1623746901035]: 
  beanData: '{"ionBean":"GridRow","FlexAlignement":"plain:ion-align-items-end"}'
  tagName: ion-row
  ↓GridCol [ngx.components.UIDynamicElement-1623746901038]: 
    beanData: '{"ionBean":"GridCol","Size":"plain:12"}'
    tagName: ion-col
    ↓GenericItem [ngx.components.UIDynamicElement-1623746901041]: 
      beanData: '{"ionBean":"GenericItem"}'
      tagName: ion-item
      ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139271]: 
        beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-uppercase"}'
        comment: FormatLayout
        tagName: div
      ↓Text [ngx.components.UIText-1623746901047]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:'define_question' | translate
      ↓Style [ngx.components.UIStyle-1623746901050]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                'color: #ff8206;
                  font-size: 14px;
                  font-weight: 600;
                  font-style: normal;
                  font-stretch: normal;
                  line-height: normal;
                  letter-spacing: normal;
                '
      ↓Style1 [ngx.components.UIStyle-1623746901053]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '	.label{
                		margin-top: 0px !important;	
                		margin-bottom: 0px !important;	
                	}
                '
    ↓Grid [ngx.components.UIDynamicElement-1623746901056]: 
      beanData: '{"ionBean":"Grid"}'
      tagName: ion-grid
      ↓GridRow [ngx.components.UIDynamicElement-1623746901059]: 
        beanData: '{"ionBean":"GridRow"}'
        tagName: ion-row
        ↓GridCol [ngx.components.UIDynamicElement-1623746901062]: 
          beanData: |
            '{
             "ionBean": "GridCol",
             "Size": "plain:8",
             "SizeLg": "plain:8",
             "SizeMd": "plain:8",
             "SizeSm": "plain:7",
             "SizeXl": "plain:8",
             "SizeXs": "plain:6"
            }'
          tagName: ion-col
          ↓GenericItem1 [ngx.components.UIDynamicElement-1623746901065]: 
            beanData: '{"ionBean":"GenericItem"}'
            tagName: ion-item
            ↓Label [ngx.components.UIDynamicElement-1623746901068]: 
              beanData: '{"ionBean":"Label","Position":"plain:stacked"}'
              tagName: ion-label
              ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139273]: 
                beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-capitalize"}'
                comment: FormatLayout
                tagName: div
              ↓Text [ngx.components.UIText-1623746901074]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'text' | translate
              ↓Style [ngx.components.UIStyle-1623746901077]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'color: var(--ion-color-primary);
                        '
            ↓Attr2 [ngx.components.UIAttribute-1623746901080]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'stylegenerictexteditor'
            ↓Style [ngx.components.UIStyle-1623746901083]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'width: 90%;
                      .label{
                      		margin-top: 0px !important;	
                      		margin-bottom: 0px !important;	
                      	}
                      '
            ↓TextArea [ngx.components.UIDynamicElement-1623746901086]: 
              beanData: '{"ionBean":"TextArea","Debounce":"plain:0"}'
              isEnabled: false
              tagName: ion-textarea
              ↓Attr [ngx.components.UIAttribute-1623746901089]: 
                attrName: '[(ngModel)]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:(page as any).pageOwner.item.config.label
              ↓Event1 [ngx.components.UIControlEvent-1623746901092]: 
                attrName: (change)
                eventName: onChange
                ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1623746901095]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms_NGX.MobileApplication.Application.updateState
              ↓Attr2 [ngx.components.UIAttribute-1623746901098]: 
                attrName: ondragstart
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:event.preventDefault();event.stopPropagation();
              ↓Event11 [ngx.components.UIControlEvent-1623746901101]: 
                attrName: (dragover)
                eventName: (dragover)
                ↓refuseDrop [ngx.components.UICustomAction-1623746901104]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		if(event.dataTransfer.types.includes("__c8oformsdrag")){
                          					event.preventDefault();
                          					//this.recursive(event.target, "before");
                          			}
                          		resolve();
                          
              ↓Attr3 [ngx.components.UIAttribute-1623746901107]: 
                attrName: ondragover
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:event.preventDefault()
              ↓Attr31 [ngx.components.UIAttribute-1623746901110]: 
                attrName: ondrop
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:event.preventDefault()
              ↓Attr11 [ngx.components.UIAttribute-1623746901113]: 
                attrName: '[attr.draggable]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:false
              ↓Event11132 [ngx.components.UIControlEvent-1623746901116]: 
                attrName: (mouseenter)
                eventName: (mouseenter)
                ↓cantDrag [ngx.components.UICustomAction-1623746901119]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	    page.local.canDrag = "false";
                          		page.tick();
                          //		console.log('MOUSEENTER !!');
                          		resolve();
                          
              ↓Event111311 [ngx.components.UIControlEvent-1623746901122]: 
                attrName: (mouseleave)
                eventName: (mouseleave)
                ↓canDrag [ngx.components.UICustomAction-1623746901125]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	    page.local.canDrag = "true";
                          		page.tick();
                          //		console.log('MOUSELEAVE !!');
                          		resolve();
                          
            ↓TextInput [ngx.components.UIDynamicElement-1623746901128]: 
              beanData: '{"ionBean":"Input","Debounce":"plain:0"}'
              tagName: ion-input
              ↓Attr [ngx.components.UIAttribute-1623746901131]: 
                attrName: '[(ngModel)]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:(page as any).pageOwner.item.config.label
              ↓Attr2 [ngx.components.UIAttribute-1623746901134]: 
                attrName: ondragstart
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:event.preventDefault();event.stopPropagation();
              ↓Attr3 [ngx.components.UIAttribute-1623746901137]: 
                attrName: ondragover
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:event.preventDefault()
              ↓Attr31 [ngx.components.UIAttribute-1623746901140]: 
                attrName: ondrop
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:event.preventDefault()
              ↓Attr11 [ngx.components.UIAttribute-1623746901143]: 
                attrName: '[attr.draggable]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:false
              ↓Event1 [ngx.components.UIControlEvent-1623746901146]: 
                attrName: (change)
                eventName: onChange
                ↓InvokeSharedAction1 [ngx.components.UIDynamicInvoke-1623746901149]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms_NGX.MobileApplication.Application.updateState
              ↓Event11 [ngx.components.UIControlEvent-1623746901152]: 
                attrName: (dragover)
                eventName: (dragover)
                ↓refuseDrop [ngx.components.UICustomAction-1623746901155]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          		if(event.dataTransfer.types.includes("__c8oformsdrag")){
                          					event.preventDefault();
                          					//this.recursive(event.target, "before");
                          			}
                          		resolve();
                          
              ↓Event11132 [ngx.components.UIControlEvent-1623746901158]: 
                attrName: (mouseenter)
                eventName: (mouseenter)
                ↓cantDrag [ngx.components.UICustomAction-1623746901161]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	    page.local.canDrag = "false";
                          		page.tick();
                          //		console.log('MOUSEENTER !!');
                          		resolve();
                          
              ↓Event111311 [ngx.components.UIControlEvent-1623746901164]: 
                attrName: (mouseleave)
                eventName: (mouseleave)
                ↓canDrag [ngx.components.UICustomAction-1623746901167]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          	    page.local.canDrag = "true";
                          		page.tick();
                          //		console.log('MOUSELEAVE !!');
                          		resolve();
                          
          ↓Attr [ngx.components.UIAttribute-1623746901170]: 
            attrName: padding
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:true
        ↓GridCol1 [ngx.components.UIDynamicElement-1623746901173]: 
          beanData: '{"ionBean":"GridCol","Size":"plain:auto"}'
          tagName: ion-col
          ↓GenericItem [ngx.components.UIDynamicElement-1623746901176]: 
            beanData: '{"ionBean":"GenericItem"}'
            tagName: ion-item
            ↓Label [ngx.components.UIDynamicElement-1623746901179]: 
              beanData: '{"ionBean":"Label","Position":"plain:stacked"}'
              tagName: ion-label
              ↓FormatLayout [ngx.components.UIDynamicAttr-1645090139275]: 
                beanData: '{"ionBean":"FormatLayout","TextTransformation":"plain:ion-text-capitalize"}'
                comment: FormatLayout
                tagName: div
              ↓Text [ngx.components.UIText-1623746901185]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:'position' | translate
            ↓SelectContainer [ngx.components.UIDynamicElement-1623746901188]: 
              beanData: |
                '{
                 "ionBean": "Select",
                 "Interface": "plain:popover",
                 "Value": "script:(page as any).pageOwner.item.config.position"
                }'
              tagName: ion-select
              ↓SelectOption [ngx.components.UIDynamicElement-1623746901191]: 
                beanData: '{"ionBean":"SelectOption","Value":"plain:''unset''"}'
                tagName: ion-select-option
                ↓Text [ngx.components.UIText-1623746901194]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Fixed
              ↓SelectOption3 [ngx.components.UIDynamicElement-1623746901197]: 
                beanData: '{"ionBean":"SelectOption","Value":"plain:''stacked''"}'
                tagName: ion-select-option
                ↓Text [ngx.components.UIText-1623746901200]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Stacked
              ↓Attr [ngx.components.UIAttribute-1623746901203]: 
                attrName: '[(ngModel)]'
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:(page as any).pageOwner.item.config.position
              ↓Event [ngx.components.UIControlEvent-1623746901206]: 
                attrName: (ionChange)
                eventName: (ionChange)
                ↓InvokeSharedAction [ngx.components.UIDynamicInvoke-1623746901209]: 
                  beanData: '{"ionBean":"InvokeAction"}'
                  stack: C8Oforms_NGX.MobileApplication.Application.updateState
            ↓Attr2 [ngx.components.UIAttribute-1623746901212]: 
              attrName: '[ngClass]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'stylegenerictexteditor'
            ↓Style [ngx.components.UIStyle-1623746901215]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	width: 90%;
                      	/*margin-left:0px !important;
                      	margin-right:0px !important;*/
                      .label{
                      		margin-top: 0px !important;	
                      		margin-bottom: 0px !important;	
                      	}
                      '
          ↓Style [ngx.components.UIStyle-1623746901218]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    max-width:120px;
                    