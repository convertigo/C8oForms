↓Div [mobile.components.UIDynamicElement-1600440331787]: 
  beanData: '{"ionBean":"DivTag"}'
  tagName: div
  ↓Paragraph [mobile.components.UIDynamicElement-1600440331790]: 
    beanData: '{"ionBean":"Paragraph"}'
    tagName: p
    ↓Text [mobile.components.UIText-1600440331793]: 
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:drop_notice
    ↓Style [mobile.components.UIStyle-1600440331796]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'text-align:center;
              color: #95a5a6;
              '
  ↓Style [mobile.components.UIStyle-1600440331799]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            'border-color: #e3e6e6;
            border-style: dashed;
            height:100%;
            '
  ↓Event [mobile.components.UIControlEvent-1600442667546]: 
    attrName: (dragover)
    eventName: (dragover)
    ↓allowDrop [mobile.components.UICustomAction-1600442667549]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              		if(vars.card == true){
              		    if(event.dataTransfer.types.includes("__c8oformsdrag")){
                              if(event.dataTransfer.types.includes("group")){
                                  //this.c8o.log.debug("dropping  card into another card is not authorized");
                              }
                              else if(event.dataTransfer.types.includes("ion-card")){
                                  //this.c8o.log.debug("dropping  card into another card is not authorized");
                              }
                              else{
                                  event.preventDefault();
                                  page["recursive"](event.target, "before");
                              }
                          }
              
              		}
              		else{
              		    if(event.dataTransfer.types.includes("__c8oformsdrag")){    
              	            event.preventDefault();
              	            page["recursive"](event.target, "before");
              	        }  
              		}
              		resolve();
              
      ↓card [mobile.components.UIControlVariable-1600443970442]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: script:params1600440285429.card
  ↓Event1 [mobile.components.UIControlEvent-1600442667552]: 
    attrName: (drop)
    eventName: (drop)
    ↓drop [mobile.components.UICustomAction-1600442667555]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              		if(vars.card){
              		    if(vars.index.length > 1){
              		        event.preventDefault();
              		        const origin = event.dataTransfer.getData("origin");
              		        switch(origin){
              		        case "new":
              		            page["addElement"](event.dataTransfer.getData("type"), vars.index);
              		            break;
              		        case "moved":
              		            let idx = event.dataTransfer.getData("index");
              		            let arr = [];
              		            if(idx.length > 1){
              		                arr[0] = +idx.substring(0,1);
              		                arr[1] = +idx.substring(2,3);
              		                if(idx.length == 5){
              		                    arr[2] = +idx.substring(4,5)
              		                }
              		            }
              		            else{
              		                arr[0] = +idx;
              		            }
              		            page["moveElement"](vars.index,arr);
              		            break;
              		        case "copied":
              		            break;
              		        }
              		        const oldElem = document.getElementById(page.local["currentHighlight"]);
              		        if(oldElem != null){
              		            oldElem.style["border-color"] = null;
              		            oldElem.style["border-style"] = null;
              		        }
              		    }
              		    else{
              		        event.preventDefault();
              	            //page.c8o.log.debug("Dropped into before level1 into a card");
              	            const origin = event.dataTransfer.getData("origin");
              	            switch(origin){
              	            case "new":
              	                this.c8o.log.debug("Origin is new");
              	                let array = [vars.index,0];
              	                if(page["formsList"][vars.index]["children"].length > 0){
              	                    array[1] = page["formsList"][vars.index]["children"].length
              	                }
              	                page["addElement"](event.dataTransfer.getData("type"), array);
              	                break;
              	            case "moved":
              	                page.c8o.log.debug("Origin is moved");
              	                let arr0 = [vars.index,0];
              	                let arr;
              	                if(event.dataTransfer.getData("index").indexOf(",") != -1){
              	                    if(event.dataTransfer.getData("index").length == 5){
              	                        arr = [+event.dataTransfer.getData("index").substring(0,1), +event.dataTransfer.getData("index").substring(2,3), +event.dataTransfer.getData("index").substring(4,5)];
              	                    }
              	                    else{
              	                        arr = [+event.dataTransfer.getData("index").substring(0,1), +event.dataTransfer.getData("index").substring(2,3)];
              	                    }
              	                }
              	                else{
              	                    arr = [+event.dataTransfer.getData("index")];
              	                }
              	                if(page["formsList"][vars.index]["children"].length > 0){
              	                    arr0[1] = page["formsList"][vars.index]["children"].length;
              	                }          
              	                page["moveElement"](arr0, arr);
              	                break;
              	            case "copied":
              	                this.c8o.log.debug("Object has been copied");
              	                break;
              	            }
              	            const oldElem = document.getElementById(page.local["currentHighlight"]);
              	            if(oldElem != null){
              	                oldElem.style["border-color"] = null;
              	                oldElem.style["border-style"] = null;
              	            }
              		    }
              		}
              		else{
              		    event.preventDefault();
              	        //this.c8o.log.debug("Dropped into before level0");
              	        const origin = event.dataTransfer.getData("origin");
              	        switch(origin){
              	        case "new":
              	            //this.c8o.log.debug("Origin is new");
              	            page["addElement"](event.dataTransfer.getData("type"), vars.index);
              	            break;
              	        case "moved":
              	            //this.c8o.log.debug("Origin is moved");
              	            let arr;
              	            if(event.dataTransfer.getData("index").indexOf(",") != -1){
              	                if(event.dataTransfer.getData("index").length == 5){
              	                    arr = [+event.dataTransfer.getData("index").substring(0,1), +event.dataTransfer.getData("index").substring(2,3),+event.dataTransfer.getData("index").substring(4,5)];
              	                }
              	                else{
              	                    arr = [+event.dataTransfer.getData("index").substring(0,1), +event.dataTransfer.getData("index").substring(2,3)];
              	                }
              	            }
              	            else{
              	                arr = [+event.dataTransfer.getData("index")];
              	            }
              	            page["moveElement"](vars.index, arr);
              	            break;
              	        case "copied":
              	            //this.c8o.log.debug("Object has been copied");
              	            
              	            break;
              	        }
              	        
              	        
              	        const oldElem = document.getElementById(page.local["currentHighlight"]);
              	        if(oldElem != null){
              	            oldElem.style["border-color"] = null;
              	            oldElem.style["border-style"] = null;
              	        }
              		}
              		
              		resolve();
              
      ↓index [mobile.components.UIControlVariable-1600442667558]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: script:params1600440285429.i
      ↓card [mobile.components.UIControlVariable-1600444086116]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: script:params1600440285429.card
  ↓Attr [mobile.components.UIAttribute-1600442734693]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params1600440285429.id
↓id [mobile.components.UICompVariable-1600442603219]: 
↓i [mobile.components.UICompVariable-1600442609749]: 
↓card [mobile.components.UICompVariable-1600443852860]: 
  value: false