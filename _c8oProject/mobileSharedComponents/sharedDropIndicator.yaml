↓Div [ngx.components.UIDynamicElement-1600440331787]: 
  beanData: '{"ionBean":"DivTag"}'
  tagName: div
  ↓Paragraph [ngx.components.UIDynamicElement-1600440331790]: 
    beanData: '{"ionBean":"Paragraph"}'
    isEnabled: false
    tagName: p
    ↓Style [ngx.components.UIStyle-1600440331796]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              'text-align:center;
              color: #95a5a6;
              '
  ↓Style [ngx.components.UIStyle-1600440331799]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            'border-color: #e3e6e6;
            border-style: dashed;
            height:100%;
            min-height:25px;
            text-align:center;
            color: #cccfcf;
            border-width: 2px;
            '
  ↓Event [ngx.components.UIControlEvent-1600442667546]: 
    attrName: (dragover)
    eventName: (dragover)
    ↓allowDrop [ngx.components.UICustomAction-1600442667549]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              		if(vars.card == true){
              		    if(event.dataTransfer.types.includes("__c8oformsdrag")){
                              if(event.dataTransfer.types.includes("group")){
                                  //page.c8o.log.debug("dropping  card into another card is not authorized");
                              }
                              else if(event.dataTransfer.types.includes("ion-card")){
                                  //page.c8o.log.debug("dropping  card into another card is not authorized");
                              }
                              else{
                                  event.preventDefault();
                                  page["recursive"](event.target, "before");
                              }
                          }
              
              		}
              		else{
              		    if(event.dataTransfer.types.includes("__c8oformsdrag")){    
              	            event.preventDefault();
              	            page["recursive"](event.target, "before");
              	        }
              			else if(event.dataTransfer.types.includes("__c8oformsdragactions")){
              				event.preventDefault();
              				page["recursive"](event.target, "before");
              			}  
              		}
              		resolve();
              
      ↓card [ngx.components.UIControlVariable-1600443970442]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.card
  ↓Event1 [ngx.components.UIControlEvent-1600442667552]: 
    attrName: (drop)
    eventName: (drop)
    ↓drop [ngx.components.UICustomAction-1600442667555]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '		try{
              			if(event.dataTransfer.types.includes("__c8oformsdrag")){
              				event.preventDefault();
              				// get origin coordinates
              				var arrayOrigin: Array<number> = event.dataTransfer.getData("index").split(",").map((e)=>{return +e});
              				// get destination coordinates
              				var arrayDestination: Array<number> = vars.index;
              				if(vars.card && arrayDestination.length < 2){
              					arrayDestination.push(page["formsList"][vars.index]["children"].length)
              				}
              				const TypeOrigin = event.dataTransfer.getData("origin");
              				switch(TypeOrigin){
              					case "new":
              						page["addElement"](event.dataTransfer.getData("type"), arrayDestination);
              					break;
              					case "moved":
              						page["moveElement"](arrayDestination, arrayOrigin);
              					break;
              				}
              			}
              			else{
              				debugger;
              				event.preventDefault();
              				// get origin coordinates
              				var arrayOrigin: Array<number> = event.dataTransfer.getData("index").split(",").map((e)=>{return +e});
              				// get destination coordinates
              				var arrayDestination: Array<number> = vars.index;
              				if(vars.card && arrayDestination.length < 2){
              					arrayDestination.push(page["formsList"][vars.index]["children"].length)
              				}
              				const TypeOrigin = event.dataTransfer.getData("origin");
              				debugger;
              				switch(TypeOrigin){
              					case "new":
              						page["addElement"](event.dataTransfer.getData("type"), arrayDestination, false, true);
              					break;
              					case "moved":
              						page["moveActionElement"](arrayDestination, arrayOrigin);
              					break;
              				}
              				
              			}
              			
              		}
              		catch(e){
              			
              		}
              		// is there stll an highlighted element ?
                      const oldElem = document.getElementById(page.local["currentHighlight"]);
                      if(oldElem != null){
              			// in this case remove it
                          oldElem.style["border-color"] = null;
                          oldElem.style["border-style"] = null;
                      }
              		
              		page.local.dragging = false;
              		page.local.draggingActions = false;
                      page.local.draggingName = "";
              		resolve();
              '
      ↓index [ngx.components.UIControlVariable-1600442667558]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.i
      ↓card [ngx.components.UIControlVariable-1600444086116]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.card
  ↓Attr [ngx.components.UIAttribute-1600442734693]: 
    attrName: id
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.id
  ↓Text [ngx.components.UIText-1600440331793]: 
    i18n: true
    textValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: 'script:this.action == true ? (translate.get(''drop_notice_action'', {index: (this.i[0] + 1)}) | async) : (translate.get(''drop_notice'') | async)'
  ↓Break [ngx.components.UIDynamicElement-1600867644078]: 
    beanData: '{"ionBean":"Break"}'
    selfClose: true
    tagName: br
↓id [ngx.components.UICompVariable-1600442603219]: 
↓i [ngx.components.UICompVariable-1600442609749]: 
↓card [ngx.components.UICompVariable-1600443852860]: 
  value: false
↓action [ngx.components.UICompVariable-1634662823607]: 
  value: false