↓ListContainer [ngx.components.UIDynamicElement-1680524456910]: 
  beanData: '{"ionBean":"List"}'
  tagName: ion-list
  ↓Directive [ngx.components.UIControlDirective-1680524456913]: 
    directiveItemName: item
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.keyName
    ↓GroupItem [ngx.components.UIDynamicElement-1680524456916]: 
      beanData: '{"ionBean":"Listgroup"}'
      isEnabled: false
      tagName: ion-item-group
      ↓DividerItem [ngx.components.UIDynamicElement-1680524456919]: 
        beanData: '{"ionBean":"Listdivider"}'
        tagName: ion-item-divider
        ↓Text [ngx.components.UIText-1680524456922]: 
          i18n: true
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:item.name
        ↓Attr [ngx.components.UIAttribute-1680524456925]: 
          attrName: color
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:light
    ↓Directive [ngx.components.UIControlDirective-1680524456928]: 
      directiveItemName: child
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:item.child
      isEnabled: false
    ↓Button [ngx.components.UIDynamicElement-1680524456934]: 
      beanData: '{"ionBean":"Button","IonFill":"plain:clear"}'
      tagName: ion-button
      ↓Style [ngx.components.UIStyle-1680524456937]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '    display: flex !important;
                    align-items: center;
                    justify-content: start;
                '
      ↓Text [ngx.components.UIText-1680524456940]: 
        i18n: true
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:item.displayName
      ↓Event [ngx.components.UIControlEvent-1680524456943]: 
        ↓CustomAction [ngx.components.UICustomAction-1680524456946]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  		resolve(props.stack.root.scope.item);
                  
          ↓item [ngx.components.UIControlVariable-1680524456949]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:item.name
          ↓ClosePopover [ngx.components.UIDynamicAction-1680524456955]: 
            beanData: '{"ionBean":"ClosePopoverAction","data":"source:{\"filter\":\"Action\",\"project\":\"C8Oforms\",\"input\":\"\",\"model\":{\"data\":[{\"priority\":1680524456946,\"rootEvent\":false},{\"priority\":1680524456943,\"rootEvent\":true}],\"path\":\"?.out\",\"prefix\":\"{result:\",\"suffix\":\"}\",\"custom\":\"\",\"useCustom\":false}}"}'
  ↓Attr [ngx.components.UIAttribute-1680524456958]: 
    attrName: '*ngIf'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:this.keyName != undefined
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1680524465326]: 
  ↓getData [ngx.components.UICustomAsyncAction-1680524565721]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			/*let currentElem = page.currentItem;
            		    let structure = { "compl": {}, "builtin": {} };
            		    try {
            		        // if its a sourced elem
            		        if (currentElem.sources != undefined) {
            		            for (let source in currentElem.sources) {
            		                if (currentElem.sources[source].enabled) {
            		                    //try to compute default vars values
            		                    let defaultVars = {};
            		                    let regex = /\$\$(?:START)?(\d+)(.*?)(?:END)?(?:\d+)?\$\$/
            		                    try {
            		                        defaultVars = Object.keys(currentElem.sources[source].vars).map((x => { return { key: x, value: currentElem.sources[source].vars[x].str != undefined ? currentElem.sources[source].vars[x].str.replace(regex, "") : "" } })).reduce((obj, item) => Object.assign(obj, { [item.key]: item.value }), {});
            		                    }
            		                    catch (e) {
            		
            		                    }
            		                    let res = await this.c8o.callJsonObject(source, { model: true, ...defaultVars }).async();
            		                    if(res && res.data && res.data[0]){
            								page.local.keyName = [];
            								for(let elem in res.data[0]){
            									page.local.keyName.push(
            										{
            											name: elem,
            											displayName:  res.data[0][elem].displayName != undefined ? res.data[0][elem].displayName : elem
            										}
            									);
            								}
            								page.ref.detectChanges();
            								console.log("this.local.keyName",page.local.keyName)
            							}
            		                }
            		            }
            		        }
            		    }
            		    catch (e) {
            		
            		    }*/
            		    
            		    console.log("entersss ", this.keyName);
            		    page.ref.detectChanges();
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            '
↓currentItem [ngx.components.UICompVariable-1680524552611]: 
↓keyName [ngx.components.UICompVariable-1680624657296]: 
  value: 