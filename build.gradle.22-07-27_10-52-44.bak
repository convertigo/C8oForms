buildscript {
	repositories {
		mavenLocal()
		maven {
			url "https://m2.convertigo.com"
		}
		jcenter()
	}
	dependencies {
		classpath 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:[5.4,)'
		classpath 'com.convertigo:gradle-plugin:8.0.0-SNAPSHOT'
	}
}

apply plugin: 'convertigo'

/** Convertigo Gradle Plugin DSL **/

//// determines if the project needs to perform a mobile build before 'deploy' or 'car' tasks
//// can also be configured with a -Pconvertigo.performsMobileBuild as Gradle parameter
def performsMobileBuild = file('_c8oProject/mobilePages').exists() && !'false'.equals(project.properties['convertigo.performsMobileBuild'])

//// the 'load' task loads and migrates the project to the current plugin version
load {
	//// change the 'version' property of the project at loading
	//// can also be configured with a -Pconvertigo.load.projectVersion as Gradle parameter
	// projectVersion '1.0.0-release'
	
	//// change the 'Convertigo server endpoint' property of the project's mobile application at loading
	//// can also be configured with a -Pconvertigo.load.mobileApplicationEndpoint as Gradle parameter
	// mobileApplicationEndpoint 'https://myserver.com/convertigo'
	
	//// specify a folder where to auto-import git references
	//// can also be configured with a -Pconvertigo.load.gitContainer as Gradle parameter
	// gitContainer '..'
	
	doLast {
		//// any property of the project can be changed here
		// convertigoProject.comment += ' edited by gradle'
	}
}

//// the 'export' task depends on 'load' and saves the project at the current plugin version
export {
	//// mobile application can be built before the 'export', then 'car' and 'deploy' can use build result
	if (performsMobileBuild) {
		dependsOn compileMobileBuilder
	}
}

//// the 'generateMobileBuilder' task depends on 'load' and generates sources of the Ionic application into _private/ionic
generateMobileBuilder {
	//// configure the generation mode, can be can be production (default) or debugplus, debug, fast
	//// if omitted, compileMobileBuilder.mode is used
	//// can also be configured with a -Pconvertigo.generateMobileBuilder.mode as Gradle parameter
	// mode 'production'
}

//// the 'compileMobileBuilder' task depends on 'generateMobileBuilder' and compiles the Ionic application with NPM into DisplayObject/mobile
compileMobileBuilder {
	//// configure the generation mode, can be can be production (default) or debug
	//// if omitted, generateMobileBuilder.mode is used
	//// can also be configured with a -Pconvertigo.compileMobileBuilder.mode as Gradle parameter
	// mode 'production'
}

//// the 'car' task allows to build a <projectName>.car inside the <projectdir>/build folder
car {
	//// configure the destination of the <projectName>.car file (default 'build' folder)
	//// can also be configured with a -Pconvertigo.car.destinationDir as Gradle parameter
	// destinationDir 'build'
	
	//// include TestCases (default true)
	//// can also be configured with a -Pconvertigo.car.includeTestCases as Gradle parameter 
	// includeTestCases true
	
	//// include Stubs (default true)
	//// can also be configured with a -Pconvertigo.car.includeStubs as Gradle parameter
	// includeStubs true
	
	//// include  built MobileApp (default true)
	//// can also be configured with a -Pconvertigo.car.includeMobileApp as Gradle parameter
	// includeMobileApp true
	
	//// include  built MobileApp assets (default true)
	//// can also be configured with a -Pconvertigo.car.includeMobileAppAssets as Gradle parameter
	// includeMobileAppAssets true
	
	//// include mobile dataset (default true)
	//// can also be configured with a -Pconvertigo.car.includeMobileDataset as Gradle parameter
	// includeMobileDataset true
	
	//// include mobile platform assets (default true)
	//// can also be configured with a -Pconvertigo.car.includeMobilePlatformsAssets as Gradle parameter
	// includeMobilePlatformsAssets true
	
	doLast {
		println "Saved Convertigo archive: $destinationFile"
	}
}

//// the 'deploy' task depends on 'car' and allows to push the project to a Convertigo server
deploy {
	//// deploy the current project to <server> using user/password credentials
	//// can also be configured with a -Pconvertigo.deploy.server as Gradle parameter
	// server 'https://myserver.com/convertigo'
	
	//// user used by the deploy action, default is 'admin'
	//// can also be configured with a -Pconvertigo.deploy.user as Gradle parameter
	// user 'admin'
	
	//// password used by the deploy action, default is 'admin'
	//// can also be configured with a -Pconvertigo.deploy.password as Gradle parameter
	// user 'password'
	
	//// deploy over an https <server> without checking certificates, default is false
	//// can also be configured with a -Pconvertigo.deploy.trustAllCertificates as Gradle parameter
	// trustAllCertificates false
	
	//// assemble XSL files on deploy, default is false
	//// can also be configured with a -Pconvertigo.deploy.assembleXsl as Gradle parameter
	// assembleXsl false
	
	//// retry <retry> times in case of deploy failure, default is 5
	//// can also be configured with a -Pconvertigo.deploy.retry as Gradle parameter
	// retry 5
}

//// the 'remoteBuild' task depends on 'load' and it's just a configurator for 'launchRemoteBuild' and 'downloadRemoteBuild'
remoteBuild {
	if (performsMobileBuild) {
		dependsOn compileMobileBuilder
	}
	
	//// set an array of platforms (Convertigo Platforms object) names to build, empty means all declared platforms
	//// can also be configured with a -Pconvertigo.remoteBuild.platforms as Gradle parameter (names separated by comma)
	// platforms = []
	
	//// set authenticationToken from your phonegapbuild account, default use Convertigo one
	//// can also be configured with a -Pconvertigo.remoteBuild.authenticationToken
	// authenticationToken ''
	
	//// set the platform used to build application, default is https://build.convertigo.net
	//// can also be configured with a -Pconvertigo.remoteBuild.mobileBuilderPlatformURL
	// mobileBuilderPlatformURL ''
	
	//// set the iOS certificate title declared on your phonegapbuild account, default use Convertigo one
	//// can also be configured with a -Pconvertigo.remoteBuild.iosCertificateTitle
	// iosCertificateTitle ''
	
	//// set the iOS certificate password declared on your phonegapbuild account, default use Convertigo one
	//// can also be configured with a -Pconvertigo.remoteBuild.iosCertificatePassword
	// iosCertificatePassword ''
	
	//// set the Android certificate title declared on your phonegapbuild account, default use Convertigo one
	//// can also be configured with a -Pconvertigo.remoteBuild.androidCertificateTitle
	// androidCertificateTitle ''
	
	//// set the Android certificate password declared on your phonegapbuild account, default use Convertigo one
	//// can also be configured with a -Pconvertigo.remoteBuild.androidCertificatePassword
	// androidCertificatePassword ''
	
	//// set the Android certificate keystore password declared on your phonegapbuild account, default use Convertigo one
	//// can also be configured with a -Pconvertigo.remoteBuild.androidCertificateKeystorePassword
	// androidCertificateKeystorePassword ''
}

//// the 'localBuild' task depends on 'load' and allows to build mobile native package locally
localBuild {
	if (performsMobileBuild) {
		dependsOn compileMobileBuilder
	}
	
	//// set an array of platforms (Convertigo Platforms object) names to build, empty means all declared platforms
	//// can also be configured with a -Pconvertigo.localBuild.platforms as Gradle parameter (names separated by comma)
	// platforms = []
	
	//// build mode of the native package, can be 'release' or 'debug' (default)
	//// can also be configured with a -Pconvertigo.localBuild.mode as Gradle parameter
	//// the Android 'debug' mode doesn't need signing configuration
	// mode = 'debug'
	
	//// define where are moved mobile package when the build success
	//// can also be configured with a -Pconvertigo.localBuild.packageDestinationDir as Gradle parameter
	// packageDestinationDir = file('build/localDir')
	
	//// define the IOS Provisioning Profile file used to sign the IPA package
	//// can also be configured with a -Pconvertigo.localBuild.iosProvisioningProfile as Gradle parameter
	// iosProvisioningProfile = file('ios.mobileprovision')
	
	//// define the IOS Sign Identity used to sign the IPA package
	//// can also be configured with a -Pconvertigo.localBuild.iosSignIdentity as Gradle parameter
	// iosSignIdentity = (mode == 'release' ? 'iPhone Distribution' : 'iPhone Developer')
	
	//// define the Android Keystore file used to sign the release APK package
	//// can also be configured with a -Pconvertigo.localBuild.androidKeystore as Gradle parameter
	// androidKeystore = file('android.keystore')
		
	//// define the Android Keystore password
	//// can also be configured with a -Pconvertigo.localBuild.androidKeystorePassword as Gradle parameter
	// androidKeystorePassword = ''
		
	//// define the certificate alias, inside the Android Keystore, that sign the release APK package
	//// can also be configured with a -Pconvertigo.localBuild.androidAlias as Gradle parameter
	// androidAlias = ''
		
	//// define the certificate password, inside the Android Keystore, that sign the release APK package
	//// can also be configured with a -Pconvertigo.localBuild.androidPassword as Gradle parameter
	// androidPassword = ''
}

//// the 'launchRemoteBuild' task depends on 'remoteBuild' and uploads the mobile source package to the Convertigo Build Gateway
launchRemoteBuild {

}

//// the 'downloadRemoteBuild' task depends on 'launchRemoteBuild' and waits the remote build to finish, then download the native packages (iOS ipa or Android apk)
downloadRemoteBuild {
	//// configure the destination of built mobile application packages (default 'build' folder)
	//// can also be configured with a -Pconvertigo.downloadRemoteBuild.destinationDir as Gradle parameter
	// destinationDir 'build'
	
	doLast {
		destinationFiles.each {
			println "Downloaded mobile application package: $it"
		}
	}
}

//// the 'wrapper' task is used to upgrade the Gradle wrapper of the projet
if (!tasks.findByName('wrapper')) {
	task wrapper(type: Wrapper) {
		group 'build setup'
		description 'Generates Gradle wrapper files.'
	}
}
wrapper.gradleVersion = '7.3.3'